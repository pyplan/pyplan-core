{"modelProp": {"changeIdentifier": "1", "libs": [], "onOpenDashId": null, "onOpenModel": "openDiagram"}, "nodeList": [{"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "generic_business_demo", "moduleId": "_model_", "nodeClass": "model", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Generic Business Demo", "units": null, "w": "100", "x": 100, "y": 100, "z": 1}, {"color": null, "definition": "import numpy, pandas, cubepy, xarray, math, random \n#fill the following dict keys with the alias you need to import in each node\nresult = {\n    \"np\": numpy,\n    \"pd\": pandas,\n    \"cubepy\": cubepy,\n    \"xr\": xarray,\n    \"math\": math,\n    \"random\": random\n}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "imports", "moduleId": "pyplan_library", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Default imports", "units": null, "w": "184", "x": 103, "y": 190, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "sop_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supply & Operation Planning", "units": null, "w": "146", "x": "354", "y": "358", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "rev_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Revenue", "units": null, "w": "146", "x": "611", "y": "358", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "pmk_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Potential Market", "units": null, "w": "146", "x": "100", "y": "243", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "mks_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Share", "units": null, "w": "146", "x": "354", "y": "134", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "mkp_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Prices", "units": null, "w": "146", "x": "611", "y": "134", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "cdm_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Company Demand", "units": null, "w": "146", "x": "354", "y": "243", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "cpx_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX", "units": null, "w": "146", "x": "100", "y": "358", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "log_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Logistics", "units": null, "w": "146", "x": "354", "y": "475", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "opx_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX", "units": null, "w": "146", "x": "100", "y": "475", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "fin_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Model", "units": null, "w": "146", "x": "611", "y": "475", "z": 1}, {"color": null, "definition": "result = pd.Index(['Product 001','Product 002','Product 003','Product 004','Product 005','Product 006','Product 007','Product 008','Product 009','Product 010','Product 011','Product 012','Product 013','Product 014','Product 015','Product 016','Product 017','Product 018','Product 019','Product 020','Product 021','Product 022','Product 023','Product 024','Product 025','Product 026','Product 027','Product 028','Product 029','Product 030','Product 031','Product 032','Product 033','Product 034','Product 035','Product 036','Product 037','Product 038','Product 039','Product 040','Product 041','Product 042','Product 043','Product 044','Product 045','Product 046','Product 047','Product 048','Product 049','Product 050','Product 051','Product 052','Product 053','Product 054','Product 055','Product 056','Product 057','Product 058','Product 059','Product 060','Product 061','Product 062','Product 063','Product 064','Product 065','Product 066','Product 067','Product 068','Product 069','Product 070','Product 071','Product 072','Product 073','Product 074','Product 075','Product 076','Product 077','Product 078','Product 079','Product 080','Product 081','Product 082','Product 083','Product 084','Product 085','Product 086','Product 087','Product 088','Product 089','Product 090','Product 091','Product 092','Product 093','Product 094','Product 095','Product 096','Product 097','Product 098','Product 099','Product 100','Product 101','Product 102','Product 103','Product 104','Product 105','Product 106','Product 107','Product 108','Product 109','Product 110','Product 111','Product 112','Product 113','Product 114','Product 115','Product 116','Product 117','Product 118','Product 119','Product 120','Product 121','Product 122','Product 123','Product 124','Product 125','Product 126','Product 127','Product 128'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "existing_products", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Products", "units": null, "w": "100", "x": "72", "y": "70", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ast_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assumptions", "units": null, "w": "146", "x": "100", "y": "685", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Assumptions", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "640", "identifier": "node41", "moduleId": "ast_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "730", "x": "28", "y": "42", "z": "-2"}, {"color": "#cccccc", "definition": "result = 0", "description": "Indexes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "176", "identifier": "node42", "moduleId": "ast_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "704", "x": "41", "y": "75", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [100,1], [indices] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_base_indices", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Base Indices", "units": null, "w": "184", "x": "62", "y": "197", "z": 1}, {"color": "#9FC5E8", "definition": "result = pd.Index(['CPI','USD'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "indices", "moduleId": "ast_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indices", "units": null, "w": "100", "x": 766, "y": 817, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[ 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.03 , 0.017, 0.015,   0.008, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015], [ 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ,   0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ]], [indices, totalyears])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_annual_growth_rate", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Growth Rate", "units": null, "w": "184", "x": "295", "y": "102", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, ast_base_indices, pp.dynamic( ast_indices_projection, time, -1 ) * ast_monthly_growth_rate )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_indices_projection", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indices Projection", "units": null, "w": "184", "x": "295", "y": "197", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Time Related Indexes and Variables", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "466", "identifier": "node41_copy", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "result = create_time( '2017.12', '2023.12', freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Totaltime", "units": null, "w": "100", "x": "54", "y": "175", "z": 1}, {"color": null, "definition": "result = choice( totaltime, 1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "initial_modeling_year", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Modeling Year", "units": null, "w": "186", "x": "376", "y": "82", "z": 1}, {"color": null, "definition": "result = choice( decembers ,4)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "time_horizon", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Horizon", "units": null, "w": "226", "x": "355", "y": "125", "z": 1}, {"color": null, "definition": "_array_totaltime = to_dataarray(totaltime)\n_mes = apply_fn( _array_totaltime, lambda x: x[5:] )\n\nresult = subset( _mes == '12' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "decembers", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Decembers", "units": null, "w": "100", "x": "166", "y": "175", "z": 1}, {"color": null, "definition": "self.set_hierarchy([\"quarters\",\"semesters\",\"years\"], [\"time_to_quarter\",\"time_to_semester\",\"time_to_years\"] )\n\n_months = create_time( initial_modeling_year, time_horizon, freq='M', format='%Y.%m' ).values\n\nresult = pd.Index(_months)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time", "units": null, "w": "100", "x": "283", "y": "175", "z": 1}, {"color": null, "definition": "_time = create_time( initial_modeling_year, time_horizon, freq='M', format='%Y.%m' )\n\nresult = apply_fn( _time, lambda x: x[:4] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "years", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Years", "units": null, "w": "100", "x": "502", "y": "175", "z": 1}, {"color": "#4CBCFF", "definition": "_array_time = to_dataarray(time)\n_mes = apply_fn( _array_time, lambda x: x[5:] )\n\nresult = _mes.astype(int)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Month", "units": null, "w": "184", "x": "60", "y": "413", "z": 1}, {"color": null, "definition": "result = pd.Index(['2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023','2024','2025','2026','2027','2028','2029'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "totalyears", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Years", "units": null, "w": "100", "x": "396", "y": "175", "z": 1}, {"color": "#4CBCFF", "definition": "_monthly_rate = (1 + lookup( subscript( ast_annual_growth_rate, indices, 'CPI' ), time_to_years, totalyears ) ) ** ( 1 / 12 )\n\nresult = _monthly_rate - 1", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_monthly_cpi", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monthly CPI", "units": null, "w": "184", "x": "531", "y": "102", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( indices == 'USD', ast_indices_projection, ast_indices_projection / ast_base_indices )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_indices_factor_projection", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indices Factor Projection", "units": null, "w": "184", "x": "531", "y": "197", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "GDP", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "132", "identifier": "node42_copy", "moduleId": "ast_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "704", "x": "41", "y": "259", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Allocation Matrixes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "132", "identifier": "node42_copy_copy", "moduleId": "ast_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "704", "x": "41", "y": "399", "z": -1}, {"color": "#FFFF4B", "definition": "result = 49803", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_ini_gdp_capita", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial GDP per Capita", "units": null, "w": "184", "x": "295", "y": "340", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [ 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.015, 0.014, 0.016,  0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016], [totalyears] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_annual_gdp_capita_growth_rate", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual GDP per Capita Growth Rate", "units": null, "w": "184", "x": "295", "y": "292", "z": 1}, {"color": "#4CBCFF", "definition": "_monthly_rate = (1 + lookup( ast_annual_gdp_capita_growth_rate, time_to_years, totalyears ) ) ** ( 1 / 12 )\n\nresult = _monthly_rate - 1", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_monthly_gdp_capita_growth_rate", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monthly GDP per Capita Growth Rate", "units": null, "w": "184", "x": "531", "y": "292", "z": 1}, {"color": "#4CBCFF", "definition": "result = pp.dynamic( ast_gdp_capita, time, -1, ast_ini_gdp_capita ) * ( 1 + ast_monthly_gdp_capita_growth_rate )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_gdp_capita", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GDP per Capita", "units": null, "w": "184", "x": "531", "y": "340", "z": 1}, {"color": null, "definition": "result = pd.Index(['Project D - New Product'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "new_products", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Products", "units": null, "w": "100", "x": "172", "y": "70", "z": 1}, {"color": null, "definition": "self.set_hierarchy(['market_segments'], ['ast_prod_to_mkt_segment_alloc'])\n\n_products = concat_index( existing_products, new_products ).values\n\nresult = pd.Index( _products )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "products", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Products", "units": null, "w": "100", "x": "271", "y": "70", "z": 1}, {"color": null, "definition": "result = pd.Index(['Other Brands - Soda A','Other Brands - Soda B','Other Brands - Soda C','Other Brands - Soda D','Other Brands - Soda E','Other Brands - Soda F','Other Brands - Iced Tea A','Other Brands - Iced Tea B','Other Brands - Iced Tea C','Other Brands - Juice A','Other Brands - Juice B','Other Brands - Juice C','Other Brands - Juice D','Other Brands - Juice E','Other Brands - Sports Drink A','Other Brands - Sports Drink B','Other Brands - Sports Drink C'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "products_other_brands", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Products From Other Brands", "units": null, "w": "100", "x": "70", "y": "205", "z": 1}, {"color": null, "definition": "result = concat_index( mc_brand_products, products_other_brands )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "competitors_products", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Competitors' Products", "units": null, "w": "100", "x": "49", "y": "284", "z": 1}, {"color": null, "definition": "_mkt_products = concat_index( products, competitors_products ).values\n\nresult = pd.Index( _mkt_products )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "market_products", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Products", "units": null, "w": "100", "x": "169", "y": "284", "z": 1}, {"color": null, "definition": "result = pd.Index(['Market Segment 1','Market Segment 2','Market Segment 3','Market Segment 4'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "market_segments", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Segments", "units": null, "w": "100", "x": "390", "y": "70", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_monthly_cpi", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9728e63a7bf34475919b0d16367b98b3", "moduleId": "mkp_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_monthly_cpi", "picture": null, "title": "Monthly CPI", "units": null, "w": "184", "x": "287", "y": "95", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [1.28,1,1.28,1.49,1.68,1.28,1,1.9,1.45,1.49,1.87,0.75,1.28,0.7,1.28,1.45,0.75,0.75,0.6,1.28,0.75,1,1.9,0.43,1.45,1.45,0.6,1.66,0.75,0.75,0.6,0.75,1.45,0.6,1.1,0.377,0.6,1.45,1,0.75,1.1,1.1,0.6,0.75,1,0.6,0.75,1,1,1,1,1,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1,1,1,1,1.5,0.56,1,1.5,1,1,1,0.56,1,1.5,0.56,1,0.56,1,1.5,1.03,1.68,1,1.68,1,1.03,1.68,1.03,1.03,1,1.68,1.68,1.03,1.68,1.61,0.56,0.89,1.61,0.56,0.89,1.61,0.56,0.89,1.61,0.56,0.89,1.61,0.56,0.89,0.89,1.61,0.56,0.89,0.89,1,1,1,1.9,1.45,1.45,0.6,0.75,1,1.45,0.75], [existing_products] ) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_exst_prod_initial_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Products Initial Prices", "units": null, "w": "184", "x": "62", "y": "142", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, mkp_exst_prod_initial_prices, pp.dynamic( mkp_exst_prod_prices, time, -1 ) * ( 1 + ast_monthly_cpi ) ) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_exst_prod_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Products Prices", "units": null, "w": "184", "x": "287", "y": "142", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [1.1], [new_products] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_new_prod_initial_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Products Initial Prices", "units": null, "w": "184", "x": "62", "y": "188", "z": 1}, {"color": null, "definition": "result = pd.Index(['Project A - Equipment','Project B - Equipment','Project C - Capacity Increase'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "investment_projects", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Investment Projects", "units": null, "w": "100", "x": "85", "y": "67", "z": 1}, {"color": null, "definition": "result = concat_index( investment_projects, new_products )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "projects", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projects", "units": null, "w": "100", "x": "187", "y": "67", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "CAPEX", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "294", "identifier": "node4_copy_copy", "moduleId": "cpx_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "684", "x": "28", "y": "42", "z": -1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_invest_plan_mod", "moduleId": "cpx_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Investments Planning", "units": null, "w": "184", "x": "56", "y": "80", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Investments Planning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "256", "identifier": "node4_copy_copy_copy", "moduleId": "cpx_invest_plan_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "454", "x": "28", "y": "42", "z": -1}, {"color": null, "definition": "result = pd.Index(['Base Case', 'New Product', 'Capacity Increase'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "scenarios", "moduleId": "cpx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Scenarios", "units": null, "w": "100", "x": "147", "y": "50", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([\n    [np.asscalar( subscript( cpx_ini_date_base_projects, projects, \"Project A - Equipment\" ).values ),'2019.01','2019.01'],\n    [np.asscalar( subscript( cpx_ini_date_base_projects, projects, \"Project B - Equipment\" ).values ),'2023.12','2023.12'],\n    [np.asscalar( subscript( cpx_ini_date_base_projects, projects, \"Project C - Capacity Increase\" ).values ),'2020.12',capacity_increase_date],\n    [np.asscalar( subscript( cpx_ini_date_base_projects, projects, \"Project D - New Product\" ).values ),new_product_date,new_product_date]\n    ], [projects, scenarios])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_ini_date_projects_scenarios", "moduleId": "cpx_invest_plan_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Date of Projects - Scenarios", "units": null, "w": "184", "x": "50", "y": "248", "z": 1}, {"color": null, "definition": "result = choice( totaltime,15, 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "capacity_increase_date", "moduleId": "cpx_invest_plan_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capacity Increase Date", "units": null, "w": "182", "x": "131", "y": "157", "z": 1}, {"color": "#4CFFA6", "definition": "result = capacity_increase_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a1cc3b7381380406f89731dc7cd752edb", "moduleId": "cpx_invest_plan_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "capacity_increase_date", "picture": null, "title": "Capacity Increase Date", "units": null, "w": "264", "x": "49", "y": "156", "z": 1}, {"color": null, "definition": "result = choice( totaltime,19, 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_product_date", "moduleId": "cpx_invest_plan_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Product Date", "units": null, "w": "182", "x": "131", "y": "117", "z": 1}, {"color": "#4CFFA6", "definition": "result = new_product_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a1b6e47231c2643be99fdf055069f0f54", "moduleId": "cpx_invest_plan_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "new_product_date", "picture": null, "title": "New Product Date", "units": null, "w": "264", "x": "49", "y": "116", "z": 1}, {"color": null, "definition": "result = choice( scenarios,1, True)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "selected_scenario", "moduleId": "cpx_invest_plan_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Selected Scenario", "units": null, "w": "182", "x": "131", "y": "77", "z": 1}, {"color": "#4CFFA6", "definition": "result = selected_scenario", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a968f4e33b3e249319df4dab34ca20ba9", "moduleId": "cpx_invest_plan_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "selected_scenario", "picture": null, "title": "Selected Scenario", "units": null, "w": "264", "x": "49", "y": "76", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray(['2019.09','2018.02','2020.12','2020.12'], [projects])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_ini_date_base_projects", "moduleId": "cpx_invest_plan_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Date of Base Projects", "units": null, "w": "184", "x": "50", "y": "205", "z": 1}, {"color": "#4CBCFF", "definition": "if selected_scenario == 'All':\n    result = cpx_ini_date_projects_scenarios\nelse:\n    result = subscript( cpx_ini_date_projects_scenarios, scenarios, selected_scenario )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_ini_date_projects", "moduleId": "cpx_invest_plan_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Date of Projects", "units": null, "w": "184", "x": "272", "y": "248", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_ini_date_projects", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a32959eb6a4a14335bdaac0710a0092bc", "moduleId": "cpx_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_ini_date_projects", "picture": null, "title": "Initial Date of Projects", "units": null, "w": "184", "x": "281", "y": "80", "z": 1}, {"color": null, "definition": "result = pd.Index(['Investment','Building time','Building surface (m2)','Plant & Machinery (Un.)','Vehicles (Un.)','Daily Capacity Increase','Line'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "projects_parameters", "moduleId": "cpx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projects Parameters", "units": null, "w": "100", "x": "48", "y": "50", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[  1.20000000e+07,  1.50000000e+06,  3.00000000e+08,  1.50000000e+07], [  1.20000000e+01,  1.20000000e+01,  5.00000000e+00,  1.00000000e+00], [  0.00000000e+00,  0.00000000e+00,  3.00000000e+02,  1.00000000e+02], [  1.50000000e+01,  0.00000000e+00,  0.00000000e+00,  4.00000000e+01], [  0.00000000e+00,  1.00000000e+01,  0.00000000e+00,  0.00000000e+00], [  0.00000000e+00,  0.00000000e+00,  31200000.,  0.00000000e+00], [  '', '', 'Line 1',  '']], [projects_parameters, projects])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_projects_parameters", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projects Parameters", "units": null, "w": "184", "x": "56", "y": "136", "z": 1}, {"color": "#4CBCFF", "definition": "_periods = subscript( cpx_projects_parameters, projects_parameters, \"Building time\" ).astype(float).astype(int)\n\nresult = xr.where( cpx_ini_date_projects >= max_time, max_totaltime, apply_fn( cpx_ini_date_projects, add_periods, _periods) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_capitalization_date", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capitalization Date", "units": null, "w": "184", "x": "281", "y": "136", "z": 1}, {"color": null, "definition": "result = time_horizon", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "max_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Time", "units": null, "w": "100", "x": "606", "y": "175", "z": 1}, {"color": null, "definition": "result = initial_modeling_year", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "min_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Min Time", "units": null, "w": "100", "x": "709", "y": "175", "z": 1}, {"color": null, "definition": "result = np.asscalar(\n    subset( get_pos(totaltime) == ( totaltime.values.size - 1 ) ).values\n    )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "max_totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Totaltime", "units": null, "w": "100", "x": "709", "y": "243", "z": 1}, {"color": null, "definition": "result = np.asscalar(\n    subset( get_pos(totaltime) == 0 ).values\n    )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "min_totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Min Totaltime", "units": null, "w": "100", "x": "813", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "_building_time = subscript( cpx_projects_parameters, projects_parameters, \"Building time\" ).astype(float).astype(int)\n_investment = subscript( cpx_projects_parameters, projects_parameters, \"Investment\" ).astype(float).astype(int)\n\nresult = xr.where( to_dataarray(time) >= cpx_ini_date_projects, xr.where( to_dataarray(time) < cpx_capitalization_date, _investment / _building_time, 0 ), 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_cash_flow_project", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow per Project", "units": null, "w": "184", "x": "281", "y": "190", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[ 0. , 0. , 0.2, 0. ], [ 0.2, 0.5, 0.2, 0.5], [ 0.5, 0.3, 0.4, 0.5], [ 0.1, 0. , 0.2, 0. ], [ 0. , 0.2, 0. , 0. ], [ 0.2, 0. , 0. , 0. ], [ 0. , 0. , 0. , 0. ]], [fixed_assets, projects])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_assets_account_distrib", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assets Accounts Distribution", "units": null, "w": "184", "x": "56", "y": "241", "z": 1}, {"color": null, "definition": "result = pd.Index(['Land','Buildings','Machinery','Computer equipment & software','Furniture & fixtures','Vehicles','Other intangible fixed assets'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "fixed_assets", "moduleId": "cpx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fixed Assets", "units": null, "w": "100", "x": "47", "y": "116", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_cash_flow_project * cpx_assets_account_distrib", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_cash_flow_asset_account", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow per Asset Account", "units": null, "w": "184", "x": "281", "y": "241", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( to_dataarray(time) == cpx_capitalization_date, cpx_cash_flow_asset_account.sum( time.name ), 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_capitalization_asset_account", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capitalization per Asset Account", "units": null, "w": "184", "x": "505", "y": "241", "z": 1}, {"color": "#CB98FF", "definition": "result = ( cpx_cash_flow_asset_account - cpx_capitalization_asset_account ).cumsum( time.name )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_capex_work_in_progress", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Work in Progress", "units": null, "w": "184", "x": "505", "y": "287", "z": 1}, {"color": null, "definition": "result = pd.Index(['Cash Flow','Work In Progress','Capitalization'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "capex_report", "moduleId": "cpx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Report", "units": null, "w": "100", "x": "46", "y": "187", "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.concat( [cpx_cash_flow_asset_account.sum( fixed_assets.name ), cpx_capex_work_in_progress.sum( fixed_assets.name ), cpx_capitalization_asset_account.sum( fixed_assets.name )], dim = capex_report )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_capex_report", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Report", "units": null, "w": "184", "x": "56", "y": "359", "z": 1}, {"color": null, "definition": "result = pd.Index(['OC(t-1) - Cap(t) + CF(t)','-OC(t)'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "capex_check", "moduleId": "cpx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Check", "units": null, "w": "100", "x": "147", "y": "187", "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.concat( [pp.dynamic( cpx_capex_work_in_progress, time, -1, 0) - cpx_capitalization_asset_account + cpx_cash_flow_asset_account, - cpx_capex_work_in_progress], dim = capex_check)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cpx_capex_check", "moduleId": "cpx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Check", "units": null, "w": "184", "x": "56", "y": "405", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_capitalization_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab730a9f51fe2474499a94edf8886bbf2", "moduleId": "mkp_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_capitalization_date", "picture": null, "title": "Capitalization Date", "units": null, "w": "184", "x": "62", "y": "232", "z": 1}, {"color": "#4CBCFF", "definition": "_new_products_capitalization_date = change_index( cpx_capitalization_date, projects, new_products )\n\nresult = xr.where( to_dataarray(time) < _new_products_capitalization_date, 0, xr.where( to_dataarray(time) == _new_products_capitalization_date, mkp_new_prod_initial_prices, pp.dynamic( mkp_new_prod_prices, time, -1, 0) * ( 1 + ast_monthly_cpi ) ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_new_prod_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Products Prices", "units": null, "w": "184", "x": "287", "y": "232", "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index( mkp_exst_prod_prices, existing_products, products, defaultValue = 0. ) + change_index( mkp_new_prod_prices, new_products, products, defaultValue = 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_prod_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Products Prices", "units": null, "w": "184", "x": "510", "y": "232", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['0.3','2016.06','2016.10'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0'], ['0.0','0.0','0.0']], [products, discount_parameters])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_prices_discount_param", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Prices Discount Parameters", "units": null, "w": "184", "x": "62", "y": "280", "z": 1}, {"color": null, "definition": "result = pd.Index(['Discount (%)','Start Date','End Date'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "discount_parameters", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Discount Parameters", "units": null, "w": "100", "x": "491", "y": "70", "z": 1}, {"color": "#4CBCFF", "definition": "_start_date = subscript( mkp_prices_discount_param, discount_parameters, 'Start Date' )\n_end_date = subscript( mkp_prices_discount_param, discount_parameters, 'End Date' )\n_discount = subscript( mkp_prices_discount_param, discount_parameters, 'Discount (%)' ).astype(float)\n\nresult = xr.where( to_dataarray(time) >= _start_date, xr.where( to_dataarray(time) <= _end_date, _discount, 0 ), 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_prices_discount", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Prices Discount", "units": null, "w": "184", "x": "287", "y": "280", "z": 1}, {"color": "#4CBCFF", "definition": "result = mkp_prod_prices * ( 1 - mkp_prices_discount )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_prod_prices_proj", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Products Prices Projection", "units": null, "w": "184", "x": "510", "y": "280", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [0.528344,0.264172,0.528344,0.09375,0.15625,0.528344,0.264172,0.0625,0.0625,0.09375,0.09375,0.15625,0.528344,0.09375,0.528344,0.09375,0.15625,0.15625,0.09375,0.528344,0.15625,0.264172,0.0625,0.0625,0.0625,0.09375,0.09375,0.09375,0.15625,0.15625,0.09375,0.15625,0.09375,0.09375,0.264172,0.0625,0.09375,0.09375,0.125,0.15625,0.528344,0.528344,0.09375,0.15625,0.528344,0.09375,0.15625,0.528344,0.528344,0.528344,0.528344,0.528344,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.140625,0.15625,0.15625,0.15625,0.15625,0.25,0.09375,0.15625,0.25,0.15625,0.390625,0.15625,0.09375,0.15625,0.25,0.09375,0.15625,0.09375,0.15625,0.25,0.09375,0.15625,0.528344,0.15625,0.264172,0.09375,0.15625,0.09375,0.09375,0.528344,0.15625,0.15625,0.09375,0.15625,0.09375,0.15625,0.25,0.09375,0.15625,0.25,0.09375,0.15625,0.25,0.09375,0.15625,0.25,0.09375,0.15625,0.25,0.25,0.09375,0.15625,0.25,0.25,0.528344,0.528344,0.264172,0.0625,0.0625,0.09375,0.09375,0.15625,0.528344,0.09375,0.15625,0.1562], [products] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_gallons_per_product", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gallons per Product", "units": null, "w": "184", "x": "62", "y": "577", "z": 1}, {"color": "#CB98FF", "definition": "result = mkp_prod_prices_proj / mkp_gallons_per_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Prices", "units": null, "w": "184", "x": "733", "y": "280", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Main Competitor's Brand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "118", "identifier": "node45", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": "41", "y": "337", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Other Brands", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "118", "identifier": "node45_copy", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": "41", "y": "461", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [1.79,1,1.99,1.7,1.68,2,1.48,1,1.2,1.97,2,1.33,1.54,1.54,1.61,0.56,0.89], [products_other_brands] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_other_brands_prod_initial_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Other Brands Products Initial Prices", "units": null, "w": "184", "x": "62", "y": "530", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, mkp_other_brands_prod_initial_prices, pp.dynamic( mkp_other_brands_prod_prices_proj, time, -1 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_other_brands_prod_prices_proj", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Other Brands Products Prices Projection", "units": null, "w": "184", "x": "287", "y": "530", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [0.528344,0.264172,0.528344,0.09375,0.15625,0.528344,0.09375,0.15625,0.528344,0.528344,0.528344,0.140625,0.15625,0.15625,0.15625,0.25,0.09375], [products_other_brands] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_gallons_per_other_brand_product", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gallons per Other Brand Product", "units": null, "w": "184", "x": "531", "y": "577", "z": 1}, {"color": "#CB98FF", "definition": "result = mkp_other_brands_prod_prices_proj / mkp_gallons_per_other_brand_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_other_brands_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Other Brands Prices", "units": null, "w": "184", "x": "510", "y": "530", "z": 1}, {"color": "#4CBCFF", "definition": "result = mkp_other_brands_prices", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6de9fe81131449e9b8f6368ec94a61f3", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_other_brands_prices", "picture": null, "title": "Other Brands Prices", "units": null, "w": "184", "x": "53", "y": "170", "z": 1}, {"color": "#4CBCFF", "definition": "result = mkp_mcbrand_prices", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a43a0680c6b0145feaf666ca0e1b6e30c", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_mcbrand_prices", "picture": null, "title": "Main Competitor's Brand Prices", "units": null, "w": "184", "x": "53", "y": "122", "z": 1}, {"color": "#4CBCFF", "definition": "result = mkp_prices", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "adb7f3e5d5af64bc2989666b684914360", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_prices", "picture": null, "title": "Prices", "units": null, "w": "184", "x": "53", "y": "76", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Market Share", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "444", "identifier": "node46", "moduleId": "mks_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "908", "x": "28", "y": "42", "z": -1}, {"color": null, "definition": "result = change_index( mkp_prices, products, market_products, defaultValue = 0. ) + change_index( mkp_mcbrand_prices, mc_brand_products, market_products, defaultValue = 0. ) + change_index( mkp_other_brands_prices, products_other_brands, market_products, defaultValue = 0. )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_market_prices", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Prices", "units": null, "w": "184", "x": "280", "y": "170", "z": 1}, {"color": "#FFFF4B", "definition": "result = ast_mkt_prod_to_mkt_segment_alloc", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a313eee4811404c4c8a37dbe15a1c7c06", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_mkt_prod_to_mkt_segment_alloc", "picture": null, "title": "Market Products to Market Segment Allocation", "units": null, "w": "184", "x": "508", "y": "76", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_indices_factor_projection", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae78079cb39064be782405a748b672752", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_indices_factor_projection", "picture": null, "title": "Indices Factor Projection", "units": null, "w": "184", "x": "508", "y": "122", "z": 1}, {"color": null, "definition": "result = pd.Index(['Price','Advertising Spending'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "marketing_mix", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Marketing Mix", "units": null, "w": "100", "x": "48", "y": "57", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[ 0.5  , 0.005], [ 0.011, 0.015], [ 0.012, 0.02 ], [ 0.012, 0.02 ]], [market_segments, marketing_mix])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_beta_coefficients", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Beta Coefficients", "units": null, "w": "184", "x": "280", "y": "214", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_ad_spending_brand_mod", "moduleId": "mks_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Advertising Spending by Brand", "units": null, "w": "184", "x": "53", "y": "260", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Advertising Spending by Brand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "342", "identifier": "node46_copy", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "696", "x": "38", "y": "52", "z": -1}, {"color": "#4CBCFF", "definition": "result = ast_monthly_cpi", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a2f123e643a29479db440b49a542a6efe", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_monthly_cpi", "picture": null, "title": "Monthly CPI", "units": null, "w": "184", "x": "289", "y": "76", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Company", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "82", "identifier": "node46_copy_copy", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "450", "x": "47", "y": "124", "z": -1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, mks_init_ad_spending_company, pp.dynamic( mks_estim_ad_spending, time, -1 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_estim_ad_spending", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estimated Advertising Spending", "units": null, "w": "184", "x": "289", "y": "159", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Main Competitor's Brand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "82", "identifier": "node46_copy_copy_copy", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "450", "x": "47", "y": "213", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Coca Cola", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "82", "identifier": "node46_copy_copy_copy_copy", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "450", "x": "47", "y": "302", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450], [products_other_brands])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_init_ad_spending_other_brands", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Advertising Spending - Other Brands", "units": null, "w": "184", "x": "64", "y": "337", "z": 1}, {"color": "#CB98FF", "definition": "result = change_index( mks_estim_ad_spending, products, market_products, defaultValue = 0. ) + change_index( mks_estim_ad_spending_mcbrand, mc_brand_products, market_products, defaultValue = 0. ) + change_index( mks_estim_ad_spending_other_brands, products_other_brands, market_products, defaultValue = 0. )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_ad_spending_proj", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Advertising Spending Projection", "units": null, "w": "184", "x": "524", "y": "337", "z": 1}, {"color": "#4CBCFF", "definition": "result = mks_ad_spending_proj", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad076ba65bbfa41b0abf173100452b2aa", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mks_ad_spending_proj", "picture": null, "title": "Advertising Spending Projection", "units": null, "w": "184", "x": "280", "y": "260", "z": 1}, {"color": null, "definition": "_prices = xr.where( mks_market_prices_mkt_segment == 0, 1000000000000, mks_market_prices_mkt_segment)\n_advertising = xr.where( mks_ad_spending_proj == 0, 1000000000000, mks_ad_spending_proj)\n_price_coef = subscript( mks_beta_coefficients, marketing_mix, 'Price' )\n_ad_coef = subscript( mks_beta_coefficients, marketing_mix, 'Advertising Spending' )\n\n_num_aux = - _prices * _price_coef + _advertising * _ad_coef\n_num = apply_fn( _num_aux, lambda x: math.exp(x) if x < 0. else math.exp(-x) )\n_den = _num.sum( market_products.name )\n\nresult = _num / _den", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_market_share_prod", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Share by Product", "units": null, "w": "184", "x": "508", "y": "260", "z": 1}, {"color": null, "definition": "_allocation = ( ast_mkt_prod_to_mkt_segment_alloc == to_dataarray(market_segments) )\n\nresult = subset( subscript( _allocation, market_segments, 'Market Segment 1' ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "softdrink_products", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Softdrink Products", "units": null, "w": "100", "x": "47", "y": "159", "z": 1}, {"color": null, "definition": "result = subscript( change_index( mks_market_share_prod, market_products, softdrink_products ), market_segments, 'Market Segment 1' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_softdrinks_market_share", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Softdrinks Market Share", "units": null, "w": "184", "x": "508", "y": "306", "z": 1}, {"color": null, "definition": "result = subscript( change_index( mks_market_share_prod, market_products, infusions_products ), market_segments, 'Market Segment 2' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_infusions_market_share", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Infusions Market Share", "units": null, "w": "184", "x": "508", "y": "350", "z": 1}, {"color": null, "definition": "_allocation = ( ast_mkt_prod_to_mkt_segment_alloc == to_dataarray(market_segments) )\n\nresult = subset( subscript( _allocation, market_segments, 'Market Segment 2' ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "infusions_products", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Infusion Products", "units": null, "w": "100", "x": "151", "y": "159", "z": 1}, {"color": null, "definition": "_allocation = ( ast_mkt_prod_to_mkt_segment_alloc == to_dataarray(market_segments) )\n\nresult = subset( subscript( _allocation, market_segments, 'Market Segment 3' ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "juices_products", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Juices Products", "units": null, "w": "100", "x": "253", "y": "159", "z": 1}, {"color": null, "definition": "result = subscript( change_index( mks_market_share_prod, market_products, juices_products ), market_segments, 'Market Segment 3' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_juices_market_share", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Juices Market Share", "units": null, "w": "184", "x": "508", "y": "393", "z": 1}, {"color": null, "definition": "result = subscript( change_index( mks_market_share_prod, market_products, sports_drinks_products ), market_segments, 'Market Segment 4' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_sports_drinks_market_share", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sports Drinks Market Share", "units": null, "w": "184", "x": "508", "y": "436", "z": 1}, {"color": null, "definition": "_allocation = ( ast_mkt_prod_to_mkt_segment_alloc == to_dataarray(market_segments) )\n\nresult = subset( subscript( _allocation, market_segments, 'Market Segment 4' ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sports_drinks_products", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sports Drinks Products", "units": null, "w": "100", "x": "354", "y": "159", "z": 1}, {"color": null, "definition": "result = copy_index( ast_mkt_prod_to_brand_alloc )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "brands", "moduleId": "ast_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Brands", "units": null, "w": "100", "x": "165", "y": "74", "z": 1}, {"color": "#CCCCCC", "definition": "_df = mks_market_share_prod.to_dataframe( name = 'value' ).reset_index()\n_df = _df[_df['value'] != 0]\n_df_allocation = ast_mkt_prod_to_brand_alloc.to_dataframe( name = 'brands' ).reset_index().rename( columns = {'market_products_aux':'market_products'})\n_df = _df.merge( _df_allocation, on = 'market_products', how = 'left' )\n_df = _df.set_index( _df.columns[_df.columns != 'value'].values.tolist() )\n\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_market_share_by_brand_mkt_segment", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Share by Brand and Market Segment", "units": null, "w": "184", "x": "53", "y": "505", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_monthly_gdp_capita_growth_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a98d226d991394cdaaa1da7a3c44e3309", "moduleId": "pmk_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_monthly_gdp_capita_growth_rate", "picture": null, "title": "Monthly GDP per Capita Growth Rate", "units": null, "w": "184", "x": 266, "y": 243, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Potential Market", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "359", "identifier": "node47", "moduleId": "pmk_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1116", "x": 28, "y": 34, "z": -1}, {"color": null, "definition": "result = excel_connection( 'Generic IPM Input Template/Generic IPM Input Template.xlsm' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "38", "identifier": "data_con_generic_ipm_it", "moduleId": "data_mod_copy", "nodeClass": "constant", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Generic IPM Input Template", "units": null, "w": "140", "x": "95", "y": "107", "z": 1}, {"color": "#A5FF4B", "definition": "result = dataarray_from_excel( data_con_generic_ipm_it, sheetName = 'Potential_mkt', indexes = [regions], valueColumns = 'Initial_population', indexColumnHeaders = ['Regions'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_initial_population", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Population", "units": null, "w": "184", "x": 476, "y": 116, "z": 1}, {"color": null, "definition": "result = pd.Index(['Region A','Region B','Region C','Region D','Region E','Region F','Region G','Region H','Region I'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regions", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regions", "units": null, "w": "100", "x": "471", "y": "116", "z": 1}, {"color": "#A5FF4B", "definition": "_annual_rate = dataarray_from_excel( data_con_generic_ipm_it, sheetName = 'Potential_mkt', indexes = [totalyears], valueColumns = 'Population_growth_rate', indexColumnHeaders = ['Total_year'] )\n\nresult = lookup( _annual_rate, time_to_years, totalyears  )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_population_growth_rate", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Population Growth Rate", "units": null, "w": "184", "x": 696, "y": 65, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, pmk_initial_population, pp.dynamic( pmk_population, time, -1) * ( 1 + pmk_population_growth_rate ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_population", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Population", "units": null, "w": "184", "x": 696, "y": 116, "z": 1}, {"color": "#4cbcff", "definition": "_index = subset(pmk_inputs_with_scenarios.sum(inputs.name))\n\nif len(_index) == 1:\n    result = subscript(pmk_inputs_with_scenarios, [inputs, inputs_scenarios_tot], ['Consumption Income Elasticity', inputs_scenarios]).values.tolist()[0]\nelse:\n    result = change_index(subscript(pmk_inputs_with_scenarios, inputs, 'Consumption Income Elasticity'), inputs_scenarios_tot, inputs_scenarios)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_softdrinks_cons_income_elast", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Softdrinks Consumption Income Elasticity", "units": null, "w": "184", "x": 268, "y": 168, "z": 1}, {"color": "#4CBCFF", "definition": "result = pp.dynamic( pmk_per_capita_cons_growth_factor, time, -1, 1 ) * ( 1 + ast_monthly_gdp_capita_growth_rate * pmk_softdrinks_cons_income_elast )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_per_capita_cons_growth_factor", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Per Capita Consumption Growth Factor", "units": null, "w": "184", "x": 486, "y": 243, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([40, 2],[normal_distribution_inputs])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_normal_distrib_inputs", "moduleId": "data_mod_copy", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normal Distribution Inputs", "units": null, "w": "184", "x": 826, "y": 114, "z": 1}, {"color": null, "definition": "result = pd.Index(['Mean','SD'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "normal_distribution_inputs", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normal Distribution Inputs", "units": null, "w": "100", "x": "53", "y": "116", "z": 1}, {"color": "#4cbcff", "definition": "_index = subset(pmk_inputs_with_scenarios.sum(inputs.name))\n\nif len(_index) == 1:\n    result = subscript(pmk_inputs_with_scenarios, [inputs, inputs_scenarios_tot], ['Annual Per Capita Consumption', inputs_scenarios]).values.tolist()[0]\nelse:\n    result = change_index(subscript(pmk_inputs_with_scenarios, inputs, 'Annual Per Capita Consumption'), inputs_scenarios_tot, inputs_scenarios)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_annual_per_capita_cons", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Per Capita Consumption", "units": null, "w": "184", "x": 268, "y": 322, "z": 1}, {"color": "#4CBCFF", "definition": "_mean = np.asscalar( subscript( pmk_normal_distrib_inputs, normal_distribution_inputs, 'Mean' ).values )\n_standard_deviation = np.asscalar( subscript( pmk_normal_distrib_inputs, normal_distribution_inputs, 'SD' ).values )\n\n_distribution = np.random.normal( _mean, _standard_deviation, 10 )\n\nresult = xr.DataArray(_distribution, [iterations])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_normal_distrib", "moduleId": "data_mod_copy", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normal Distribution", "units": null, "w": "184", "x": 1046, "y": 114, "z": 1}, {"color": null, "definition": "result = sequence_index(1, pmk_number_of_iterations, _step = 1)\n\n\"\"\"\n_number = np.asscalar( pmk_number_of_iterations.values )\n\nresult = pd.Index( list( range(1, _number + 1) ) )\n\"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "iterations", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Iterations", "units": null, "w": "100", "x": "156", "y": "116", "z": 1}, {"color": null, "definition": "result = choice( per_capita_cons_method,1, includeAll=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_per_capita_cons_method", "moduleId": "data_mod_copy", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Per Capita Consumption Methodology", "units": null, "w": "206", "x": 846, "y": 235, "z": 1}, {"color": null, "definition": "result = pd.Index( ['Input','Normal Distribution'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "per_capita_cons_method", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Per Capita Consumption Methdologies", "units": null, "w": "100", "x": "262", "y": "116", "z": 1}, {"color": "#4CFFA6", "definition": "result = pmk_per_capita_cons_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "a74e81e27c70c42fbb488ced1c27a97f8", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "pmk_per_capita_cons_method", "picture": null, "title": "Per Capita Consumption Methodology", "units": null, "w": "475", "x": 833, "y": 235, "z": 1}, {"color": "#4CBCFF", "definition": "if pmk_per_capita_cons_method == 'Input':\n    result = pmk_annual_per_capita_cons\nelse:\n    result = pmk_normal_distrib", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_per_capita_cons", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Per Capita Consumption", "units": null, "w": "184", "x": 488, "y": 322, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0.064356436,0.069306931,0.074257426,0.079207921,0.089108911,0.099009901,0.108910891,0.103960396,0.089108911,0.079207921,0.074257426,0.069306931], [seasons])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_per_capita_cons_seasonality", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Per Capita Consumption Seasonality", "units": null, "w": "184", "x": 701, "y": 243, "z": 1}, {"color": null, "definition": "_list = list( range(1, 13) )\n\nresult = pd.Index( [str(item) for item in _list] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "seasons", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Seasons", "units": null, "w": "100", "x": "606", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "result = time_month.astype(str)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "season_to_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Season to Time", "units": null, "w": "184", "x": "60", "y": "460", "z": 1}, {"color": "#4CBCFF", "definition": "_seasonality = lookup( pmk_per_capita_cons_seasonality, season_to_time, seasons )\n\nresult = pmk_per_capita_cons_growth_factor * pmk_per_capita_cons * _seasonality", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_monthly_per_capita_cons", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monthly Per Capita Consumption", "units": null, "w": "184", "x": 701, "y": 322, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0.8,0.1,0.05,0.05], [market_segments])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_mkt_segmentation", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Segmentation", "units": null, "w": "184", "x": 920, "y": 198, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0.5,0.29,0.18,0.03], [sales_channels])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_share_sales_channel", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Share by Sales Channel", "units": null, "w": "184", "x": 920, "y": 245, "z": 1}, {"color": null, "definition": "result = pd.Index( ['Sales Channel 1','Sales Channel 2','Sales Channel 3','Sales Channel 4'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sales_channels", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Channels", "units": null, "w": "100", "x": "365", "y": "116", "z": 1}, {"color": "#CB98FF", "definition": "result = pmk_population * pmk_monthly_per_capita_cons * pmk_mkt_segmentation * pmk_share_sales_channel", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_potential_market", "moduleId": "pmk_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Potential Market", "units": null, "w": "184", "x": 920, "y": 323, "z": 1}, {"color": "#4CBCFF", "definition": "result = pmk_potential_market", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab29f6a09fe22475ab8f9a21bc4a79430", "moduleId": "cdm_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "pmk_potential_market", "picture": null, "title": "Potential Market", "units": null, "w": "184", "x": 47, "y": 159, "z": 1}, {"color": "#4CBCFF", "definition": "result = mks_company_market_share", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae4a707f6fe3f40fdb7339b939636f022", "moduleId": "cdm_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mks_company_market_share", "picture": null, "title": "Company's Market Share", "units": null, "w": "184", "x": 281, "y": 109, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Company Demand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "221", "identifier": "node50", "moduleId": "cdm_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "465", "x": 28, "y": 42, "z": -1}, {"color": "#CB98FF", "definition": "result = ( pmk_potential_market * mks_company_market_share ).sum(market_segments.name) * machine_learning_sales_impact", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_demand", "moduleId": "cdm_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Company's Demand per Region and Sales Channel", "units": null, "w": "184", "x": 281, "y": 159, "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1bd60bb8294e4c798c37d519f1327e51", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_demand", "picture": null, "title": "Company's Demand per Region and Sales Channel", "units": null, "w": "184", "x": "61", "y": "112", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Supply & Operation Planning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "564", "identifier": "node51", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "922", "x": "28", "y": "42", "z": "-2"}, {"color": "#cccccc", "definition": "result = 0", "description": "Commercial Demand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "88", "identifier": "node52", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "452", "x": "41", "y": "75", "z": -1}, {"color": null, "definition": "result = cdm_demand.sum([regions.name, sales_channels.name]) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_commercial_demand", "moduleId": "sop_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Commercial Demand", "units": null, "w": "184", "x": "288", "y": "112", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Planned Production", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "88", "identifier": "node53", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "452", "x": "41", "y": "170", "z": -1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_production_requeriment_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Requeriment", "units": null, "w": "184", "x": "61", "y": "209", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Planned Production", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "274", "identifier": "node54", "moduleId": "sop_production_requeriment_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "28", "y": "42", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = sop_commercial_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a3fe1ff74ae1740ee89010c94ce657748", "moduleId": "sop_production_requeriment_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_commercial_demand", "picture": null, "title": "Commercial Demand", "units": null, "w": "184", "x": "272", "y": "214", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([591605.90938235598,598612.00119769073,591605.90938235598,3961.4970064416543,31076.845638333609,591605.90938235598,598612.00119769073,4.2059872231861,153.93170646127896,3961.4970064416543,522.02245180349951,609392.78603198484,591605.90938235598,267723.6573106678,591605.90938235598,4903.5298292734087,609392.78603198484,609392.78603198484,456363.04881376581,591605.90938235598,609392.78603198484,598612.00119769073,4.2059872231861,538481.83343727549,153.93170646127896,4903.5298292734087,456363.04881376581,1599.9227056232749,609392.78603198484,609392.78603198484,456363.04881376581,609392.78603198484,4903.5298292734087,456363.04881376581,495388.85373740294,822833.40862592414,456363.04881376581,4903.5298292734087,153792.85198864972,609392.78603198484,701474.31441629096,701474.31441629096,456363.04881376581,609392.78603198484,771101.17990719422,456363.04881376581,609392.78603198484,771101.17990719422,771101.17990719422,771101.17990719422,771101.17990719422,771101.17990719422,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,283919.41312382894,92582.819577119255,92582.819577119255,92582.819577119255,92582.819577119255,58142.678358567093,155096.76531430517,92582.819577119255,58142.678358567093,92582.819577119255,38779.542748706474,92582.819577119255,155096.76531430517,92582.819577119255,58142.678358567093,155096.76531430517,92582.819577119255,155096.76531430517,92582.819577119255,58142.678358567093,830267.26031777693,499447.93524385273,162823.25573701502,499447.93524385273,318936.71690458403,830267.26031777693,499447.93524385273,830267.26031777693,830267.26031777693,162823.25573701502,499447.93524385273,499447.93524385273,830267.26031777693,499447.93524385273,135591.84241024847,95764.838823770246,59870.264418307685,135591.84241024847,95764.838823770246,59870.264418307685,135591.84241024847,95764.838823770246,59870.264418307685,135591.84241024847,95764.838823770246,59870.264418307685,135591.84241024847,95764.838823770246,59870.264418307685,59870.264418307685,135591.84241024847,95764.838823770246,59870.264418307685,59870.264418307685,771101.17990719422,771101.17990719422,598612.00119769073,4.2059872231861,153.93170646127896,4903.5298292734087,456363.04881376581,609392.78603198484,771101.17990719422,4903.5298292734087,609392.78603198484,45625.3292657743], [products])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_initial_stock", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Stock", "units": null, "w": "184", "x": "48", "y": "74", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0], [0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,  0.0,0.0]],[products, totaltime])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_stock_target", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Stock Target", "units": null, "w": "184", "x": "48", "y": "264", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, sop_initial_stock, pp.dynamic( sop_projected_stock, time, -1) + sop_effective_production - sop_supplied_demand )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_projected_stock", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Stock", "units": null, "w": "184", "x": "272", "y": "166", "z": 1}, {"color": "#CB98FF", "definition": "_production_aux = sop_planned_production * sop_ingredients_by_product * sop_supplied_ingredients / ( sop_planned_production * sop_ingredients_by_product).sum(products.name) / sop_ingredients_by_product\n_production_aux2 = _production_aux.fillna(1000000000000.)\n_production = _production_aux2.min( production_inputs.name )\n\nresult = xr.where( get_pos(time) == 0, 0, _production )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_effective_production", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "743", "y": "489", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.ufuncs.minimum( sop_commercial_demand, sop_total_available_product )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_supplied_demand", "moduleId": "sop_supplied_demand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supplied Demand", "units": null, "w": "184", "x": "275", "y": "186", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_effective_production", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a14b7019c2ddd4b9aaf936992ef1b9742", "moduleId": "sop_production_requeriment_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_effective_production", "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "48", "y": "120", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_supplied_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aaeb1a34e3d2e4a02ab39c9f5adde07da", "moduleId": "sop_production_requeriment_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_supplied_demand", "picture": null, "title": "Supplied Demand", "units": null, "w": "184", "x": "48", "y": "166", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_commercial_demand * change_index( sop_stock_target, totaltime, time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_stock_goal", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Stock Goal", "units": null, "w": "184", "x": "272", "y": "264", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( get_pos(time) == 0, 0, sop_commercial_demand + sop_stock_goal - pp.dynamic( sop_projected_stock, time, -1 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_production_requeriment", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Requeriment", "units": null, "w": "184", "x": "501", "y": "264", "z": 1}, {"color": null, "definition": "result = pd.Index(['Line 1','Line 2','Line 3','Line 4','Line 5','Line 6'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "production_lines", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Lines", "units": null, "w": "100", "x": "290", "y": "67", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray(['Line 1','Line 1','Line 1','Line 1','Line 1','Line 2','Line 2','Line 2', 'Line 5','Line 5','Line 5','Line 5','Line 1','Line 1','Line 1','Line 2', 'Line 2','Line 2','Line 2','Line 2','Line 2','Line 2','Line 2','Line 2', 'Line 2','Line 2','Line 2','Line 2','Line 2','Line 2','Line 2','Line 2', 'Line 2','Line 2','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5', 'Line 5','Line 5','Line 6','Line 6','Line 6','Line 6','Line 6','Line 6', 'Line 6','Line 3','Line 3','Line 3','Line 4','Line 4','Line 4','Line 4', 'Line 4','Line 4','Line 4','Line 4','Line 4','Line 4','Line 4','Line 4', 'Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5', 'Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5', 'Line 5','Line 5','Line 5','Line 4','Line 4','Line 4','Line 4','Line 4', 'Line 4','Line 4','Line 4','Line 4','Line 4','Line 4','Line 4','Line 4', 'Line 4','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5', 'Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5','Line 5', 'Line 5','Line 5','Line 5','Line 5','Line 5','Line 3','Line 3','Line 3', 'Line 3','Line 3','Line 3','Line 3','Line 3','Line 3','Line 3','Line 3', 'Line 1'],[products]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_products_to_line_alloc", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Products to Line Allocation", "units": null, "w": "184", "x": "290", "y": "103", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate( sop_commercial_demand, sop_products_to_line_alloc, products, production_lines )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_demand_by_line", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand by Line", "units": null, "w": "184", "x": "48", "y": "338", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate( sop_stock_goal, sop_products_to_line_alloc, products, production_lines )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_stock_goal_by_line", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Stock Goal by Line", "units": null, "w": "184", "x": "48", "y": "385", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate( sop_projected_stock, sop_products_to_line_alloc, products, production_lines )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_stock_by_line", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Stock by Line", "units": null, "w": "184", "x": "48", "y": "433", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_production_requeriment", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1ec3b7aa6c77467aa46d575235d580df", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_production_requeriment", "picture": null, "title": "Production Requeriment", "units": null, "w": "184", "x": "288", "y": "209", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Effective Production", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "138", "identifier": "node55", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": "41", "y": "265", "z": -1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_plant_capacity_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Plant Capacity", "units": null, "w": "184", "x": "61", "y": "303", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Plant Capacity", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "226", "identifier": "node56", "moduleId": "sop_plant_capacity_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "454", "x": "28", "y": "42", "z": "-2"}, {"color": "#4CBCFF", "definition": "_building_time = subscript( cpx_projects_parameters, projects_parameters, \"Building time\" ).astype(float).astype(int)\n_end_date = apply_fn( xr.where( cpx_ini_date_projects == '', max_totaltime, cpx_ini_date_projects ), add_periods, _building_time)\n_line = subscript( cpx_projects_parameters, projects_parameters, \"Line\" )\n_capacity_increase = subscript( cpx_projects_parameters, projects_parameters, \"Daily Capacity Increase\" ).astype(float).astype(int)\n\nresult = xr.where( to_dataarray(time) == _end_date, xr.where( to_dataarray(production_lines) == _line, _capacity_increase, 0 ), 0 ).sum(projects.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_capacity_expansion", "moduleId": "sop_plant_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capacity Expansion", "units": null, "w": "184", "x": "275", "y": "124", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_ini_date_projects", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ac82198edc8cc46469bd1ca3137cf2a82", "moduleId": "sop_plant_capacity_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_ini_date_projects", "picture": null, "title": "Initial Date of Projects", "units": null, "w": "184", "x": "48", "y": "78", "z": 1}, {"color": "#FFFF4B", "definition": "result = cpx_projects_parameters", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab3774424511d48d888fec87ce45ee9f0", "moduleId": "sop_plant_capacity_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_projects_parameters", "picture": null, "title": "Projects Parameters", "units": null, "w": "184", "x": "48", "y": "124", "z": 1}, {"color": "#FFFF4B", "definition": "#result = xr.DataArray([79380000,130730000,134470000,80930000,89640000,56030000], [production_lines])\nresult = xr.DataArray([73380000,420730000,134470000,95930000,169640000,106030000], [production_lines])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_max_prod_per_shift", "moduleId": "sop_plant_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Production per Shift", "units": null, "w": "184", "x": "48", "y": "173", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, sop_max_prod_per_shift, pp.dynamic( sop_max_prod_per_shift_proj, time, -1 ) + sop_capacity_expansion )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_max_prod_per_shift_proj", "moduleId": "sop_plant_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Production per Shift Projection", "units": null, "w": "184", "x": "275", "y": "173", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[ 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,   2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,   2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0.], [ 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,   2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,   2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0.], [ 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,   2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,   2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0.], [ 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,   3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,   3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0.], [ 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,   3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,   3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0.], [ 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,   3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3.,   3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,   0.]], [production_lines, totaltime])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_operation_shifts", "moduleId": "sop_plant_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operation Shifts", "units": null, "w": "184", "x": "48", "y": "219", "z": 1}, {"color": "#CB98FF", "definition": "result = change_index( sop_operation_shifts, totaltime, time ) * sop_max_prod_per_shift_proj", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_max_prod_capacity", "moduleId": "sop_plant_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Max Production Capacity", "units": null, "w": "184", "x": "275", "y": "219", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_max_prod_capacity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa6c709a0d12b4ebb8a7a61b66d06f930", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_max_prod_capacity", "picture": null, "title": "Max Production Capacity", "units": null, "w": "184", "x": "288", "y": "303", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_suppliers_capacity_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Suppliers Capacity", "units": null, "w": "184", "x": "61", "y": "351", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Suppliers Capacity", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "136", "identifier": "node57", "moduleId": "sop_suppliers_capacity_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "448", "x": "28", "y": "42", "z": "-2"}, {"color": "#FFFF4B", "definition": "#result = xr.DataArray([17600000,697800000,71700000,24900000,19900000,9900000,9900000,6028900000], [production_inputs])\nresult = xr.DataArray([87600000,1597800000,181700000,134900000,149900000,120900000,120900000,19028900000], [production_inputs])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_init_suppliers_capacity", "moduleId": "sop_suppliers_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Suppliers Capacity", "units": null, "w": "184", "x": "48", "y": "127", "z": 1}, {"color": null, "definition": "result = pd.Index(['Input 01','Input 02','Input 03','Input 04','Input 05','Input 06','Input 07','Input 08'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "production_inputs", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Inputs", "units": null, "w": "100", "x": "85", "y": "210", "z": 1}, {"color": "#CB98FF", "definition": "_capacity = subscript( sop_suppliers_capacity_constraints, capacity_constraints, \"Capacity\" ).astype(float).astype(int)\n_start_date = subscript( sop_suppliers_capacity_constraints, capacity_constraints, \"Start date\" )\n_end_date = subscript( sop_suppliers_capacity_constraints, capacity_constraints, \"End date\" )\n\nresult = xr.where( _capacity > 0, xr.where( to_dataarray(time) >= _start_date, xr.where( to_dataarray(time) <= _end_date, _capacity, sop_init_suppliers_capacity ), sop_init_suppliers_capacity), sop_init_suppliers_capacity )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_suppliers_capacity", "moduleId": "sop_suppliers_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Suppliers Capacity", "units": null, "w": "184", "x": "270", "y": "127", "z": 1}, {"color": null, "definition": "result = pd.Index(['Start date','End date','Capacity'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "capacity_constraints", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capacity Constraints", "units": null, "w": "100", "x": "187", "y": "210", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['','','0'], ['','','0'], ['','','0'], ['','','0'], ['','','0'], ['','','0'], ['','','0'], ['','','0']],[production_inputs, capacity_constraints]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_suppliers_capacity_constraints", "moduleId": "sop_suppliers_capacity_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Suppliers Capacity Constraints", "units": null, "w": "184", "x": "270", "y": "77", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_suppliers_capacity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a39d1e4c939cb424ea68a5dc5e9c8b6cb", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_suppliers_capacity", "picture": null, "title": "Suppliers Capacity", "units": null, "w": "184", "x": "288", "y": "351", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_production_planning_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Planning", "units": null, "w": "184", "x": "516", "y": "351", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Production Planning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "510", "identifier": "node58", "moduleId": "sop_production_planning_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "926", "x": "28", "y": "42", "z": "-2"}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Planned Production (Own Capacity)", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "176", "identifier": "node59", "moduleId": "sop_production_planning_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "682", "x": "41", "y": "75", "z": -1}, {"color": "#4CBCFF", "definition": "result = sop_production_requeriment", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ac81babef083d48d59b31c1e15065c3c3", "moduleId": "sop_production_planning_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_production_requeriment", "picture": null, "title": "Production Requeriment", "units": null, "w": "184", "x": "58", "y": "152", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_max_prod_capacity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aff040b2f71f344a89d88f3ea7ad553c4", "moduleId": "sop_production_planning_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_max_prod_capacity", "picture": null, "title": "Max Production Capacity", "units": null, "w": "184", "x": "58", "y": "201", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_suppliers_capacity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9dde95171f754244b04f3eccedea9eb5", "moduleId": "sop_production_planning_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_suppliers_capacity", "picture": null, "title": "Suppliers Capacity", "units": null, "w": "184", "x": "58", "y": "342", "z": 1}, {"color": "#4CBCFF", "definition": "result = aggregate( sop_production_requeriment, sop_products_to_line_alloc, products, production_lines )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_production_req_by_line", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Requeriment by Line", "units": null, "w": "184", "x": "290", "y": "152", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.ufuncs.minimum( xr.ufuncs.maximum( 0, sop_production_req_by_line ), sop_max_prod_capacity )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_planned_production_by_line", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Planned Production by Line", "units": null, "w": "184", "x": "290", "y": "201", "z": 1}, {"color": "#4CBCFF", "definition": "_share = ( sop_production_requeriment / lookup( sop_production_req_by_line, sop_products_to_line_alloc, production_lines ) ).fillna(0.)\n_production = lookup( sop_planned_production_by_line, sop_products_to_line_alloc, production_lines )\n\nresult = _production * _share", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_planned_production", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Planned Production", "units": null, "w": "184", "x": "517", "y": "201", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Effective Production (Suppliers Capacity)", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "280", "identifier": "node59_copy", "moduleId": "sop_production_planning_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "682", "x": "41", "y": "259", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  2.64172000e-01,  2.64172000e-02,  8.80573300e-03,    5.87048900e-03,  2.93524400e-03,  2.93524400e-03,  3.78541253e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  2.64172000e-01,  2.64172000e-02,  8.80573300e-03,    5.87048900e-03,  2.93524400e-03,  2.93524400e-03,  3.78541253e+00], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  2.64172000e-01,  2.64172000e-02,  8.80573300e-03,    5.87048900e-03,  2.93524400e-03,  2.93524400e-03,  3.78541253e+00], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  2.64172000e-01,  2.64172000e-02,  8.80573300e-03,    5.87048900e-03,  2.93524400e-03,  2.93524400e-03,  3.78541253e+00], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.25000000e-01,  1.25000000e-02,  4.16666700e-03,    2.77777800e-03,  1.38888900e-03,  1.38888900e-03,  8.00000000e+00], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.40625000e-01,  0.00000000e+00,  1.40625000e-02,  4.68750000e-03,    3.12500000e-03,  1.56250000e-03,  1.56250000e-03,  7.11111111e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  3.90625000e-01,  0.00000000e+00,  3.90625000e-02,  1.30208330e-02,    8.68055600e-03,  4.34027800e-03,  4.34027800e-03,  2.56000000e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  5.28344000e-01,  0.00000000e+00,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.64172000e-01,  0.00000000e+00,  2.64172000e-02,  8.80573300e-03,    5.87048900e-03,  2.93524400e-03,  2.93524400e-03,  3.78541253e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  5.28344000e-01,  0.00000000e+00,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  9.37500000e-02,  0.00000000e+00,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  1.56250000e-01,  0.00000000e+00,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  2.50000000e-01,  0.00000000e+00,  2.50000000e-02,  8.33333300e-03,    5.55555600e-03,  2.77777800e-03,  2.77777800e-03,  4.00000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  2.64172000e-01,  2.64172000e-02,  8.80573300e-03,    5.87048900e-03,  2.93524400e-03,  2.93524400e-03,  3.78541253e+00], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  6.25000000e-02,  6.25000000e-03,  2.08333300e-03,    1.38888900e-03,  6.94444000e-04,  6.94444000e-04,  1.60000000e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  5.28344000e-01,  5.28344000e-02,  1.76114670e-02,    1.17409780e-02,  5.87048900e-03,  5.87048900e-03,  1.89270627e+00], [  0.00000000e+00,  9.37500000e-02,  9.37500000e-03,  3.12500000e-03,    2.08333300e-03,  1.04166700e-03,  1.04166700e-03,  1.06666667e+01], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00], [  0.00000000e+00,  1.56250000e-01,  1.56250000e-02,  5.20833300e-03,    3.47222200e-03,  1.73611100e-03,  1.73611100e-03,  6.40000000e+00]], [products, production_inputs])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_ingredients_by_product", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ingredients by Product", "units": null, "w": "184", "x": "58", "y": "293", "z": 1}, {"color": "#4CBCFF", "definition": "result = ( sop_planned_production * sop_ingredients_by_product ).sum(products.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_ingredients_demand", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ingredients Demand", "units": null, "w": "184", "x": "290", "y": "293", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, sop_ingredients_demand, sop_ingredients_demand * ( 1 + sop_ingredients_stock_pc ) - pp.dynamic( sop_ingredients_stock, time, -1, 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_ingredients_requeriment", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ingredients Requeriments", "units": null, "w": "184", "x": "290", "y": "441", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01], [production_inputs])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_ingredients_stock_pc", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ingredients Stock (%)", "units": null, "w": "184", "x": "58", "y": "441", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([3550568.9635585328,40022787.852397867,4357335.6815956337,1307200.7044787023,871467.13631911459,435733.5681595878,435733.5681595878,10071209.760004001], [production_inputs])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_init_ingredients_stock", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Ingredients Stock", "units": null, "w": "184", "x": "58", "y": "393", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, sop_init_ingredients_stock, pp.dynamic( sop_ingredients_stock, time, -1, 0 ) + sop_suppliers_production - sop_supplied_ingredients )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_ingredients_stock", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ingredients Stock", "units": null, "w": "184", "x": "290", "y": "393", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.ufuncs.minimum( sop_suppliers_capacity, xr.ufuncs.maximum( sop_ingredients_requeriment, 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_suppliers_production", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Suppliers Production", "units": null, "w": "184", "x": "290", "y": "342", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.ufuncs.minimum( sop_ingredients_demand, sop_available_ingredients )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_supplied_ingredients", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supplied Ingredients", "units": null, "w": "184", "x": "517", "y": "489", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, sop_suppliers_production, pp.dynamic( sop_ingredients_stock, time, -1, 0 ) + sop_suppliers_production )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_available_ingredients", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Available Ingredients", "units": null, "w": "184", "x": "290", "y": "489", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_effective_production", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a69fee6d1ff64472b9730ecb4ed3dd477", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_effective_production", "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "735", "y": "351", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Supplied Demand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "182", "identifier": "node60", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "434", "x": "502", "y": "75", "z": -1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_supplied_demand_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supplied Demand", "units": null, "w": "184", "x": "516", "y": "150", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Supplied Demand", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "248", "identifier": "node61", "moduleId": "sop_supplied_demand_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "28", "y": "42", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = sop_effective_production", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae9cb95c2afe445828a890bafc78a8a24", "moduleId": "sop_supplied_demand_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_effective_production", "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "49", "y": "81", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_projected_stock", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a3b3b352de5954785abf7261506ab2e90", "moduleId": "sop_supplied_demand_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_projected_stock", "picture": null, "title": "Projected Stock", "units": null, "w": "184", "x": "49", "y": "133", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_commercial_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a88c7874fb7f14e059e8616c8c2adee33", "moduleId": "sop_supplied_demand_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_commercial_demand", "picture": null, "title": "Commercial Demand", "units": null, "w": "184", "x": "49", "y": "186", "z": 1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, sop_effective_production, pp.dynamic( sop_projected_stock, time, -1, 0 ) + sop_effective_production )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_total_available_product", "moduleId": "sop_supplied_demand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Available Product", "units": null, "w": "184", "x": "275", "y": "133", "z": 1}, {"color": "#CCCCCC", "definition": "result = sop_commercial_demand - sop_supplied_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_unserved_demand", "moduleId": "sop_supplied_demand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Unserved Demand", "units": null, "w": "184", "x": "275", "y": "237", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_supplied_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a5e4ccde3fb9446f6acf96666e31d9a81", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_supplied_demand", "picture": null, "title": "Supplied Demand", "units": null, "w": "184", "x": "735", "y": "150", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Ingredients Cost", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "88", "identifier": "node63", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "452", "x": "41", "y": "410", "z": -1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_ingredients_cost_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ingredients Cost", "units": null, "w": "184", "x": "61", "y": "447", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Ingredients Cost", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "276", "identifier": "node62", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": "28", "y": "42", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = sop_effective_production", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a965d54462359404db9a5c8b8577adf31", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_effective_production", "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "52", "y": "167", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_monthly_cpi", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a703979ccfff64d729daee383213b0540", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_monthly_cpi", "picture": null, "title": "Monthly CPI", "units": null, "w": "184", "x": "269", "y": "71", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0.022439024,0.112195122,1.346341463,0.448780488,0.897560976,0.56097561,0.673170732,0.538536585], [production_inputs])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_init_unit_cost_supplies", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Unit Cost of Supplies", "units": null, "w": "184", "x": "52", "y": "119", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, sop_init_unit_cost_supplies, pp.dynamic( sop_unit_cost_supplies_proj, time, -1, 0 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_unit_cost_supplies_proj", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Unit Cost of Supplies Projection", "units": null, "w": "184", "x": "269", "y": "119", "z": 1}, {"color": "#CB98FF", "definition": "result = ( sop_effective_production * sop_unit_cost_supplies_proj * sop_ingredients_by_product ).sum(production_inputs.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_production_cost", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Production Cost", "units": null, "w": "184", "x": "269", "y": "216", "z": 1}, {"color": "#FFFF4B", "definition": "result = sop_ingredients_by_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "acad9f6f70e324e9aa99be79ca7c60ca5", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_ingredients_by_product", "picture": null, "title": "Ingredients by Product", "units": null, "w": "184", "x": "52", "y": "216", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_production_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "af8f1d96ebf854c0da11611e8f2c941fa", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_production_cost", "picture": null, "title": "Production Cost", "units": null, "w": "184", "x": "288", "y": "447", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Manpower Cost", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "88", "identifier": "node64", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "452", "x": "41", "y": "505", "z": -1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_manpower_cost_mod", "moduleId": "sop_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Manpower Cost", "units": null, "w": "184", "x": "61", "y": "542", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Manpower Cost", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "274", "identifier": "node65", "moduleId": "sop_manpower_cost_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "668", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "result = pd.Index(['Category 1', 'Category 2', 'Category 3'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "labor_categories", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Labor Categories", "units": null, "w": "100", "x": "85", "y": "282", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([2200,2500,1000], [labor_categories])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_staff_per_shift", "moduleId": "sop_manpower_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Staff per Shift", "units": null, "w": "184", "x": "269", "y": "172", "z": 1}, {"color": null, "definition": "result = pd.Index(['Shift 1', 'Shift 2', 'Shift 3'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "labor_shifts", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Labor Shifts", "units": null, "w": "100", "x": "187", "y": "282", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_effective_production", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1a101cefde744c378c0319527326212b", "moduleId": "sop_manpower_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_effective_production", "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "48", "y": "123", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_max_prod_capacity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a091fe64237cb43af9f3ceed764a53d7d", "moduleId": "sop_manpower_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_max_prod_capacity", "picture": null, "title": "Max Production Capacity", "units": null, "w": "184", "x": "48", "y": "76", "z": 1}, {"color": null, "definition": "_max_production_capacity = xr.where( sop_max_prod_capacity == 0, 1000000000000, sop_max_prod_capacity )\n_production_by_line = aggregate( sop_effective_production, sop_products_to_line_alloc, products, production_lines )\n\nresult = xr.ufuncs.ceil( ( _production_by_line / _max_production_capacity * len(labor_shifts.values) ).round(1) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_required_work_shifts", "moduleId": "sop_manpower_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Required Work Shifts", "units": null, "w": "184", "x": "269", "y": "123", "z": 1}, {"color": "#FFFF4B", "definition": "result = sop_products_to_line_alloc", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad1494e09c53d4a2189c0805846419f3f", "moduleId": "sop_manpower_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_products_to_line_alloc", "picture": null, "title": "Products to Line Allocation", "units": null, "w": "184", "x": "269", "y": "76", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[  6154.,  7000.,  7994.], [  8000.,  8238.,  9400.], [  9800., 10500., 10800.]], [labor_categories, labor_shifts])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_initial_salary", "moduleId": "sop_manpower_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Salary", "units": null, "w": "184", "x": "48", "y": "265", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_monthly_cpi", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a26a21dae26e74f2b9f86918d7323cd96", "moduleId": "sop_manpower_cost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_monthly_cpi", "picture": null, "title": "Monthly CPI", "units": null, "w": "184", "x": "269", "y": "219", "z": 1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, sop_initial_salary, pp.dynamic( sop_unit_cost_staff_proj, time, -1, 0 ) * ( 1 +  ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_unit_cost_staff_proj", "moduleId": "sop_manpower_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Unit Cost of Staff Projection", "units": null, "w": "184", "x": "269", "y": "265", "z": 1}, {"color": "#CB98FF", "definition": "result = ( sop_staff_per_shift * sop_unit_cost_staff_proj * ( (get_pos(labor_shifts) + 1) <= sop_required_work_shifts ) ).sum([labor_categories.name, labor_shifts.name])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_manpower_cost", "moduleId": "sop_manpower_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Manpower Cost", "units": null, "w": "184", "x": "489", "y": "265", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_manpower_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae02a3b03ac5146fd9bcb192a3c29a47c", "moduleId": "sop_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_manpower_cost", "picture": null, "title": "Manpower Cost", "units": null, "w": "184", "x": "288", "y": "542", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "COGS", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "182", "identifier": "node66", "moduleId": "sop_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "434", "x": "502", "y": "411", "z": -1}, {"color": "#CB98FF", "definition": "result = sop_production_cost.sum(products.name) + sop_manpower_cost.sum(production_lines.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_cogs", "moduleId": "sop_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cost of Goods Sold", "units": null, "w": "184", "x": "630", "y": "542", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_supplied_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a904e145994e64c44b2f6f941f5428e36", "moduleId": "rev_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_supplied_demand", "picture": null, "title": "Supplied Demand", "units": null, "w": "184", "x": "47", "y": "120", "z": 1}, {"color": "#4CBCFF", "definition": "result = mkp_prices", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a56f5bde810484c958ba9155cd86fe2aa", "moduleId": "rev_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_prices", "picture": null, "title": "Prices", "units": null, "w": "184", "x": "280", "y": "69", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Revenue", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "130", "identifier": "node67", "moduleId": "rev_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "28", "y": "42", "z": -1}, {"color": "#CB98FF", "definition": "result = sop_supplied_demand * mkp_prices", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "rev_revenue", "moduleId": "rev_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Revenue", "units": null, "w": "184", "x": "280", "y": "120", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "OPEX", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "234", "identifier": "node68", "moduleId": "opx_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "724", "x": "28", "y": "42", "z": -1}, {"color": null, "definition": "opx_mod", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_drivers_projection_mod", "moduleId": "opx_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Drivers Projection", "units": null, "w": "184", "x": "60", "y": "109", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Drivers Projection", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "452", "identifier": "node69", "moduleId": "opx_drivers_projection_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "712", "x": "28", "y": "42", "z": "-3"}, {"color": "#A5FF4B", "definition": "_reading = dataarray_from_excel( data_con_generic_ipm_it, sheetName = 'Opex_', indexes = [opex_accounts], valueColumns = 'Empleados Existentes', indexColumnHeaders = ['Cuentas_de_Opex'] )\n\nresult = subscript( _reading, opex_accounts, 'Manpower' ).astype(float)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_existing_employees", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Employees", "units": null, "w": "184", "x": "60", "y": "151", "z": 1}, {"color": null, "definition": "result = pd.Index(['Manpower','Energy','Marketing','Taxes','Travelling','Communications','Maintenance','Others'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "opex_accounts", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex Accounts", "units": null, "w": "100", "x": "39", "y": "66", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0,0.03,0.05,0.05,0.05,0.05,0.05,0.03,0.05,0.03,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08], [totalyears])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_employees_annual_growth_rate", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Employees Annual Growth Rate", "units": null, "w": "184", "x": "60", "y": "101", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, opx_existing_employees, ( pp.dynamic( opx_employees_proj, time, -1, 0 ) * opx_employees_monthly_growth_rate ).round(0) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_employees_proj", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Employees Projection", "units": null, "w": "184", "x": "288", "y": "151", "z": 1}, {"color": null, "definition": "result = pd.Index(['Building surface (m2)','Plant & Machinery (Un.)','Vehicles (Un.)'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "assets_drivers", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assets' Drivers", "units": null, "w": "100", "x": "39", "y": "127", "z": 1}, {"color": "#FFFF4B", "definition": "result = cpx_projects_parameters", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a097f2996770642518f6b3031e6761982", "moduleId": "opx_drivers_projection_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_projects_parameters", "picture": null, "title": "Projects Parameters", "units": null, "w": "184", "x": "60", "y": "245", "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index( cpx_projects_parameters, projects_parameters, assets_drivers, defaultValue = 0 ).astype(float)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_new_assets_physical_units", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Assets (Physical Units)", "units": null, "w": "184", "x": "288", "y": "245", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_ini_date_projects", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7569fd582c9849e1b7da9dbb11e520e4", "moduleId": "opx_drivers_projection_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_ini_date_projects", "picture": null, "title": "Initial Date of Projects", "units": null, "w": "184", "x": "60", "y": "294", "z": 1}, {"color": "#4CBCFF", "definition": "_periods = subscript( cpx_projects_parameters, projects_parameters, \"Building time\" ).astype(float).astype(int)\n_initial_date = xr.where( cpx_ini_date_projects == '', max_totaltime, cpx_ini_date_projects )\n_end_date = apply_fn( _initial_date, add_periods, _periods )\n\nresult = xr.where( to_dataarray(time) == _end_date, opx_new_assets_physical_units, 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_assets_increase", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assets Increase", "units": null, "w": "184", "x": "288", "y": "294", "z": 1}, {"color": "#A5FF4B", "definition": "result = dataarray_from_excel( data_con_generic_ipm_it, sheetName = 'Opex_', indexes = [assets_drivers], valueColumns = 'Activos Existentes', indexColumnHeaders = ['Drivers_de_Activos'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_existing_assets", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Assets", "units": null, "w": "184", "x": "60", "y": "344", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, opx_existing_assets, pp.dynamic( opx_assets_projection, time, -1, 0 ) + opx_assets_increase.sum(projects.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_assets_projection", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assets Projection", "units": null, "w": "184", "x": "288", "y": "344", "z": 1}, {"color": null, "definition": "result = pd.Index(['Fix','Employees','Products','Building surface (m2)','Plant & Machinery (Un.)','Vehicles (Un.)'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "opex_drivers", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX Drivers", "units": null, "w": "100", "x": "142", "y": "127", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Assets Projection", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "184", "identifier": "node70", "moduleId": "opx_drivers_projection_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "40", "y": "210", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Employees Projection", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "130", "identifier": "node71", "moduleId": "opx_drivers_projection_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "40", "y": "72", "z": "-2"}, {"color": "#CB98FF", "definition": "_assets_projection = change_index( opx_assets_projection, assets_drivers, opex_drivers, defaultValue = 0. )\n\nresult = xr.where( get_pos(opex_drivers) == 0, 1, xr.where( get_pos(opex_drivers) == 1, opx_employees_proj, xr.where( get_pos(opex_drivers) == 2, sop_effective_production.sum(products.name), _assets_projection ) ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_drivers_projection", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Drivers Projection", "units": null, "w": "184", "x": "530", "y": "434", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_effective_production", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6d71faf924bb4242ae5d45fdd9c98705_copy", "moduleId": "opx_drivers_projection_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_effective_production", "picture": null, "title": "Effective Production", "units": null, "w": "184", "x": "288", "y": "434", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Effective Production", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "82", "identifier": "node72", "moduleId": "opx_drivers_projection_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "40", "y": "402", "z": -1}, {"color": "#4CBCFF", "definition": "result = opx_drivers_projection", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4b20e9fb6c334c0db97ac60ffe82c519", "moduleId": "opx_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "opx_drivers_projection", "picture": null, "title": "Drivers Projection", "units": null, "w": "184", "x": "60", "y": "159", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Drivers", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "190", "identifier": "node73", "moduleId": "opx_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "226", "x": "40", "y": "74", "z": -1}, {"color": null, "definition": "_base = subscript( opx_drivers_projection, time, min_time )\n\nresult = xr.where( _base == 0, 1, opx_drivers_projection / _base )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_drivers_factor", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Drivers Factor", "units": null, "w": "184", "x": "60", "y": "213", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Actual Based OPEX Projection", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "190", "identifier": "node74", "moduleId": "opx_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "226", "x": "276", "y": "74", "z": -1}, {"color": "#A5FF4B", "definition": "result = dataarray_from_excel( data_con_generic_ipm_it, sheetName = 'Opex_', indexes = [opex_accounts], valueColumns = activities, indexColumnHeaders = ['Cuentas_de_Opex'] ).fillna(0.)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_actual_opex_base", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual OPEX Base", "units": null, "w": "184", "x": "296", "y": "109", "z": 1}, {"color": null, "definition": "result = pd.Index(['Administration','Commercialization','Engineering'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "activities", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Activities", "units": null, "w": "100", "x": "142", "y": "66", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['Employees','Fix','Employees'], ['Employees','Employees','Products'], ['Fix','Fix','Fix'], ['Fix','Fix','Fix'], ['Fix','Fix','Fix'], ['Fix','Fix','Fix'], ['Building surface (m2)','Fix','Products'], ['Fix','Fix','Fix']], [opex_accounts, activities])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_drivers_definition", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Drivers Definition", "units": null, "w": "184", "x": "296", "y": "159", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_indices_factor_projection", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ace27928570e9458e95823b7c5eb49333", "moduleId": "opx_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_indices_factor_projection", "picture": null, "title": "Indices Factor Projection", "units": null, "w": "184", "x": "533", "y": "109", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Nominal OPEX Projection", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "190", "identifier": "node75", "moduleId": "opx_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "226", "x": "513", "y": "74", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['CPI','CPI','CPI'], ['CPI','CPI','CPI'], ['USD','USD','USD'], ['CPI','CPI','CPI'], ['USD','USD','USD'], ['CPI','CPI','CPI'], ['CPI','CPI','CPI'], ['CPI','CPI','CPI']], [opex_accounts, activities])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_indices_definition", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indices Definition", "units": null, "w": "184", "x": "533", "y": "159", "z": 1}, {"color": "#CB98FF", "definition": "_indices = ( ( to_dataarray(indices) == opx_indices_definition ) * ast_indices_factor_projection ).sum(indices.name)\n\nresult = xr.where( to_dataarray(time) == min_time, 0, _indices * opx_actual_based_opex_proj )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_nominal_opex_proj", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nominal OPEX Projection", "units": null, "w": "184", "x": "533", "y": "213", "z": 1}, {"color": null, "definition": "_drivers = ( ( to_dataarray(opex_drivers) == opx_drivers_definition ) * opx_drivers_factor ).sum(opex_drivers.name)\n\nresult = opx_actual_opex_base * _drivers", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_actual_based_opex_proj", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Based OPEX Projection", "units": null, "w": "184", "x": "296", "y": "213", "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a85679056315d46b2ae48e0434dcfc97d", "moduleId": "log_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_demand", "picture": null, "title": "Company's Demand per Region and Sales Channel", "units": null, "w": "184", "x": "289", "y": "101", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_supplied_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9f7a40f799504221a5f237991c864ef0", "moduleId": "log_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_supplied_demand", "picture": null, "title": "Supplied Demand", "units": null, "w": "184", "x": "60", "y": "151", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_monthly_cpi", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad222a5e1034e4257bf1b7c920c9e77ed", "moduleId": "log_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_monthly_cpi", "picture": null, "title": "Monthly CPI", "units": null, "w": "184", "x": "289", "y": "389", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Logistics", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "516", "identifier": "node80", "moduleId": "log_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "940", "x": "28", "y": "42", "z": "-2"}, {"color": "#cccccc", "definition": "result = 0", "description": "Quantities", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "278", "identifier": "node81", "moduleId": "log_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "686", "x": "41", "y": "75", "z": -1}, {"color": null, "definition": "_share = ( cdm_demand.sum(sales_channels.name) / cdm_demand.sum([sales_channels.name, regions.name]) ).fillna(0.)\n\nresult = sop_supplied_demand * _share", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_supplied_demand_reg", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supplied Demand by Region", "units": null, "w": "184", "x": "289", "y": "151", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[[0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0]], [[0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5]], [[0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8]], [[0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0]], [[0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0],  [0.0,0.5,0.0,0.0,0.0,0.5,0.0]], [[0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0],  [0.0,0.0,0.5,0.5,0.0,0.0,0.0]], [[0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5],  [0.0,0.0,0.0,0.0,0.3,0.2,0.5]], [[0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8],  [0.0,0.0,0.0,0.0,0.0,0.2,0.8]], [[0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0],  [0.0,0.6,0.0,0.0,0.0,0.4,0.0]]],[regions, totaltime, delivery_systems])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_demand_distrib_by_delivery_system_pc", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Distribution by Delivery System (%)", "units": null, "w": "184", "x": "60", "y": "203", "z": 1}, {"color": null, "definition": "result = pd.Index(['Inter warehouse ','Cross docking - Direct distribution','Direct distribution','Indirect distribution','Inter warehouse  - Cross docking - Direct distribution','Inter warehouse  - Direct distribution','Inter warehouse  - Indirect distribution'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "delivery_systems", "moduleId": "log_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Delivery Systems", "units": null, "w": "100", "x": "53", "y": "68", "z": 1}, {"color": "#4CBCFF", "definition": "result = log_supplied_demand_reg * change_index( log_demand_distrib_by_delivery_system_pc, totaltime, time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_demand_distrib_by_delivery_system_pc_lt", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Distribution by Delivery System (lt)", "units": null, "w": "184", "x": "289", "y": "203", "z": 1}, {"color": "#4CBCFF", "definition": "result = log_demand_distrib_by_delivery_system_pc_lt / mkp_gallons_per_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_demand_bottles", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand in Bottles", "units": null, "w": "184", "x": "289", "y": "251", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([8,9,8,24,12,8,9,24,24,24,24,12,8,24,8,24,12,12,24,8,12,9,24,24,24,24,24,24,12,12,24,12,24,24,9,24,24,24,24,12,8,8,24,12,8,24,12,8,8,8,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,24,12,12,12,12,12,24,12,12,24,12,24,12,12,24,12,8,12,9,24,12,24,24,8,12,12,24,12,24,12,12,24,12,12,24,12,12,24,12,12,24,12,12,12,24,12,12,12,8,8,9,24,24,24,24,12,8,24,12,12], [products])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_bottles_per_physical_box", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Bottles per Physical Box", "units": null, "w": "184", "x": "60", "y": "301", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.ufuncs.floor( log_demand_bottles / log_bottles_per_physical_box )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_physical_boxes_to_move", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Physical Boxes to Move", "units": null, "w": "184", "x": "289", "y": "301", "z": 1}, {"color": "#4CBCFF", "definition": "result = find( distribution_channels, delivery_systems, compareType = 4, caseSensitive = True )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_distrib_channel_to_delivery_system_alloc", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribution Channel to Delivery System Allocation", "units": null, "w": "184", "x": "519", "y": "251", "z": 1}, {"color": null, "definition": "result = pd.Index(['Inter warehouse ','Cross docking','Direct distribution','Indirect distribution'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "distribution_channels", "moduleId": "log_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribution Channels", "units": null, "w": "100", "x": "154", "y": "68", "z": 1}, {"color": "#4CBCFF", "definition": "result = ( log_physical_boxes_to_move * log_distrib_channel_to_delivery_system_alloc ).sum(delivery_systems.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_physical_boxes_by_distrib_channel", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Physical Boxes by Distribution Channel", "units": null, "w": "184", "x": "519", "y": "301", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Tariff", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "184", "identifier": "node82", "moduleId": "log_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "686", "x": "41", "y": "360", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[ 0.00031   , 0.00024   , 0.000196  , 0.00021   , 0.00021   , 0.00031   ,   0.00024   , 0.000196  , 0.00021   ], [ 0.00021   , 0.00018   , 0.000216  , 0.000176  , 0.00019   , 0.00021   ,   0.00018   , 0.000216  , 0.000176  ], [ 0.00019   , 0.0001222 , 0.00012   , 0.000124  , 0.00012   , 0.00019   ,   0.0001222 , 0.00012   , 0.000124  ], [ 0.000122  , 0.000122  , 0.00011226, 0.000124  , 0.000128  , 0.000122  ,   0.000122  , 0.00011226, 0.000124  ]], [distribution_channels, regions])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_init_tariff_by_distrib_channel", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Tariff by Distribution Channel ($/km)", "units": "$/km", "w": "184", "x": "60", "y": "441", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, log_init_tariff_by_distrib_channel, pp.dynamic( log_proj_tariff_by_distrib_channel, time, -1 , 0 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_proj_tariff_by_distrib_channel", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Tariff by Distribution Channel ($/km)", "units": null, "w": "184", "x": "289", "y": "441", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([600,3000,2500,3500,2500,900,3200,2750,3800], [regions])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_avg_distance_to_regions", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Average Distance to Regions (km)", "units": "km", "w": "184", "x": "289", "y": "491", "z": 1}, {"color": "#4CBCFF", "definition": "result = log_proj_tariff_by_distrib_channel * log_avg_distance_to_regions", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_tariff_by_distrib_channel_region", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Tariff by Distribution Channel and Region", "units": null, "w": "184", "x": "519", "y": "491", "z": 1}, {"color": "#4CBCFF", "definition": "result = log_physical_boxes_by_distrib_channel * log_tariff_by_distrib_channel_region", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_cost_by_prod_distrib_channel_region", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cost by Product, Distribution Channel and Region", "units": null, "w": "184", "x": "755", "y": "441", "z": 1}, {"color": "#CB98FF", "definition": "result = log_cost_by_prod_distrib_channel_region.sum([distribution_channels.name, products.name, regions.name]) * machinelearningcostimpact", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_distribution_cost", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribution Cost", "units": null, "w": "184", "x": "755", "y": "491", "z": 1}, {"color": null, "definition": "result = pd.Index(['Boxes', 'Cost'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "distribution_concepts", "moduleId": "log_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribution Concepts", "units": null, "w": "100", "x": "255", "y": "68", "z": 1}, {"color": "#CCCCCC", "definition": "_report = xr.concat( [log_physical_boxes_by_distrib_channel, log_cost_by_prod_distrib_channel_region], dim = distribution_concepts )\n_df = _report.to_dataframe(name = 'values')\n_df = _df[_df['values'] != 0].reset_index()\n_df_allocation = ast_prod_to_mkt_segment_alloc.to_dataframe(name = 'market_segments').reset_index()\n_df = _df.merge( _df_allocation, on = 'products', how = 'left' )\n_df_years_alloc = time_to_years.to_dataframe( name = 'years' ).reset_index()\n_df_semesters_alloc = time_to_semester.to_dataframe( name = 'semesters' ).reset_index()\n_df_quarters_alloc = time_to_quarter.to_dataframe( name = 'quarters' ).reset_index()\n_df = _df.merge( _df_years_alloc, on = 'time', how = 'left' )\n_df = _df.merge( _df_semesters_alloc, on = 'time', how = 'left' )\n_df = _df.merge( _df_quarters_alloc, on = 'time', how = 'left' )\n\n_index_columns = _df.columns[(_df.columns != 'values') & (_df.columns != 'distribution_concepts')].values.tolist()\n_df = _df.pivot_table( values = 'values', index = _index_columns, columns = 'distribution_concepts', aggfunc = np.sum )\n_df['Unit Cost'] = np.nan\n\n_df.groupMeasures = dict()\n_df.groupMeasures['Unit Cost'] = lambda x: x['Cost'] / np.where( (x['Boxes'] == 0) | (x['Boxes'] == np.nan), 1, x['Boxes'] )\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "log_distribution_report", "moduleId": "log_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distribution Report", "units": null, "w": "184", "x": "60", "y": "577", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Financial Model", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "302", "identifier": "node84", "moduleId": "fin_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "754", "x": "28", "y": "42", "z": -1}, {"color": "#4CBCFF", "definition": "result = rev_revenue", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "acdadc91800cd44818944916b2abccb95", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "rev_revenue", "picture": null, "title": "Revenue", "units": null, "w": "184", "x": "78", "y": "136", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_profit_loss_mod", "moduleId": "fin_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Profit & Loss", "units": null, "w": "184", "x": "58", "y": "149", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_flow_mod", "moduleId": "fin_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow", "units": null, "w": "184", "x": "309", "y": "218", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_balance_sheet_mod", "moduleId": "fin_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Balance Sheet", "units": null, "w": "184", "x": "562", "y": "149", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Profit & Loss", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "970", "identifier": "node85", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "954", "x": "28", "y": "42", "z": -1}, {"color": "#4CBCFF", "definition": "result = sop_production_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab0f6f1e400e14a2dbb1d29a1e61f5295", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_production_cost", "picture": null, "title": "Production Cost", "units": null, "w": "184", "x": "78", "y": "184", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_manpower_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8d7133e6eb5d442bac4a1a0ee38e5ce8", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_manpower_cost", "picture": null, "title": "Manpower Cost", "units": null, "w": "184", "x": "78", "y": "233", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "EBITDA", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "420", "identifier": "node86", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "40", "y": "72", "z": -1}, {"color": "#FFFFFF", "definition": "result = 0", "description": "Gross Margin", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "186", "identifier": "node87", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "678", "x": "54", "y": "100", "z": -1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, 0, rev_revenue.sum(products.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_sales", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales", "units": null, "w": "184", "x": "302", "y": "136", "z": 1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, 0, sop_production_cost.sum(products.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_supply_cost", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supply Cost", "units": null, "w": "184", "x": "302", "y": "184", "z": 1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, 0, sop_manpower_cost.sum(production_lines.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_manpower_cost", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Manpower Cost", "units": null, "w": "184", "x": "302", "y": "233", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_sales - fin_supply_cost - fin_manpower_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_gross_margin", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gross Margin", "units": null, "w": "184", "x": "524", "y": "233", "z": 1}, {"color": "#FFFFFF", "definition": "result = 0", "description": "OPEX", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "186", "identifier": "node88", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "678", "x": "54", "y": "294", "z": -1}, {"color": "#4CBCFF", "definition": "result = log_distribution_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aae8ca1d438e14dbc8f8819fc58ddd223", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "log_distribution_cost", "picture": null, "title": "Distribution Cost", "units": null, "w": "184", "x": "78", "y": "330", "z": 1}, {"color": "#4CBCFF", "definition": "result = opx_nominal_opex_proj", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "af93c46f3387d43a98e20c501d7e1c709", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "opx_nominal_opex_proj", "picture": null, "title": "Nominal OPEX Projection", "units": null, "w": "184", "x": "78", "y": "379", "z": 1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, 0, log_distribution_cost )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_logistics_cost", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Logistics Cost", "units": null, "w": "184", "x": "302", "y": "330", "z": 1}, {"color": null, "definition": "result = subscript( opx_nominal_opex_proj, opex_accounts, 'Manpower' ).sum(activities.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_operating_manpower_cost", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operating Manpower Cost", "units": null, "w": "184", "x": "302", "y": "379", "z": 1}, {"color": null, "definition": "result = opx_nominal_opex_proj.sum([activities.name, opex_accounts.name]) - fin_operating_manpower_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_mso_cost", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "MSO Cost", "units": null, "w": "184", "x": "302", "y": "428", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_logistics_cost + fin_operating_manpower_cost + fin_mso_cost ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_opex", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX", "units": null, "w": "184", "x": "524", "y": "428", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_gross_margin - fin_opex", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_ebitda", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "EBITDA", "units": null, "w": "184", "x": "760", "y": "428", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "EBIT", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "94", "identifier": "node86_copy", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "40", "y": "499", "z": -1}, {"color": "#CB98FF", "definition": "result = fin_ebitda - fin_depreciation ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_ebit", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "EBIT", "units": null, "w": "184", "x": "760", "y": "535", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Profit Before Tax", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "94", "identifier": "node89", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "40", "y": "601", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Net Income", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "94", "identifier": "node90", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "40", "y": "703", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Transfered to General Reserves", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "94", "identifier": "node91", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "40", "y": "806", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Dividends Policy", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "94", "identifier": "node92", "moduleId": "fin_profit_loss_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "930", "x": "40", "y": "909", "z": -1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Balance Sheet", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "584", "identifier": "node93", "moduleId": "fin_balance_sheet_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "962", "x": "28", "y": "42", "z": "-2"}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Assets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "542", "identifier": "node94", "moduleId": "fin_balance_sheet_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "464", "x": "40", "y": "72", "z": -1}, {"color": "#A5FF4B", "definition": "result = dataarray_from_excel( data_con_generic_ipm_it, sheetName = 'Financial_statements', indexes = [balance_sheet_concepts], valueColumns = 'Value', indexColumnHeaders = ['Conceptos_de_Balance'] ).fillna(0.)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_opening_balance", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opening Balance", "units": null, "w": "184", "x": "63", "y": "647", "z": 1}, {"color": null, "definition": "result = pd.Index(['Cash and Banks','Current Investments','Inventory','Trade Debtors','Work in Progress','-','Short Term Assets','--','Investment in Related Co.','---','Net Fixed Assets','----','Total Assets','-----','Trade Creditors','Short Term Debt','------','Short Term Liabilities','-------','Interest to Pay','Long Term Debt','--------','Total Liabilities','---------','Reserves','Retained Earnings','----------','Total Equity','-----------','Difference'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "balance_sheet_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Balance Sheet Concepts", "units": null, "w": "100", "x": "59", "y": "207", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_assets_evolution_mod", "moduleId": "fin_balance_sheet_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assets Evolution", "units": null, "w": "184", "x": "64", "y": "376", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Assets Evolution", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "724", "identifier": "node95", "moduleId": "fin_assets_evolution_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "704", "x": "28", "y": "42", "z": "-4"}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Existing Assets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "130", "identifier": "node96", "moduleId": "fin_assets_evolution_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "40", "y": "122", "z": "-3"}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[  2.04000000e+08,  0.00000000e+00], [  2.72000000e+08,  1.63200000e+07], [  8.00000000e+07,  6.40000000e+07], [  4.08000000e+07,  1.63200000e+07], [  3.40000000e+07,  6.80000000e+06], [  5.44000000e+07,  5.44000000e+06], [  1.08800000e+07,  2.17600000e+06]], [fixed_assets, fixed_assets_concepts])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_existing_assets", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Assets", "units": null, "w": "184", "x": "61", "y": "152", "z": 1}, {"color": null, "definition": "result = pd.Index(['Gross Existing Assets','Cumulated Depreciation'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "fixed_assets_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fixed Assets Concepts", "units": null, "w": "100", "x": "59", "y": "142", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([1000000000000,50,10,5,20,20,10], [fixed_assets])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_useful_life", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Useful Life", "units": null, "w": "184", "x": "286", "y": "68", "z": 1}, {"color": null, "definition": "result = pd.Index(['Linear','Sum of Years'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "depreciation_method", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Depreciation Method", "units": null, "w": "100", "x": "159", "y": "142", "z": 1}, {"color": "#4CBCFF", "definition": "_init_cumulated_depreciation = subscript( fin_existing_assets, fixed_assets_concepts, 'Cumulated Depreciation' )\n\nresult = xr.where( get_pos(time) == 0, _init_cumulated_depreciation, pp.dynamic( fin_exst_assets_cumulated_depreciation, time, -1, 0 ) + fin_exst_assets_depreciation )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_exst_assets_cumulated_depreciation", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Assets Cumulated Depreciation", "units": null, "w": "184", "x": "61", "y": "202", "z": 1}, {"color": "#4CBCFF", "definition": "_rate = 1 / ( fin_annual_useful_life * 12 )\n_gross_existing_assets = subscript( fin_existing_assets, fixed_assets_concepts, 'Gross Existing Assets' )\n_depreciation = _gross_existing_assets * _rate\n_net_existing_value = pp.dynamic( fin_net_exst_assets, time, -1, 0 )\n\nresult =  xr.where( get_pos(time) == 0, 0, xr.where ( _depreciation <= _net_existing_value, _depreciation, _net_existing_value ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_exst_assets_depreciation", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing Assets Depreciation", "units": null, "w": "184", "x": "286", "y": "202", "z": 1}, {"color": "#4CBCFF", "definition": "_gross_existing_assets = subscript( fin_existing_assets, fixed_assets_concepts, 'Gross Existing Assets' )\n_cumulated_depreciation = subscript( fin_existing_assets, fixed_assets_concepts, 'Cumulated Depreciation' )\n\nresult = xr.where( get_pos(time) == 0, _gross_existing_assets - _cumulated_depreciation, pp.dynamic( fin_net_exst_assets, time, -1, 0 ) - fin_exst_assets_depreciation )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_exst_assets", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Existing Assets", "units": null, "w": "184", "x": "510", "y": "202", "z": 1}, {"color": "#FFFF4B", "definition": "result = 2", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_init_wip_years_revertion", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial WIP Years to Revertion", "units": null, "w": "184", "x": "60", "y": "480", "z": 1}, {"color": "#A5FF4B", "definition": "result = subscript( fin_opening_balance, balance_sheet_concepts, 'Work in Progress' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_initial_wip", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial WIP", "units": null, "w": "184", "x": "60", "y": "434", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, 0, xr.where( get_pos(time) <= ( fin_init_wip_years_revertion * 12 ), fin_initial_wip / ( fin_init_wip_years_revertion * 12 ), 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_initial_wip_transfered_to_assets", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial WIP Transfered to Assets", "units": null, "w": "184", "x": "510", "y": "480", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_capitalization_asset_account", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a3620f63ccaa64374bd3d3c6d15070cb2", "moduleId": "fin_assets_evolution_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_capitalization_asset_account", "picture": null, "title": "Capitalization per Asset Account", "units": null, "w": "184", "x": "60", "y": "294", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "New Assets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "130", "identifier": "node99", "moduleId": "fin_assets_evolution_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "40", "y": "260", "z": "-3"}, {"color": "#4CBCFF", "definition": "result = cpx_capitalization_asset_account.sum(projects.name).cumsum(time.name) - fin_new_assets_depreciation.cumsum(time.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_new_assets", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net New Assets", "units": null, "w": "184", "x": "510", "y": "339", "z": 1}, {"color": "#4CBCFF", "definition": "_df = cpx_capitalization_asset_account.sum(projects.name).to_dataframe(name = 'value').reset_index()\n_df = _df[_df['value'] != 0]\n_df['new_assets_capitalizations'] = _df['fixed_assets'] + ' | ' + _df['time']\n_df_useful_life = fin_annual_useful_life.to_dataframe(name = 'useful_life').reset_index()\n_df = _df.merge(_df_useful_life, on = 'fixed_assets', how = 'left')\n_df['useful_life'] = _df['useful_life'] * 12\n_df['monthly_depreciation'] =  (_df['value'] / _df['useful_life']).fillna(0.)\n_df['initial_month'] = _df['time'].apply(lambda x: x.replace('.', '-'))\n_df['initial_month'] = pd.to_datetime(_df['initial_month'], format = '%Y-%m')\n_df['end_month'] = _df['initial_month'] + _df['useful_life'].values.astype(\"timedelta64[M]\")\n_df['end_month'] = _df['end_month'].dt.strftime('%Y.%m')\n_df['initial_month'] = _df['initial_month'].dt.strftime('%Y.%m')\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_new_assets_depreciation_pd", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Assets Depreciation (Pandas)", "units": null, "w": "184", "x": "286", "y": "294", "z": 1}, {"color": "#4CBCFF", "definition": "_df = fin_new_assets_depreciation_pd.copy()\n\nif selected_scenario == 'All':\n    _df = _df[['scenarios','new_assets_capitalizations','monthly_depreciation','initial_month','end_month','fixed_assets']]\n    _df = _df.set_index(['scenarios','new_assets_capitalizations'])\n    \n    _xarray = _df.to_xarray()\n    _initial_month = _xarray.initial_month.fillna(max_totaltime)\n    _end_month = _xarray.end_month.fillna(max_totaltime)\n    _monthly_depreciation = _xarray.monthly_depreciation.fillna(0.)\n    \n    _depreciation = xr.where( to_dataarray(time) >= _initial_month, xr.where( to_dataarray(time) <= _end_month, _monthly_depreciation, 0 ), 0 )\nelse:\n    _df = _df[['new_assets_capitalizations','monthly_depreciation','initial_month','end_month','fixed_assets']]\n    _df = _df.set_index('new_assets_capitalizations')\n    \n    _xarray = _df.to_xarray()\n    \n    _depreciation = xr.where( to_dataarray(time) >= _xarray['initial_month'], xr.where( to_dataarray(time) <= _xarray['end_month'], _xarray['monthly_depreciation'], 0 ), 0 )\n\nresult = aggregate( _depreciation, fin_new_assets_cap_to_new_assets_alloc, new_assets_capitalizations, fixed_assets ).fillna(0.)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_new_assets_depreciation", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Assets Depreciation", "units": null, "w": "184", "x": "286", "y": "339", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Total Fixed Assets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "82", "identifier": "node100", "moduleId": "fin_assets_evolution_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "40", "y": "535", "z": "-3"}, {"color": "#CB98FF", "definition": "result = fin_exst_assets_depreciation.sum(fixed_assets.name) + fin_new_assets_depreciation.sum(fixed_assets.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_depreciation", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Depreciation", "units": null, "w": "184", "x": "286", "y": "567", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Work in Progress Trasfered to Assets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "130", "identifier": "node101", "moduleId": "fin_assets_evolution_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "40", "y": "397", "z": "-3"}, {"color": "#CB98FF", "definition": "result = fin_net_exst_assets.sum(fixed_assets.name) + fin_net_new_assets.sum(fixed_assets.name) + fin_initial_wip_transfered_to_assets.cumsum(time.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_fixed_assets", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Fixed Assets", "units": null, "w": "184", "x": "510", "y": "567", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Work in Progress", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "130", "identifier": "node102", "moduleId": "fin_assets_evolution_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "40", "y": "625", "z": "-3"}, {"color": "#4CBCFF", "definition": "result = cpx_capex_work_in_progress", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a0fc3288c37564998a0d7fb85aa425c11", "moduleId": "fin_assets_evolution_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_capex_work_in_progress", "picture": null, "title": "CAPEX Work in Progress", "units": null, "w": "184", "x": "60", "y": "703", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( get_pos(time) == 0, fin_initial_wip, cpx_capex_work_in_progress.sum([projects.name, fixed_assets.name]) + fin_initial_wip_evolution )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_work_in_progress", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Work in Progress", "units": null, "w": "184", "x": "510", "y": "703", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_initial_wip - fin_initial_wip_transfered_to_assets.cumsum(time.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_initial_wip_evolution", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial WIP Evolution", "units": null, "w": "184", "x": "510", "y": "655", "z": 1}, {"color": null, "definition": "result = pd.Index(['Existing','CAPEX'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "existing_new_capex", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Existing / New CAPEX", "units": null, "w": "100", "x": "360", "y": "142", "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.where( to_dataarray(existing_new_capex) == 'Existing', xr.where( to_dataarray(depreciation_net_fix_assets) == 'Depreciation', fin_exst_assets_depreciation, fin_net_exst_assets), xr.where( to_dataarray(depreciation_net_fix_assets) == 'Depreciation', fin_new_assets_depreciation, fin_net_new_assets ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_budget_assets_report", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget Assets Report", "units": null, "w": "184", "x": "60", "y": "785", "z": 1}, {"color": null, "definition": "result = pd.Index(['Depreciation', 'Net Fix Assets'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "depreciation_net_fix_assets", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Depreciation / Net Fix Assets", "units": null, "w": "100", "x": "461", "y": "142", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_net_fixed_assets", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a24820f046ce54edeb191540d174f334e", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_net_fixed_assets", "picture": null, "title": "Net Fixed Assets", "units": null, "w": "184", "x": "295", "y": "472", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_work_in_progress", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a2f38d2faefcc439a9f5e3f49070ebefb", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_work_in_progress", "picture": null, "title": "Work in Progress", "units": null, "w": "184", "x": "295", "y": "376", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_depreciation", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a276c187000b04045a4034c368cd33909", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_depreciation", "picture": null, "title": "Depreciation", "units": null, "w": "184", "x": "524", "y": "535", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Liabilites", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "354", "identifier": "node103", "moduleId": "fin_balance_sheet_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "464", "x": "513", "y": "72", "z": -1}, {"color": "#4CBCFF", "definition": "result = sop_projected_stock", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a120a741b06034e968fabeee3fa429a43", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_projected_stock", "picture": null, "title": "Projected Stock", "units": null, "w": "184", "x": "64", "y": "194", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_sales", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa7a0ec15ee984a9682d46d2f23f11f01", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_sales", "picture": null, "title": "Sales", "units": null, "w": "184", "x": "64", "y": "331", "z": 1}, {"color": "#4CBCFF", "definition": "result = ( sop_unit_cost_supplies_proj * sop_ingredients_by_product ).sum(production_inputs.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_unit_cost_products", "moduleId": "sop_ingredients_cost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Unit Cost of Products", "units": null, "w": "184", "x": "269", "y": "267", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_unit_cost_products", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a28655c94d31c4a34bd8110d4b344da8b", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sop_unit_cost_products", "picture": null, "title": "Unit Cost of Products", "units": null, "w": "184", "x": "64", "y": "239", "z": 1}, {"color": null, "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Inventory' )\n\nresult = xr.where( get_pos(time) == 0, _initial, ( sop_projected_stock * sop_unit_cost_products ).sum(products.name) / 100 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_inventory", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inventory", "units": null, "w": "184", "x": "295", "y": "239", "z": 1}, {"color": null, "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Cash and Banks' )\n\nresult = xr.where( get_pos(time) == 0, _initial, pp.dynamic( fin_cash_banks, time, -1, 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_banks", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash and Banks", "units": null, "w": "184", "x": "295", "y": "101", "z": 1}, {"color": "#FFFF4B", "definition": "result = 15", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_debtors_days_to_pay", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Debtors Days to Pay", "units": null, "w": "184", "x": "64", "y": "285", "z": 1}, {"color": null, "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Trade Debtors' )\n\nresult = xr.where( get_pos(time) == 0, _initial, fin_sales * fin_debtors_days_to_pay / days_per_month )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_trade_debtors", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trade Debtors", "units": null, "w": "184", "x": "295", "y": "331", "z": 1}, {"color": "#4CBCFF", "definition": "_help_days = xr.DataArray([31,28,31,30,31,30,31,31,30,31,30,31], [seasons])\n_condicion1 = time_month_text == '2'\n_condicion2 = ((time_to_years_numeric - 2000) / 4) == xr.ufuncs.ceil((time_to_years_numeric - 2000) / 4)\n\nresult = xr.where( _condicion1 & _condicion2, 29, lookup( _help_days, time_month_text, seasons) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "days_per_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Days per Month", "units": null, "w": "184", "x": "270", "y": "366", "z": 1}, {"color": "#4CBCFF", "definition": "result = time_month.astype(str)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_month_text", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Month (text)", "units": null, "w": "184", "x": "270", "y": "413", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_total_st_assets + fin_net_fixed_assets", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_total_assets", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Assets", "units": null, "w": "184", "x": "295", "y": "562", "z": 1}, {"color": null, "definition": "result = fin_cash_banks + fin_st_investments + fin_inventory + fin_trade_debtors + fin_work_in_progress", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_total_st_assets", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Short Term Assets", "units": null, "w": "184", "x": "295", "y": "424", "z": 1}, {"color": "#FFFF4B", "definition": "result = 28", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_creditors_days_to_pay", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Creditors Days to Pay", "units": null, "w": "184", "x": "538", "y": "101", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_supply_cost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ac5503758fc5e4c7a8b7676a070c783c0", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_supply_cost", "picture": null, "title": "Supply Cost", "units": null, "w": "184", "x": "538", "y": "146", "z": 1}, {"color": null, "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Trade Creditors' )\n\nresult = xr.where( get_pos(time) == 0, _initial, fin_supply_cost * fin_creditors_days_to_pay / days_per_month )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_trade_creditors", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trade Creditors", "units": null, "w": "184", "x": "764", "y": "146", "z": 1}, {"color": null, "definition": "result = fin_st_debts + fin_trade_creditors", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_total_st_liabilities", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Short Term Liabilities", "units": null, "w": "184", "x": "764", "y": "239", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_total_st_liabilities + (fin_lt_principal_balance + fin_lt_nterests_to_pay).sum(loans.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_total_liabilities", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Liabilities", "units": null, "w": "184", "x": "764", "y": "378", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Equity", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "180", "identifier": "node105", "moduleId": "fin_balance_sheet_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "464", "x": "513", "y": "434", "z": -1}, {"color": "#CB98FF", "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Reserves' )\n\nresult = xr.where( get_pos(time) == 0, _initial, pp.dynamic( fin_reserves, time, -1, 0 ) + fin_reserves_aux )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_reserves", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reserves", "units": null, "w": "184", "x": "500", "y": "83", "z": 1}, {"color": "#CB98FF", "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Retained Earnings' )\n\nresult = xr.where( get_pos(time) == 0, _initial, pp.dynamic( fin_retained_earnings, time, -1, 0 ) + fin_retained_earnings_aux )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_retained_earnings", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Retained Earnings", "units": null, "w": "184", "x": "500", "y": "133", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_reserves + fin_retained_earnings", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_total_equity", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Equity", "units": null, "w": "184", "x": "764", "y": "562", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Cash Flow", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "486", "identifier": "node106", "moduleId": "fin_cash_flow_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "676", "x": "28", "y": "42", "z": -1}, {"color": "#4CBCFF", "definition": "result = fin_inventory", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "abcc5ac5398fc4791b1246c07520ff33c", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_inventory", "picture": null, "title": "Inventory", "units": null, "w": "184", "x": "47", "y": "80", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_trade_debtors", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a802914844fdb40488ba68379dbd225c3", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_trade_debtors", "picture": null, "title": "Trade Debtors", "units": null, "w": "184", "x": "47", "y": "129", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_trade_creditors", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "acc5d61e54f0a455fbcac85924a64a7b4", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_trade_creditors", "picture": null, "title": "Trade Creditors", "units": null, "w": "184", "x": "47", "y": "179", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_inventory, time, -1, 0 ) - fin_inventory + pp.dynamic( fin_trade_debtors, time, -1, 0 ) - fin_trade_debtors", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_decrease_in_assets", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Decrease in Assets", "units": null, "w": "184", "x": "270", "y": "129", "z": 1}, {"color": null, "definition": "result = fin_trade_creditors - pp.dynamic( fin_trade_creditors, time, -1, 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_increase_in_liabilities", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Increase in Liabilities", "units": null, "w": "184", "x": "270", "y": "179", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( get_pos(time) == 0, 0, fin_decrease_in_assets + fin_increase_in_liabilities )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_working_capital_variation", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Working Capital Variation", "units": null, "w": "184", "x": "492", "y": "179", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_ebitda", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a13f1cf8cc0b647e3bcbf4db2f84c5fbe", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_ebitda", "picture": null, "title": "EBITDA", "units": null, "w": "184", "x": "50", "y": "79", "z": 1}, {"color": null, "definition": "result = fin_ebitda + fin_working_capital_variation - fin_income_tax", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_operating_activities", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash from Operating Activities", "units": null, "w": "184", "x": "275", "y": "181", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_st_interest_earned_lost - fin_lt_accrued_interests.sum(loans.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_interest_earned_lost", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Interest Earned (Lost)", "units": null, "w": "184", "x": "726", "y": "275", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_ebit + fin_net_interest_earned_lost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_profit_before_tax", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Profit Before Tax", "units": null, "w": "184", "x": "760", "y": "636", "z": 1}, {"color": "#FFFF4B", "definition": "_rate = 0.35\n\nif len(inputs_scenarios) == 1:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = _rate\n        else:\n            result = create_dataarray( _rate, [scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios] )\nelse:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( _rate, [inputs_scenarios] )\n        else:\n            result = create_dataarray( _rate, [scenarios, inputs_scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations, inputs_scenarios] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios, inputs_scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_income_tax_rate", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Income Tax Rate", "units": null, "w": "184", "x": "302", "y": "736", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_profit_before_tax * fin_income_tax_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_income_tax", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Income Tax", "units": null, "w": "184", "x": "524", "y": "734", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_profit_before_tax - fin_income_tax", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_income", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Income", "units": null, "w": "184", "x": "760", "y": "734", "z": 1}, {"color": "#FFFF4B", "definition": "_rate = 0.05\n\nif len(inputs_scenarios) == 1:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = _rate\n        else:\n            result = create_dataarray( _rate, [scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios] )\nelse:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( _rate, [inputs_scenarios] )\n        else:\n            result = create_dataarray( _rate, [scenarios, inputs_scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations, inputs_scenarios] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios, inputs_scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pc_transfered_to_general_reserves", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "% Transfered to General Reserves", "units": null, "w": "184", "x": "302", "y": "841", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( time_month == 12, fin_cumulated_net_income * fin_pc_transfered_to_general_reserves, 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_transfered_to_general_reserves", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Transfered to General Reserves", "units": null, "w": "184", "x": "760", "y": "841", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( time_month == 1, fin_net_income, pp.dynamic( fin_cumulated_net_income, time, -1, 0 ) + fin_net_income )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cumulated_net_income", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cumulated Net Income", "units": null, "w": "184", "x": "524", "y": "841", "z": 1}, {"color": "#FFFF4B", "definition": "_rate = 0.25\n\nif len(inputs_scenarios) == 1:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = _rate\n        else:\n            result = create_dataarray( _rate, [scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios] )\nelse:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( _rate, [inputs_scenarios] )\n        else:\n            result = create_dataarray( _rate, [scenarios, inputs_scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations, inputs_scenarios] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios, inputs_scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_dividends_rate", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dividends Rate", "units": null, "w": "184", "x": "524", "y": "944", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( time_month == 12, xr.ufuncs.maximum( 0, ( fin_cumulated_net_income - fin_transfered_to_general_reserves ) * fin_dividends_rate ), 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_dividends_paid", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dividends Paid", "units": null, "w": "184", "x": "760", "y": "944", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_dividends_paid", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8a1b47a3299143c1816a54cc1e4326f8", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_dividends_paid", "picture": null, "title": "Dividends Paid", "units": null, "w": "184", "x": "50", "y": "474", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_income_tax", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a13e64d958b5c4bb1a81d3c4878fb9ceb", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_income_tax", "picture": null, "title": "Income Tax", "units": null, "w": "184", "x": "50", "y": "181", "z": 1}, {"color": "#4CBCFF", "definition": "result = cpx_cash_flow_project", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a939d0779f40b4c7e8fc0201b000a2736", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "cpx_cash_flow_project", "picture": null, "title": "Cash Flow per Project", "units": null, "w": "184", "x": "50", "y": "232", "z": 1}, {"color": null, "definition": "result = - cpx_cash_flow_project.sum(projects.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_investing_activities", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash from Investing Activities", "units": null, "w": "184", "x": "275", "y": "232", "z": 1}, {"color": null, "definition": "result = fin_net_interests_received_paid + (fin_lt_new_loans - fin_lt_amortization).sum(loans.name) - fin_dividends_paid", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_financing_activities", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash from Financing Activities", "units": null, "w": "184", "x": "275", "y": "474", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_cash_operating_activities + fin_cash_investing_activities + fin_cash_financing_activities", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_increase_decrease_in_cash", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Increase (Decrease) in Cash", "units": null, "w": "184", "x": "496", "y": "474", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_increase_decrease_in_cash", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae8e1e17190404d6d8235298f38babfd2", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_increase_decrease_in_cash", "picture": null, "title": "Increase (Decrease) in Cash", "units": null, "w": "184", "x": "50", "y": "80", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Short Term Investment / Debt Movements", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "188", "identifier": "node107", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "924", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_investment_debt_movements_mod", "moduleId": "fin_balance_sheet_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Investment Debt Movements", "units": null, "w": "184", "x": "63", "y": "146", "z": 1}, {"color": "#CB98FF", "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Current Investments' )\n\nresult = xr.where( get_pos(time) == 0, _initial, fin_st_investments_stock )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_investments", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Investments", "units": null, "w": "184", "x": "728", "y": "128", "z": 1}, {"color": "#CB98FF", "definition": "_initial = subscript( fin_opening_balance, balance_sheet_concepts, 'Short Term Debt' )\n\nresult = xr.where( get_pos(time) == 0, _initial, fin_st_debts_stock )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_debts", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Debts", "units": null, "w": "184", "x": "728", "y": "177", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_st_investments", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4011adbe6a494c79a256be4686a27ee8", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_st_investments", "picture": null, "title": "Short Term Investments", "units": null, "w": "184", "x": "46", "y": "129", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_st_debts", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa2c18243f99e4a1289331b783379ca69", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_st_debts", "picture": null, "title": "Short Term Debts", "units": null, "w": "184", "x": "46", "y": "230", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_interest_earned_lost_mod", "moduleId": "fin_profit_loss_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Interest Earned (Lost)", "units": null, "w": "184", "x": "301", "y": "635", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Net Interest Earned (Lost)", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "284", "identifier": "node109", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "908", "x": "28", "y": "42", "z": -1}, {"color": "#4CBCFF", "definition": "result = fin_net_interest_earned_lost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad990727d8bec44dba62165a3bd82c83b", "moduleId": "fin_profit_loss_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_net_interest_earned_lost", "picture": null, "title": "Net Interest Earned (Lost)", "units": null, "w": "184", "x": "524", "y": "635", "z": 1}, {"color": null, "definition": "result = fin_st_interest_earned - fin_st_interest_lost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_interest_earned_lost", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Interest Earned (Lost)", "units": null, "w": "184", "x": "495", "y": "230", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_st_debts, time, -1, 0 ) * fin_active_st_interest_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_interest_lost", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Interest Lost", "units": null, "w": "184", "x": "270", "y": "230", "z": 1}, {"color": "#FFFF4B", "definition": "_rate = 0.01\n\nif len(inputs_scenarios) == 1:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = _rate\n        else:\n            result = create_dataarray( _rate, [scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios] )\nelse:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( _rate, [inputs_scenarios] )\n        else:\n            result = create_dataarray( _rate, [scenarios, inputs_scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations, inputs_scenarios] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios, inputs_scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_active_st_interest_rate", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Active Short Term Interest Rate", "units": null, "w": "184", "x": "270", "y": "180", "z": 1}, {"color": "#FFFF4B", "definition": "_rate = 0.005\n\nif len(inputs_scenarios) == 1:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = _rate\n        else:\n            result = create_dataarray( _rate, [scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios] )\nelse:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( _rate, [inputs_scenarios] )\n        else:\n            result = create_dataarray( _rate, [scenarios, inputs_scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( _rate, [iterations, inputs_scenarios] )\n    else:\n        result = create_dataarray( _rate, [iterations, scenarios, inputs_scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_passive_st_interest_rate", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Passive Short Term Interest Rate", "units": null, "w": "184", "x": "270", "y": "79", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_st_investments, time, -1, 0 ) * fin_passive_st_interest_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_interest_earned", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Interest Earned", "units": null, "w": "184", "x": "270", "y": "129", "z": 1}, {"color": null, "definition": "result = xr.where( get_pos(time) == 0, 0, pp.dynamic( fin_cumulated_cash_variation, time, -1 , 0 ) + fin_increase_decrease_in_cash )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cumulated_cash_variation", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cumulated Cash Variation", "units": null, "w": "184", "x": "50", "y": "128", "z": 1}, {"color": null, "definition": "result = apply_fn( xr.ufuncs.minimum( 0, fin_cash_balance_bef_st_investments_debts ), lambda x: abs( x ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_debts_stock", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Debts Stock", "units": null, "w": "184", "x": "502", "y": "177", "z": 1}, {"color": null, "definition": "result = xr.ufuncs.maximum( 0, fin_cash_balance_bef_st_investments_debts )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_st_investments_stock", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Short Term Investments Stock", "units": null, "w": "184", "x": "502", "y": "128", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_st_debts", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "af36ab2451a7946fcbcdb912071805a55", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_st_debts", "picture": null, "title": "Short Term Debts", "units": null, "w": "184", "x": "764", "y": "193", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_st_investments", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a28f4a7cb91944c76b358b2ca42f50af1", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_st_investments", "picture": null, "title": "Short Term Investments", "units": null, "w": "184", "x": "295", "y": "146", "z": 1}, {"color": null, "definition": "_actual_st_investment = subscript( fin_opening_balance, balance_sheet_concepts, 'Current Investments' )\n_actual_st_debt = subscript( fin_opening_balance, balance_sheet_concepts, 'Short Term Debt' )\n_actual_cash_balance = _actual_st_investment - _actual_st_debt \n\nresult = xr.where( get_pos(time) == 0, _actual_cash_balance, _actual_cash_balance + fin_cumulated_cash_variation )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_balance_bef_st_investments_debts", "moduleId": "fin_st_investment_debt_movements_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Balance Before Short Term Investments / Debts", "units": null, "w": "184", "x": "278", "y": "128", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Loans Parameters", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "570", "identifier": "node311441", "moduleId": "fin_loans_parameters_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "688", "x": "21", "y": "39", "z": -1}, {"color": "#4CBCFF", "definition": "result = fin_amount", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node438", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_amount", "picture": null, "title": "Amount", "units": null, "w": "184", "x": "287", "y": "319", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_amortization_system", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node439", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_amortization_system", "picture": null, "title": "Amortization System", "units": null, "w": "184", "x": "287", "y": "416", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_number_of_installments", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node441", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_number_of_installments", "picture": null, "title": "Number of Installments", "units": null, "w": "184", "x": "287", "y": "367", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_disbursement_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node453", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_disbursement_date", "picture": null, "title": "Disbursement Date", "units": null, "w": "184", "x": "287", "y": "465", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_int_pmt_period_grace_period_months", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node435", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_int_pmt_period_grace_period_months", "picture": null, "title": "Interest Payment Periodicity in Grace Period (Months)", "units": null, "w": "184", "x": "40", "y": "125", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_int_pmt_period_amort_period_months", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node462", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_int_pmt_period_amort_period_months", "picture": null, "title": "Interest Payment Periodicity in Amortization Period (Months)", "units": null, "w": "184", "x": "40", "y": "297", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_grace_period_end_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node463", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_grace_period_end_date", "picture": null, "title": "Grace Period End Date", "units": null, "w": "184", "x": "40", "y": "179", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_maturity_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node464", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_maturity_date", "picture": null, "title": "Maturity Date", "units": null, "w": "184", "x": "40", "y": "247", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_disbursement_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node465", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_disbursement_date", "picture": null, "title": "Disbursement Date", "units": null, "w": "184", "x": "40", "y": "74", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Interest Payment Calendar", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "314", "identifier": "node3114_c121145", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1134", "x": "21", "y": "39", "z": -1}, {"color": "#4BBBFF", "definition": "result = fin_princ_pmt_period_months", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node469", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_princ_pmt_period_months", "picture": null, "title": "Principal Payment Periodicity (Months)", "units": null, "w": "184", "x": "42", "y": "176", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_maturity_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node470", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_maturity_date", "picture": null, "title": "Maturity Date", "units": null, "w": "184", "x": "42", "y": "126", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_grace_period_end_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node471", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_grace_period_end_date", "picture": null, "title": "Grace Period End Date", "units": null, "w": "184", "x": "42", "y": "75", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Amortization Payments Dates", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "192", "identifier": "node3114_c121146", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "916", "x": "21", "y": "39", "z": -1}, {"color": "#4BBBFF", "definition": "result = fin_amort_pmt_dates", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node472", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_amort_pmt_dates", "picture": null, "title": "Amortization Payment Dates", "units": null, "w": "184", "x": "287", "y": "267", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_effective_interest_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node467_copy", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_effective_interest_rate", "picture": null, "title": "Effective Interest Rate", "units": null, "w": "184", "x": "63", "y": "169", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_interest_pmt_calendar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node473", "moduleId": "fin_principal_interest_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_interest_pmt_calendar", "picture": null, "title": "Interest Payment Calendar", "units": null, "w": "184", "x": "287", "y": "118", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Principal and Interest", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "486", "identifier": "node3114_c12114", "moduleId": "fin_principal_interest_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1418", "x": "21", "y": "39", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Payments Calendar and Parameters", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "444", "identifier": "node3114_c12115", "moduleId": "fin_principal_interest_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "474", "x": "34", "y": "70", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "American Repayment System and Constant Repayment System", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "204", "identifier": "node3114_c12612", "moduleId": "fin_principal_interest_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "519", "y": "70", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Equated Monthly Installment System", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "228", "identifier": "node3114_c12612_copy", "moduleId": "fin_principal_interest_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "680", "x": "519", "y": "285", "z": -1}, {"color": "#4BBBFF", "definition": "result = fin_lt_amortization", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node455", "moduleId": "fin_debts_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_amortization", "picture": null, "title": "Long Term Amortization", "units": null, "w": "184", "x": "283", "y": "231", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_lt_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node456", "moduleId": "fin_debts_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_new_loans", "picture": null, "title": "Long Term New Loans", "units": null, "w": "184", "x": "283", "y": "133", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_lt_principal_balance", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node466", "moduleId": "fin_debts_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_principal_balance", "picture": null, "title": "Long Term Principal Balance", "units": null, "w": "184", "x": "283", "y": "182", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_lt_accrued_interests", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node467", "moduleId": "fin_debts_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_accrued_interests", "picture": null, "title": "Long Term Accrued Interests", "units": null, "w": "184", "x": "283", "y": "280", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_lt_interests_paid", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node468", "moduleId": "fin_debts_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_interests_paid", "picture": null, "title": "Long Term Interests Paid", "units": null, "w": "184", "x": "283", "y": "328", "z": 1}, {"color": "#4BBBFF", "definition": "result = fin_lt_nterests_to_pay", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "node474", "moduleId": "fin_debts_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_nterests_to_pay", "picture": null, "title": "Long Term Interests to Pay", "units": null, "w": "184", "x": "283", "y": "378", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Debts", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "390", "identifier": "node3114_c113", "moduleId": "fin_debts_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "478", "x": "21", "y": "39", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Debts Indexes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "216", "identifier": "node3114_c1114", "moduleId": "fin_debts_indexes_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "618", "x": "21", "y": "39", "z": -1}, {"color": "#4CBCFF", "definition": "result = fin_cubo_refresh_datos", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7f04ce8dc77c4d928e081363a0682dd2", "moduleId": "fin_debts_indexes_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_cubo_refresh_datos", "picture": null, "title": "Cubo de Refresh de Datos de Modelo Financiero", "units": null, "w": "174", "x": "53", "y": "76", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_debts_mod", "moduleId": "fin_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Debts", "units": null, "w": "196", "x": "303", "y": "78", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_loans_parameters_mod", "moduleId": "fin_debts_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Loans Parameters", "units": null, "w": "184", "x": "47", "y": "74", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_principal_interest_mod", "moduleId": "fin_debts_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Principal and Interest", "units": null, "w": "184", "x": "47", "y": "132", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_debts_indexes_mod", "moduleId": "fin_debts_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Debts Indexes", "units": null, "w": "184", "x": "47", "y": "457", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['10000000','0.36','0.02','Equated Monthly Installment','2018.04',  '2025.04','12','Half-yearly','Monthly','Monthly'], ['500000','0.28','0.025','American Repayment System','2018.09',  '2019.09','0','No','Half-yearly','Maturity'], ['750000','0.3','0.015','Constant Repayment System','2019.02',  '2022.08','6','No','Monthly','Yearly'], ['100000000','0.25','0.01','Equated Monthly Installment','2017.12',  '2028.12','0','No','Monthly','Monthly']], [loans, loans_concepts])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_loans_parameters", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Loans Parameters", "units": null, "w": "184", "x": "48", "y": "76", "z": 1}, {"color": null, "definition": "result = pd.Index(['Amount','Nominal annual interest rate','Spread','Capital repayment','Disbursement date','Maturity date','Grace period in months','Interest payment periodicity in grace period','Interest payment periodicity in amort period','Principal payment periodicity'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "loans_concepts", "moduleId": "fin_debts_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Loans Concepts", "units": null, "w": "100", "x": "159", "y": "143", "z": 1}, {"color": null, "definition": "result = pd.Index(['Loan A - X Bank','Loan B - Y Bank','Loan C - W Bank','Existing LT Debt'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "loans", "moduleId": "fin_debts_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Loans", "units": null, "w": "100", "x": "55", "y": "143", "z": 1}, {"color": null, "definition": "result = pd.Index(['Monthly','Bimonthly','Quarterly','Half-yearly','Yearly','Maturity'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "periodicity", "moduleId": "fin_debts_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Periodicity", "units": null, "w": "100", "x": "264", "y": "143", "z": 1}, {"color": null, "definition": "result = pd.Index(['Constant Repayment System','Equated Monthly Installment','American Repayment System'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "amortizations_systems", "moduleId": "fin_debts_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Systems", "units": null, "w": "100", "x": "159", "y": "84", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Interest payment periodicity in grace period' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_int_pmt_period_grace_period", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interest Payment Periodicity in Grace Period", "units": null, "w": "184", "x": "48", "y": "123", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Interest payment periodicity in amort period' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_int_pmt_period_amort_period", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interest Payment Periodicity in Amortization Period", "units": null, "w": "184", "x": "48", "y": "171", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Principal payment periodicity' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_princ_pmt_period", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Principal Payment Periodicity", "units": null, "w": "184", "x": "48", "y": "219", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Disbursement date' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_disbursement_date", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Disbursement Date", "units": null, "w": "184", "x": "48", "y": "314", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Maturity date' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_maturity_date", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Maturity Date", "units": null, "w": "184", "x": "48", "y": "362", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Amount' ).astype(float)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amount", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amount", "units": null, "w": "184", "x": "48", "y": "410", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Capital repayment' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amortization_system", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization System", "units": null, "w": "184", "x": "48", "y": "457", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Nominal annual interest rate' ).astype(float)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_nom_annual_interest_rate", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Nominal Annual Interest Rate", "units": null, "w": "184", "x": "48", "y": "506", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Spread' ).astype(float)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_spread", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Spread", "units": null, "w": "184", "x": "48", "y": "555", "z": 1}, {"color": null, "definition": "result = xr.where( fin_amortization_system != 'Constant Repayment System', ( fin_nom_annual_interest_rate + fin_spread ) * fin_princ_pmt_period_months / 12, ( fin_nom_annual_interest_rate + fin_spread ) * fin_term_months / 12 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_effective_interest_rate", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Effective Interest Rate", "units": null, "w": "184", "x": "273", "y": "555", "z": 1}, {"color": null, "definition": "result = apply_fn( fin_disbursement_date, add_periods, fin_grace_period_months )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_grace_period_end_date", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grace Period End Date", "units": null, "w": "184", "x": "273", "y": "314", "z": 1}, {"color": "#4CBCFF", "definition": "result = get_pos(debt_time) + 1", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pos_debt_time", "moduleId": "fin_debts_indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pos Debt Time", "units": null, "w": "196", "x": "411", "y": "156", "z": 1}, {"color": "#4CBCFF", "definition": "result = (1 + lookup( ast_annual_growth_rate, time_to_years, totalyears ) ) ** ( 1 / 12 ) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_monthly_growth_rate", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monthly Growth Rate", "units": null, "w": "184", "x": "295", "y": "149", "z": 1}, {"color": null, "definition": "result = ( (to_dataarray(periodicity) == fin_int_pmt_period_grace_period) * fin_months_to_period_alloc ).sum(periodicity.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_int_pmt_period_grace_period_months", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interest Payment Periodicity in Grace Period (Months)", "units": null, "w": "184", "x": "273", "y": "123", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([1,2,3,6,12,0], [periodicity])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_months_to_period_alloc", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Months to Periodicity Allocation", "units": null, "w": "184", "x": "273", "y": "76", "z": 1}, {"color": "#4BBBFF", "definition": "result = ( (to_dataarray(periodicity) == fin_int_pmt_period_amort_period) * fin_months_to_period_alloc ).sum(periodicity.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_int_pmt_period_amort_period_months", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interest Payment Periodicity in Amortization Period (Months)", "units": null, "w": "184", "x": "273", "y": "171", "z": 1}, {"color": "#4BBBFF", "definition": "result = ( (to_dataarray(periodicity) == fin_princ_pmt_period) * fin_months_to_period_alloc ).sum(periodicity.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_princ_pmt_period_months", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Principal Payment Periodicity (Months)", "units": null, "w": "184", "x": "273", "y": "219", "z": 1}, {"color": null, "definition": "result = subscript( fin_loans_parameters, loans_concepts, 'Grace period in months' ).astype(float)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_grace_period_months", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grace Period in Months", "units": null, "w": "184", "x": "273", "y": "265", "z": 1}, {"color": null, "definition": "_pos_maturity = ( pos_debt_time * (to_dataarray(debt_time) == fin_maturity_date) ).sum(debt_time.name)\n_pos_initial = ( pos_debt_time * (to_dataarray(debt_time) == fin_grace_period_end_date) ).sum(debt_time.name)\n_installments_amount = (_pos_maturity - _pos_initial) / fin_princ_pmt_period_months\n\nresult = xr.where( (_installments_amount == np.nan) | (_installments_amount == np.inf), 1., _installments_amount )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_number_of_installments", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Number of Installments", "units": null, "w": "184", "x": 515, "y": 362, "z": 1}, {"color": null, "definition": "result = ( pos_debt_time * (to_dataarray(debt_time) == fin_maturity_date) - pos_debt_time * (to_dataarray(debt_time) == fin_disbursement_date) ).sum(debt_time.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_term_months", "moduleId": "fin_loans_parameters_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Term in Months", "units": null, "w": "184", "x": "273", "y": "362", "z": 1}, {"color": null, "definition": "result = xr.where( fin_int_pmt_period_grace_period_months == 0, 0, xr.where( to_dataarray(time) > fin_disbursement_date, xr.where( to_dataarray(time) <= fin_grace_period_end_date, 1, 0 ), 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pmt_dates_d_grace_period_aux_2", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Payments Dates during Grace Period Aux 2", "units": null, "w": "184", "x": "271", "y": "179", "z": 1}, {"color": null, "definition": "result = xr.where( fin_int_pmt_period_amort_period_months == 0, to_dataarray(time) == fin_maturity_date, xr.where( to_dataarray(time) > fin_grace_period_end_date, xr.where( to_dataarray(time) <= fin_maturity_date, 1, 0 ), 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pmt_dates_d_amort_period_aux_2", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Payments Dates during Amortization Period Aux 2", "units": null, "w": "184", "x": "271", "y": "297", "z": 1}, {"color": null, "definition": "result = xr.where( to_dataarray(time) > fin_grace_period_end_date, 0, fin_pmt_dates_d_grace_period_aux_2.cumsum(time.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pmt_dates_d_grace_period_aux", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Payments Dates during Grace Period Aux", "units": null, "w": "184", "x": "495", "y": "179", "z": 1}, {"color": null, "definition": "_division = (fin_pmt_dates_d_grace_period_aux / fin_int_pmt_period_grace_period_months).fillna(0.)\n_fraction = apply_fn( _division, lambda x: x - int(x) )\n\nresult = xr.where( _fraction == 0, fin_pmt_dates_d_grace_period_aux_2, 0)\n\n# Truco para saber en qu\u00e9 meses corresponde pagar intereses de acuerdo a periodicidad de pago", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pmt_dates_d_grace_period", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Payments Dates during Grace Period", "units": null, "w": "184", "x": "719", "y": "179", "z": 1}, {"color": null, "definition": "result = xr.where( to_dataarray(time) > fin_maturity_date, 0, fin_pmt_dates_d_amort_period_aux_2.cumsum(time.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pmt_dates_d_amort_period_aux", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Payments Dates during Amortization Period Aux", "units": null, "w": "184", "x": "495", "y": "297", "z": 1}, {"color": null, "definition": "_division = (fin_pmt_dates_d_amort_period_aux / fin_int_pmt_period_amort_period_months).fillna(0.)\n_fraction = apply_fn( _division, lambda x: x - int(x) )\n\nresult = xr.where( _fraction == 0, fin_pmt_dates_d_amort_period_aux_2, 0 )\n\n# Truco para saber en qu\u00e9 meses corresponde pagar intereses de acuerdo a periodicidad de pago", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pmt_dates_d_amort_period", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Payments Dates during Amortization Period", "units": null, "w": "184", "x": "719", "y": "297", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( to_dataarray(time) <= fin_grace_period_end_date, fin_pmt_dates_d_grace_period, fin_pmt_dates_d_amort_period )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_interest_pmt_calendar", "moduleId": "fin_interest_pmt_calendar_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interest Payment Calendar", "units": null, "w": "184", "x": "942", "y": "297", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amort_pmt_dates_mod", "moduleId": "fin_principal_interest_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Payments Dates", "units": null, "w": "184", "x": "63", "y": "267", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_interest_pmt_calendar_mod", "moduleId": "fin_principal_interest_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interest Payment Calendar", "units": null, "w": "184", "x": "62", "y": "112", "z": 1}, {"color": null, "definition": "result = xr.where( fin_princ_pmt_period_months == 0, to_dataarray(time) == fin_maturity_date, xr.where( to_dataarray(time) > fin_grace_period_end_date, xr.where( to_dataarray(time) <= fin_maturity_date, 1, 0 ), 0 ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amort_pmt_dates_aux_2", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Payment Dates Aux 2", "units": null, "w": "184", "x": "275", "y": "176", "z": 1}, {"color": null, "definition": "result = xr.where( to_dataarray(time) > fin_maturity_date, 0, fin_amort_pmt_dates_aux_2.cumsum(time.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amort_pmt_dates_aux", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Payment Dates Aux", "units": null, "w": "184", "x": "501", "y": "176", "z": 1}, {"color": "#CB98FF", "definition": "_division_aux = ( fin_amort_pmt_dates_aux / fin_princ_pmt_period_months ).fillna(0)\n_division = xr.where( (_division_aux == np.nan) | (_division_aux == np.inf), 0, _division_aux )\n_fraction = apply_fn( _division, lambda x: x - int(x) )\n\nresult = xr.where( _fraction == 0, fin_amort_pmt_dates_aux_2, 0)\n\n# Truco para saber en qu\u00e9 meses corresponde pagar intereses de acuerdo a periodicidad de pago", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amort_pmt_dates", "moduleId": "fin_amort_pmt_dates_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Payment Dates", "units": null, "w": "184", "x": "726", "y": "176", "z": 1}, {"color": null, "definition": "result = xr.where( to_dataarray(time) < fin_maturity_date, fin_amortization_amount_emi, xr.ufuncs.minimum(fin_amortization_amount_emi, pp.dynamic(fin_principal_balance_emi, time, -1, 0)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amortization_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization - EMI", "units": null, "w": "184", "x": "766", "y": "465", "z": 1}, {"color": null, "definition": "result = xr.where( fin_amortization_system != 'Constant Repayment System', ( 1 + fin_effective_interest_rate ) ** ( 1 / fin_princ_pmt_period_months ) - 1, ( 1 + fin_effective_interest_rate ) ** ( 1 / fin_term_months ) - 1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_monthly_equiv_interest_rate", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Monthly Equivalent Interest Rate", "units": null, "w": "184", "x": 314, "y": 168, "z": 1}, {"color": null, "definition": "result = fin_amortization_value_arscrs * fin_amort_pmt_dates", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amortization_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization - ARS & CRS", "units": null, "w": "184", "x": "766", "y": "217", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_principal_balance_arscrs, time, -1, 0 ) * fin_monthly_equiv_interest_rate ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_accrued_interests_princ_balance_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accrued Interests over Principal Balance - ARS & CRS", "units": null, "w": "184", "x": "766", "y": "168", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_interests_to_pay_arscrs, time, -1, 0 ) * fin_monthly_equiv_interest_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_accrued_interests_int_to_pay_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accrued Interests over Interests to Pay - ARS & CRS", "units": null, "w": "184", "x": "766", "y": "118", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_interests_to_pay_arscrs, time, -1, 0 ) + fin_accrued_interests_princ_balance_arscrs + fin_accrued_interests_int_to_pay_arscrs - fin_interests_paid_arscrs ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_interests_to_pay_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interests to Pay - ARS & CRS", "units": null, "w": "184", "x": "989", "y": "118", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_principal_balance_arscrs, time, -1, 0 ) + fin_lt_new_loans - fin_amortization_arscrs", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_principal_balance_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Principal Balance - ARS & CRS", "units": null, "w": "184", "x": "989", "y": "217", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_principal_balance_emi, time, -1, 0 ) * fin_monthly_equiv_interest_rate ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_accrued_interests_princ_balance_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accrued Interests over Principal - EMI", "units": null, "w": "184", "x": "766", "y": "367", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_interests_to_pay_emi, time, -1, 0) + fin_accrued_interests_int_to_pay_emi + fin_accrued_interests_princ_balance_emi - fin_interests_paid_emi ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_interests_to_pay_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interests to Pay - EMI", "units": null, "w": "184", "x": "989", "y": "315", "z": 1}, {"color": null, "definition": "result = ( fin_accrued_interests_princ_balance_arscrs + fin_accrued_interests_int_to_pay_arscrs) * fin_interest_pmt_calendar + pp.dynamic( fin_interests_to_pay_arscrs, time, -1, 0 ) * fin_interest_pmt_calendar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_interests_paid_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interests Paid - ARS & CRS", "units": null, "w": "184", "x": "989", "y": "168", "z": 1}, {"color": null, "definition": "result = (fin_accrued_interests_int_to_pay_emi + fin_accrued_interests_princ_balance_emi) * fin_interest_pmt_calendar + pp.dynamic(fin_interests_to_pay_emi, time, -1, 0) * fin_interest_pmt_calendar ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_interests_paid_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Interests Paid - EMI", "units": null, "w": "184", "x": "989", "y": "367", "z": 1}, {"color": null, "definition": "result = pp.dynamic(fin_principal_balance_emi, time, -1, 0) + fin_lt_new_loans - fin_amortization_emi", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_principal_balance_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Principal Balance - EMI", "units": null, "w": "184", "x": "989", "y": "465", "z": 1}, {"color": null, "definition": "result = pp.dynamic( fin_interests_to_pay_emi, time, -1, 0 ) * fin_monthly_equiv_interest_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_accrued_interests_int_to_pay_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accrued Interests over Interests to Pay - EMI", "units": null, "w": "184", "x": "766", "y": "315", "z": 1}, {"color": null, "definition": "_interest_rate = ( xr.where( to_dataarray(time) == fin_disbursement_date, (1 + fin_effective_interest_rate) ** (fin_int_pmt_period_amort_period_months / fin_princ_pmt_period_months) - 1, 0) ).sum(time.name).fillna(0)\n_installment_numpy = np.pmt( _interest_rate.values, fin_number_of_installments.values, - fin_amount.values)\n_installment = xr.DataArray(_installment_numpy, [loans])\n\nresult = xr.where( fin_amortization_system == 'Equated Monthly Installment', _installment, 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_installment_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Installment - EMI", "units": null, "w": "184", "x": "546", "y": "465", "z": 1}, {"color": null, "definition": "result = xr.where( fin_number_of_installments == 0, 0, fin_amount / fin_number_of_installments )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amortization_value_arscrs", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Value - SA y SAM", "units": null, "w": "184", "x": "546", "y": "217", "z": 1}, {"color": null, "definition": "result = create_time( '2014.12', '2030.12', freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "debt_time", "moduleId": "fin_debts_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Debt Time", "units": null, "w": "100", "x": "459", "y": "84", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( to_dataarray(time) == fin_disbursement_date, fin_amount, 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_lt_new_loans", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Long Term New Loans", "units": null, "w": "184", "x": "1224", "y": "218", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( fin_amortization_system == 'Equated Monthly Installment', fin_principal_balance_emi, fin_principal_balance_arscrs )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_lt_principal_balance", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Long Term Principal Balance", "units": null, "w": "184", "x": "1224", "y": "267", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where( fin_amortization_system == 'Equated Monthly Installment', fin_amortization_emi, fin_amortization_arscrs)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_lt_amortization", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Long Term Amortization", "units": null, "w": "184", "x": "1224", "y": "315", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where(fin_amortization_system == 'Equated Monthly Installment', fin_accrued_interests_int_to_pay_emi + fin_accrued_interests_princ_balance_emi, fin_accrued_interests_int_to_pay_arscrs + fin_accrued_interests_princ_balance_arscrs)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_lt_accrued_interests", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Long Term Accrued Interests", "units": null, "w": "184", "x": "1224", "y": "367", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where(fin_amortization_system == 'Equated Monthly Installment', fin_interests_paid_emi, fin_interests_paid_arscrs)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_lt_interests_paid", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Long Term Interests Paid", "units": null, "w": "184", "x": "1224", "y": "416", "z": 1}, {"color": "#CB98FF", "definition": "result = xr.where(fin_amortization_system == 'Equated Monthly Installment', fin_interests_to_pay_emi, fin_interests_to_pay_arscrs)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_lt_nterests_to_pay", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Long Term Interests to Pay", "units": null, "w": "184", "x": "1224", "y": "465", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_lt_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9a0f6ec152264b13a74b9907d0d6de82", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_new_loans", "picture": null, "title": "Long Term New Loans", "units": null, "w": "184", "x": "50", "y": "376", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_lt_principal_balance", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "adff15802f3bd4f608fdc7caed3227a30", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_principal_balance", "picture": null, "title": "Long Term Principal Balance", "units": null, "w": "184", "x": "764", "y": "331", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_lt_amortization", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab97c44c4114245d497a10b18aebeff0f", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_amortization", "picture": null, "title": "Long Term Amortization", "units": null, "w": "184", "x": "50", "y": "424", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_lt_accrued_interests", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6ee1e19baf0d4980b089b6aea9f60eea", "moduleId": "fin_net_interest_earned_lost_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_accrued_interests", "picture": null, "title": "Long Term Accrued Interests", "units": null, "w": "184", "x": "495", "y": "275", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_lt_interests_paid", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a5a62efe80dba40fe880b52d8fbbfe5e6", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_interests_paid", "picture": null, "title": "Long Term Interests Paid", "units": null, "w": "184", "x": "50", "y": "327", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_lt_nterests_to_pay", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a650363e305d84afda74d62d4612f7e74", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_lt_nterests_to_pay", "picture": null, "title": "Long Term Interests to Pay", "units": null, "w": "184", "x": "764", "y": "285", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_working_capital_variation_mod", "moduleId": "fin_cash_flow_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Working Capital Variation", "units": null, "w": "184", "x": "49", "y": "130", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Working Capital Variation", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "190", "identifier": "node112", "moduleId": "fin_working_capital_variation_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "672", "x": "28", "y": "42", "z": -1}, {"color": "#9999ff", "definition": "result = pd.Index(['Sales','Supply Cost','Manpower Cost','-','Gross Margin','--','Logistics Cost','Operating MP Cost','MSO Cost','---','EBITDA','----','Depreciation','-----','EBIT','------','Net Interest Received/Paid','-------','Profit Before Tax','--------','Income Tax','---------','Net Income'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "pl_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Concepts", "units": null, "w": "100", "x": "59", "y": "74", "z": 1}, {"color": "#CCCCCC", "definition": "_empty = empty_cube_time_scenarios_iterations\n#_depreciation = ( fin_depreciation * xr.where( get_pos(iterations) == get_pos(iterations), 1, 0 ) ) if pmk_per_capita_cons_method == 'Normal Distribution' else fin_depreciation\n_depreciation = fin_depreciation + empty_cube_time_scenarios_iterations\n\n_report = xr.concat( [fin_sales,-fin_supply_cost,-fin_manpower_cost,_empty,fin_gross_margin,_empty,-fin_logistics_cost,-fin_operating_manpower_cost,-fin_mso_cost,_empty,fin_ebitda,_empty,-_depreciation,_empty,fin_ebit,_empty,fin_net_interest_earned_lost,_empty,fin_profit_before_tax,_empty,-fin_income_tax,_empty,fin_net_income], dim = pl_concepts )\n\nresult = _report / 1000000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pl_report", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Report", "units": "MM$", "w": "184", "x": "78", "y": "1034", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Net Income','Cumulated Net Income','Transfered to General Reserves','Dividends Paid','Retained Earnings'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "retained_earnings_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Retained Earnings Concepts", "units": null, "w": "100", "x": "159", "y": "74", "z": 1}, {"color": "#CCCCCC", "definition": "_report = xr.concat( [fin_net_income,fin_cumulated_net_income,fin_transfered_to_general_reserves,fin_dividends_paid,fin_retained_earnings], dim = retained_earnings_concepts )\n\nresult = _report / 1000000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_retained_earnings_report", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Retained Earnings Report", "units": "MM$", "w": "184", "x": "301", "y": "1034", "z": 1}, {"color": "#CCCCCC", "definition": "_empty = empty_cube_time_scenarios_iterations\n\n_report = xr.concat( [fin_cash_banks + _empty,fin_st_investments,fin_inventory,fin_trade_debtors,fin_work_in_progress + _empty,_empty,fin_total_st_assets,_empty,_empty,_empty,fin_net_fixed_assets + _empty,_empty,fin_total_assets,_empty,fin_trade_creditors,fin_st_debts,_empty,fin_total_st_liabilities,_empty,fin_lt_nterests_to_pay.sum(loans.name) + _empty,fin_lt_principal_balance.sum(loans.name) + _empty,_empty,fin_total_liabilities,_empty,fin_reserves,fin_retained_earnings,_empty,fin_total_equity,_empty,fin_ale_difference], dim = balance_sheet_concepts )\n\nresult = _report / 1000000\n# Sumo _empty a los arrays que no tienen nativamente la dimensi\u00f3n de scenarios o iterations, porque el concat no hace broadcasting.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_balance_sheet_report", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Balance Sheet Report", "units": "MM$", "w": "184", "x": "538", "y": "647", "z": 1}, {"color": "#CCCCCC", "definition": "result = fin_total_assets - fin_total_liabilities - fin_total_equity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_ale_difference", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "A - L - E Difference", "units": "$K", "w": "184", "x": "295", "y": "647", "z": 1}, {"color": null, "definition": "_index_pandas = fin_new_assets_depreciation_pd['new_assets_capitalizations'].replace(\"\",np.nan).dropna()\n_index_numpy = _index_pandas.unique()\n\nresult = pd.Index(_index_numpy)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "new_assets_capitalizations", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Assets Capitalizations", "units": null, "w": "100", "x": "259", "y": "142", "z": 1}, {"color": null, "definition": "result = pd.Index(['MC Brand - Soda 1','MC Brand - Soda 2','MC Brand - Soda 3','MC Brand - Soda 4','MC Brand - Soda 5','MC Brand - Soda 6','MC Brand - Soda 7','MC Brand - Soda 8','MC Brand - Soda 9','MC Brand - Soda 10','MC Brand - Soda 11','MC Brand - Soda 12','MC Brand - Soda 13','MC Brand - Soda 14','MC Brand - Soda 15','MC Brand - Soda 16','MC Brand - Soda 17','MC Brand - Soda 18','MC Brand - Soda 19','MC Brand - Soda 20','MC Brand - Soda 21','MC Brand - Soda 22','MC Brand - Soda 23','MC Brand - Soda 24','MC Brand - Soda 25','MC Brand - Soda 26','MC Brand - Soda 27','MC Brand - Soda 28','MC Brand - Soda 29','MC Brand - Soda 30','MC Brand - Iced Tea 1','MC Brand - Iced Tea 2','MC Brand - Iced Tea 3','MC Brand - Juice 1','MC Brand - Juice 2','MC Brand - Juice 3','MC Brand - Juice 4','MC Brand - Juice 5','MC Brand - Sports Drink 1','MC Brand - Sports Drink 2','MC Brand - Sports Drink 3'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "mc_brand_products", "moduleId": "mkp_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Competitor's Brand Products", "units": null, "w": "100", "x": "70", "y": "137", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [2,0.99,1.99,1.5,1.6,1.99,1,1.8,1.5,1.5,1.9,0.7,2,0.7,2,1.5,0.8,0.8,0.7,2,0.75,0.99,1.9,0.5,1.5,1.5,0.6,1.5,0.5,0.5,1.4,0.8,1.03,1.68,1.5,1.55,1.7,1.67,1.3,0.75,1], [mc_brand_products] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_mcbrand_prod_initial_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Competitor's Brand Products Initial Prices", "units": null, "w": "184", "x": "62", "y": "406", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, mkp_mcbrand_prod_initial_prices, pp.dynamic( mkp_mcbrand_prod_prices_proj, time, -1 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_mcbrand_prod_prices_proj", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Competitor's Brand Products Prices Projection", "units": null, "w": "184", "x": "287", "y": "406", "z": 1}, {"color": "#CB98FF", "definition": "result = mkp_mcbrand_prod_prices_proj / mkp_gallons_per_mcbrand_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_mcbrand_prices", "moduleId": "mkp_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Competitor's Brand Prices", "units": null, "w": "184", "x": "510", "y": "406", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [0.528344,0.264172,0.528344,0.09375,0.15625,0.528344,0.264172,0.0625,0.0625,0.09375,0.09375,0.15625,0.528344,0.09375,0.528344,0.09375,0.15625,0.15625,0.09375,0.528344,0.15625,0.264172,0.0625,0.0625,0.0625,0.09375,0.09375,0.09375,0.15625,0.15625,0.09375,0.15625,0.528344,0.140625,0.140625,0.140625,0.140625,0.140625,0.25,0.09375,0.15625], [mc_brand_products] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mkp_gallons_per_mcbrand_product", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gallons per Main Competitor's Brand Product", "units": null, "w": "184", "x": "295", "y": "577", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500], [products])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_init_ad_spending_company", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Advertising Spending - Company", "units": null, "w": "184", "x": "64", "y": "159", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485], [mc_brand_products])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_init_ad_spending_mcbrand", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Initial Advertising Spending - Main Competitor's Brand", "units": null, "w": "184", "x": "64", "y": "248", "z": 1}, {"color": "#CB98FF", "definition": "_market_share = change_index( mks_softdrinks_market_share, softdrink_products, products, defaultValue = 0. ) + change_index( mks_infusions_market_share, infusions_products, products, defaultValue = 0. ) + change_index( mks_juices_market_share, juices_products, products, defaultValue = 0. ) + change_index( mks_sports_drinks_market_share, sports_drinks_products, products, defaultValue = 0. )\n\nresult = _market_share * ( ast_prod_to_mkt_segment_alloc == to_dataarray(market_segments) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_company_market_share", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Company's Market Share", "units": null, "w": "184", "x": "728", "y": "436", "z": 1}, {"color": "#4CBCFF", "definition": "_coincidences = find( fixed_assets, new_assets_capitalizations, compareType = 4 )\n\nresult = xr.where( _coincidences, to_dataarray( fixed_assets), '' ).sum(fixed_assets.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_new_assets_cap_to_new_assets_alloc", "moduleId": "fin_assets_evolution_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Assets Capitalizations to New Assets Allocation", "units": null, "w": "184", "x": "60", "y": "339", "z": 1}, {"color": "#CCCCCC", "definition": "# Sumo _empty a los arrays que no tienen nativamente la dimensi\u00f3n de scenarios o iterations, porque el concat no hace broadcasting.\n_empty = empty_cube_time_scenarios_iterations\n\n_report = xr.concat( [fin_ebitda,fin_working_capital_variation,fin_income_tax,_empty,fin_cash_operating_activities,_empty,fin_cash_investing_activities + _empty,_empty,fin_free_cash_flow,_empty,fin_net_interests_received_paid,fin_lt_new_loans.sum(loans.name) + _empty,- fin_lt_amortization.sum(loans.name) + _empty,fin_dividends_paid,_empty,fin_cash_financing_activities,_empty,fin_increase_decrease_in_cash], dim = cash_flow_concepts )\n\nresult = _report / 1000000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_flow_report", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report", "units": "MM$", "w": "184", "x": "49", "y": "550", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['EBITDA','Movement in Working Capital','Income Tax','-','Cash from Operating Activities','--','Cash from Investing Activities','---','Free Cash Flow','----','Net Interest Received/Paid','New Loans','Amortizations','Dividends Paid','-----','Cash from Financing Activities','------','Increase/Decrease in Cash'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "cash_flow_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Concepts", "units": null, "w": "100", "x": "59", "y": "268", "z": 1}, {"color": null, "definition": "result = fin_st_interest_earned_lost - fin_lt_interests_paid.sum(loans.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_interests_received_paid", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Interests Received (Paid)", "units": null, "w": "184", "x": "275", "y": "327", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_st_interest_earned_lost", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a3d46203298564ae880bbbf53c0cb429a", "moduleId": "fin_cash_flow_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_st_interest_earned_lost", "picture": null, "title": "Short Term Interest Earned (Lost)", "units": null, "w": "184", "x": "49", "y": "278", "z": 1}, {"color": null, "definition": "result = fin_cash_operating_activities + fin_cash_investing_activities", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_free_cash_flow", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Free Cash Flow", "units": null, "w": "184", "x": "496", "y": "232", "z": 1}, {"color": "#CCCCCC", "definition": "result = npv( 0.10, fin_free_cash_flow, time, offset = 1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_npv_free_cash_flow_curve", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Present Value of Free Cash Flow Curve", "units": null, "w": "184", "x": "275", "y": "550", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['New Loans','Amortization','Principal Balance','Accrued Interests','Paid Interests','Interests to Pay'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "debts_concepts", "moduleId": "fin_debts_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Debts Concepts", "units": null, "w": "100", "x": "264", "y": "84", "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.concat( [fin_lt_new_loans,- fin_lt_amortization,fin_lt_principal_balance,fin_lt_accrued_interests,- fin_lt_interests_paid,fin_lt_nterests_to_pay], dim = debts_concepts)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_debts_report", "moduleId": "fin_debts_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Debts Report", "units": null, "w": "184", "x": "283", "y": "457", "z": 1}, {"color": null, "definition": "result = ((fin_installment_emi - fin_accrued_interests_int_to_pay_emi - fin_accrued_interests_princ_balance_emi) * fin_amort_pmt_dates).fillna(0.)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_amortization_amount_emi", "moduleId": "fin_principal_interest_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Amortization Amount - EMI", "units": null, "w": "184", "x": "766", "y": "416", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray(['Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 2','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 4','Market Segment 4','Market Segment 4','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 1','Market Segment 2','Market Segment 2','Market Segment 2','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 3','Market Segment 4','Market Segment 4','Market Segment 4'], [market_products])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_mkt_prod_to_mkt_segment_alloc", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Products to Market Segment Allocation", "units": null, "w": "184", "x": "295", "y": "432", "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index( ast_mkt_prod_to_mkt_segment_alloc, market_products, products )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_prod_to_mkt_segment_alloc", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Products to Market Segment Allocation", "units": null, "w": "184", "x": "531", "y": "432", "z": 1}, {"color": "#4CBCFF", "definition": "result = ast_prod_to_mkt_segment_alloc", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6fe33e5722094420adea76b07a39530d", "moduleId": "mks_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ast_prod_to_mkt_segment_alloc", "picture": null, "title": "Products to Market Segment Allocation", "units": null, "w": "184", "x": "728", "y": "393", "z": 1}, {"color": null, "definition": "result = concat_index( products, competitors_products )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "market_products_aux", "moduleId": "mks_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Products Aux", "units": null, "w": "100", "x": "270", "y": "284", "z": 1}, {"color": null, "definition": "_quarters = []\n\nfor year in years.values:\n    for quarter in range(1,5):\n        _quarters.append( year + '.Q' + str(quarter))\n\nif initial_modeling_year[5:] == '12':\n    _quarters_ok = _quarters[3:]\nelse:\n    _quarters_ok = _quarters\n    \nresult = pd.Index( _quarters_ok )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "quarters", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Quarters", "units": null, "w": "100", "x": "502", "y": "243", "z": 1}, {"color": null, "definition": "_semesters = []\n\nfor year in years.values:\n    for semester in range(1,3):\n        _semesters.append( year + '.S' + str(semester))\n\nif initial_modeling_year[5:] == '12':\n    _semesters_ok = _semesters[1:]\nelse:\n    _semesters_ok = _semesters\n    \nresult = pd.Index( _semesters_ok )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "semesters", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Semesters", "units": null, "w": "100", "x": "395", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "_time = to_dataarray(time)\n\nresult = apply_fn(_time, lambda x: x[:4] + '.Q1' if int(x[5:]) <= 3 else x[:4] + '.Q2' if int(x[5:]) <= 6 else x[:4] + '.Q3' if int(x[5:]) <= 9 else x[:4] + '.Q4' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_quarter", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Quarter", "units": null, "w": "184", "x": "270", "y": "321", "z": 1}, {"color": "#4CBCFF", "definition": "_time = to_dataarray(time)\n\nresult = apply_fn(_time, lambda x: x[:4] + '.S1' if int(x[5:]) <= 6 else x[:4] + '.S2' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_semester", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Semester", "units": null, "w": "184", "x": "489", "y": "321", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Commercial Demand','+ Target Stock','- Products stock at the end of previous period','-','= Total Products Request','--','Non Satisfied Products Requirement','---','Potential Production','----','Effective Production','+ Products stock at the end of previous period','-----','= Total Available Products','- Satisfied Demand','------','= Products stock at the end of current period','Non Satisfied Demand'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "operation_concepts", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operation Concepts", "units": null, "w": "100", "x": "85", "y": "138", "z": 1}, {"color": "#CCCCCC", "definition": "_empty = empty_cube_time_scenarios_iterations + create_dataarray( 0., [products] )\n_xarray_report = xr.concat( [sop_commercial_demand, sop_stock_goal, - sop_projected_init_stock, _empty, sop_production_requeriment, _empty, sop_production_requeriment - sop_planned_production, _empty, sop_planned_production, _empty, sop_effective_production, sop_projected_init_stock, _empty, sop_total_available_product, sop_supplied_demand, _empty, sop_projected_stock, sop_unserved_demand ], dim = operation_concepts)\n\n_df = _xarray_report.to_dataframe( name = 'value' )\n_df = _df[_df['value'] != 0].reset_index()\n_df_lines_alloc = sop_products_to_line_alloc.to_dataframe( name = 'production_lines' ).reset_index()\n_df_mkt_segmets_alloc = ast_prod_to_mkt_segment_alloc.to_dataframe( name = 'market_segments' ).reset_index()\n_df = _df.merge( _df_lines_alloc, on = 'products', how = 'left' )\n_df = _df.merge( _df_mkt_segmets_alloc, on = 'products', how = 'left' )\n_df_years_alloc = time_to_years.to_dataframe( name = 'years' ).reset_index()\n_df_semesters_alloc = time_to_semester.to_dataframe( name = 'semesters' ).reset_index()\n_df_quarters_alloc = time_to_quarter.to_dataframe( name = 'quarters' ).reset_index()\n_df = _df.merge( _df_years_alloc, on = 'time', how = 'left' )\n_df = _df.merge( _df_semesters_alloc, on = 'time', how = 'left' )\n_df = _df.merge( _df_quarters_alloc, on = 'time', how = 'left' )\n_df = _df.set_index( _df.columns[_df.columns != 'value'].values.tolist() )\n\n_df_report_order = get_pos(operation_concepts).to_dataframe( name = 'order' ).reset_index()['operation_concepts'].values\n_df = _df.reindex( _df_report_order, level = 'operation_concepts' )\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_operations_report", "moduleId": "sop_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operations Report", "units": "gallons", "w": "184", "x": "61", "y": "630", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_projected_stock.shift( time = 1 ).fillna(0.)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_projected_init_stock", "moduleId": "sop_production_requeriment_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Initial Stock", "units": null, "w": "184", "x": "501", "y": "166", "z": 1}, {"color": "#4CBCFF", "definition": "_init_allocation = apply_fn( to_dataarray(market_products_aux), lambda x: x[:(x.find(' - '))] if ( x.find(' - ') != -1 ) else 'Company' )\n\nresult = xr.where( find( 'New Product', market_products_aux, compareType = 4, caseSensitive = False), 'Company', _init_allocation )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_mkt_prod_to_brand_alloc", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Products to Brand Allocation", "units": null, "w": "184", "x": "531", "y": "478", "z": 1}, {"color": "#CCCCCC", "definition": "result = opx_nominal_opex_proj", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_opex_report", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX Report", "units": null, "w": "184", "x": "60", "y": "296", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_strategic_map_mod", "moduleId": "fin_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Strategic Map", "units": null, "w": "184", "x": "58", "y": "287", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Strategic Map", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "532", "identifier": "node111", "moduleId": "fin_strategic_map_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "918", "x": "28", "y": "42", "z": "-3"}, {"color": "#4CBCFF", "definition": "result = fin_dividends_paid", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4e66209037c240c095a36bf767d26337", "moduleId": "fin_strategic_map_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_dividends_paid", "picture": null, "title": "Dividends Paid", "units": null, "w": "184", "x": "51", "y": "160", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_net_income", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad7a27de8086a4c4d8ad6fd4ac282a4db", "moduleId": "fin_strategic_map_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_net_income", "picture": null, "title": "Net Income", "units": null, "w": "184", "x": "51", "y": "266", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_increase_decrease_in_cash", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a34884c111299415b8b709d4684cf1362", "moduleId": "fin_strategic_map_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_increase_decrease_in_cash", "picture": null, "title": "Increase (Decrease) in Cash", "units": null, "w": "184", "x": "51", "y": "372", "z": 1}, {"color": "#4CBCFF", "definition": "result = aggregate( fin_dividends_paid, time_to_years, time, years )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_dividends", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Dividends", "units": null, "w": "184", "x": "51", "y": "207", "z": 1}, {"color": "#4CBCFF", "definition": "_dividends_py = pp.dynamic( fin_annual_dividends, years, -1, 0 )\n\nresult = xr.where( get_pos(years) <= 1, 0, fin_annual_dividends / _dividends_py - 1  )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_dividends_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Dividends Growth Rate", "units": "%", "w": "184", "x": "279", "y": "207", "z": 1}, {"color": "#4CBCFF", "definition": "_rate = fin_annual_dividends_growth_rate\n    \nif pmk_per_capita_cons_method == 'Input':\n    if selected_scenario != 'All':\n        _growth_rate = _rate\n    else:\n        _growth_rate = subscript( _rate, scenarios, scenario_for_scorecard )\nelif selected_scenario != 'All':\n    _growth_rate = subscript( _rate, iterations, iteration_for_scorecard )\nelse:\n    _growth_rate = subscript( _rate, [iterations, scenarios], [iteration_for_scorecard, scenario_for_scorecard] )\n\nresult = np.asscalar( ( _growth_rate.sum(years.name) / ( _growth_rate > 0 ).sum(years.name) ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_dividends_avg_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Dividends Average Growth Rate", "units": "%", "w": "184", "x": "505", "y": "207", "z": 1}, {"color": "#FFFF4B", "definition": "result = 0.40", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_dividends_share", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dividends Share", "units": null, "w": "184", "x": "505", "y": "160", "z": 1}, {"color": "#4CBCFF", "definition": "result = aggregate( fin_net_income, time_to_years, time, years )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_net_income", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Net Income", "units": null, "w": "184", "x": "51", "y": "313", "z": 1}, {"color": "#4CBCFF", "definition": "_net_income_py = pp.dynamic( fin_annual_net_income, years, -1, 0 )\n\nresult = xr.where( get_pos(years) <= 1, 0, fin_annual_net_income / _net_income_py - 1  )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_net_income_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Net Income Growth Rate", "units": "%", "w": "184", "x": "279", "y": "313", "z": 1}, {"color": "#4CBCFF", "definition": "_rate = fin_annual_net_income_growth_rate\n    \nif pmk_per_capita_cons_method == 'Input':\n    if selected_scenario != 'All':\n        _growth_rate = _rate\n    else:\n        _growth_rate = subscript( _rate, scenarios, scenario_for_scorecard )\nelif selected_scenario != 'All':\n    _growth_rate = subscript( _rate, iterations, iteration_for_scorecard )\nelse:\n    _growth_rate = subscript( _rate, [iterations, scenarios], [iteration_for_scorecard, scenario_for_scorecard] )\n\nresult = np.asscalar( ( _growth_rate.sum(years.name) / ( _growth_rate > 0 ).sum(years.name) ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_net_income_avg_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Net Income Average Growth Rate", "units": "%", "w": "184", "x": "505", "y": "313", "z": 1}, {"color": "#FFFF4B", "definition": "result = 0.30", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_income_share", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Income Share", "units": null, "w": "184", "x": "505", "y": "266", "z": 1}, {"color": "#4CBCFF", "definition": "result = aggregate( fin_increase_decrease_in_cash, time_to_years, time, years )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_cash_flow", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Cash Flow", "units": null, "w": "184", "x": "51", "y": "420", "z": 1}, {"color": "#4CBCFF", "definition": "_cash_flow_py = pp.dynamic( fin_annual_cash_flow, years, -1, 0 )\n\nresult = xr.where( get_pos(years) <= 1, 0, fin_annual_cash_flow / _cash_flow_py - 1  )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_cash_flow_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Cash Flow Growth Rate", "units": "%", "w": "184", "x": "279", "y": "420", "z": 1}, {"color": "#4CBCFF", "definition": "_rate = fin_annual_cash_flow_growth_rate\n    \nif pmk_per_capita_cons_method == 'Input':\n    if selected_scenario != 'All':\n        _growth_rate = _rate\n    else:\n        _growth_rate = subscript( _rate, scenarios, scenario_for_scorecard )\nelif selected_scenario != 'All':\n    _growth_rate = subscript( _rate, iterations, iteration_for_scorecard )\nelse:\n    _growth_rate = subscript( _rate, [iterations, scenarios], [iteration_for_scorecard, scenario_for_scorecard] )\n\nresult = np.asscalar( ( _growth_rate.sum(years.name) / ( _growth_rate > 0 ).sum(years.name) ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_cash_flow_avg_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Cash Flow Average Growth Rate", "units": "%", "w": "184", "x": "505", "y": "420", "z": 1}, {"color": "#4CBCFF", "definition": "result = 1 - fin_dividends_share - fin_net_income_share", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_flow_share", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Share", "units": null, "w": "184", "x": "505", "y": "372", "z": 1}, {"color": "#CB98FF", "definition": "result = fin_annual_dividends_avg_growth_rate * fin_dividends_share + fin_annual_net_income_avg_growth_rate * fin_net_income_share + fin_annual_cash_flow_avg_growth_rate * fin_cash_flow_share", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_profit", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Profit", "units": "%", "w": "184", "x": "733", "y": "313", "z": 1}, {"color": "#CCCCCC", "definition": "_data = {'A': pd.Series( [\"Metrics\",\"Shareowner's Return\",\"Economic Profit Growth\",\"System Cash Flow\"] ),\n        'B': pd.Series( [\"Weight\",fin_dividends_share,fin_net_income_share,fin_cash_flow_share] ),\n        'C': pd.Series( [\"Forecast\",fin_annual_dividends_avg_growth_rate,fin_annual_net_income_avg_growth_rate,fin_annual_cash_flow_avg_growth_rate] ),\n        'D': pd.Series( [\"Target\",0.10,0.10,0.10] ),\n        'E': pd.Series( [\"Performance\",fin_annual_dividends_avg_growth_rate-0.10,fin_annual_net_income_avg_growth_rate-0.10,fin_annual_cash_flow_avg_growth_rate-0.10] )\n        }\n\nresult = pd.DataFrame( _data )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_profit_scorecard", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Profit Scorecard", "units": null, "w": "184", "x": "733", "y": "420", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Regressions", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "317", "identifier": "node114", "moduleId": "cdm_regressions_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "809", "x": 28, "y": 42, "z": -1}, {"color": null, "definition": "result = create_time( '2015.01', initial_modeling_year, freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "historic_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historic Time", "units": null, "w": "100", "x": "283", "y": "243", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"GDP\",\"Population\",\"Temperature\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "independent_variables", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Independent Variables", "units": null, "w": "100", "x": "41", "y": "61", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_regressions_mod", "moduleId": "cdm_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regressions", "units": null, "w": "184", "x": 47, "y": 209, "z": 1}, {"color": "#FFFF4B", "definition": "result =xr.DataArray([[[  1.56621800e+04,  7.34051000e+03,  6.21937000e+03,  2.95544000e+03,     1.32510000e+03,  4.44266000e+03,  5.25303000e+03,  3.93059000e+03,     2.43101000e+03,  2.28702000e+03,  9.61454000e+03,  5.72747000e+03,     4.92047000e+03,  8.93130000e+02,  3.57100000e+02,  6.00063000e+03,     8.75176000e+03,  5.27370000e+02,  8.57440000e+02],  [  4.19990000e+02,  4.72030000e+02,  7.69530000e+02,  6.93350000e+02,     8.65500000e+01,  1.27880000e+03,  4.86302000e+03,  2.65991000e+03,     8.41520000e+02,  9.48180000e+02,  5.54330000e+03,  4.94725000e+03,     5.50967000e+03,  2.84960000e+02,  2.10600000e+01,  7.61550000e+02,     1.06836000e+03,  6.64600000e+01,  6.06200000e+01],  [  7.41832500e+04,  8.48877900e+04,  1.25755120e+05,  1.24777100e+04,     2.79027000e+03,  2.14250100e+04,  1.36005200e+05,  6.87210000e+04,     1.23539900e+04,  1.37428500e+04,  1.41271730e+05,  1.46473970e+05,     1.36726130e+05,  3.92172000e+03,  3.92946000e+03,  1.01232350e+05,     1.10039040e+05,  3.21679000e+03,  2.07213000e+03],  [  1.75712770e+05,  1.24238810e+05,  1.11312930e+05,  3.31805200e+04,     4.53847100e+04,  4.20743800e+04,  1.55847600e+05,  7.96619800e+04,     3.98331000e+03,  7.20072000e+03,  2.13023840e+05,  2.51934450e+05,     1.59672900e+05,  1.56387800e+04,  3.87910400e+04,  1.18202190e+05,     1.37230090e+05,  2.67983700e+04,  2.45381900e+04]], [[  1.28042200e+04,  6.96894000e+03,  6.53729000e+03,  2.40807000e+03,     1.19877000e+03,  4.76968000e+03,  5.08764000e+03,  3.88612000e+03,     2.51977000e+03,  2.31800000e+03,  4.36573000e+03,  6.03125000e+03,     4.93963000e+03,  7.34140000e+02,  1.95820000e+02,  5.84527000e+03,     8.95343000e+03,  7.22390000e+02,  1.17451899e+03],  [  3.80920000e+02,  4.57630000e+02,  7.85650000e+02,  7.19970000e+02,     8.14400000e+01,  1.32127000e+03,  4.88565000e+03,  2.69341000e+03,     8.75540000e+02,  9.78250000e+02,  5.73672000e+03,  4.99295000e+03,     5.57358000e+03,  2.86950000e+02,  9.11000000e+00,  7.59590000e+02,     1.07385000e+03,  7.12100000e+01,  6.49526061e+01],  [  6.52852100e+04,  7.60946000e+04,  1.17250420e+05,  1.34321300e+04,     3.53802000e+03,  2.25383900e+04,  1.36346740e+05,  6.84704300e+04,     1.28569300e+04,  1.42006100e+04,  1.44812780e+05,  1.47827017e+05,     1.38312099e+05,  3.69753000e+03,  4.26122627e+03,  9.16305200e+04,     1.03550260e+05,  2.77027000e+03,  1.78449932e+03],  [  1.81061570e+05,  1.16392510e+05,  1.07469050e+05,  2.87365600e+04,     3.61367000e+04,  5.79965100e+04,  1.56893070e+05,  8.25723300e+04,     3.97441000e+03,  6.67175000e+03,  1.85044690e+05,  2.54261683e+05,     1.61525043e+05,  1.69591700e+04,  4.20661869e+04,  1.14759820e+05,     1.34099700e+05,  2.86475300e+04,  2.62313915e+04]], [[  1.02776300e+04,  6.91172000e+03,  6.53387000e+03,  3.15815000e+03,     1.43857000e+03,  4.18070000e+03,  4.89661000e+03,  3.93464000e+03,     2.71480000e+03,  2.43564000e+03,  4.36412000e+03,  5.19508000e+03,     4.59059000e+03,  5.86300000e+02,  4.92820000e+02,  5.80391000e+03,     8.64239000e+03,  6.59690000e+02,  1.07257636e+03],  [  3.85430000e+02,  4.37100000e+02,  7.66290000e+02,  7.93480000e+02,     1.13460000e+02,  1.42296000e+03,  4.97170000e+03,  2.75619000e+03,     9.52980000e+02,  1.04395000e+03,  5.68825000e+03,  5.14605000e+03,     5.71596000e+03,  2.88540000e+02,  2.13400000e+01,  7.47060000e+02,     1.07105000e+03,  9.19900000e+01,  8.39066175e+01],  [  4.23282000e+04,  5.33590300e+04,  9.48931200e+04,  1.38743800e+04,     4.66038000e+03,  2.41574600e+04,  1.36842260e+05,  6.89184000e+04,     1.40392900e+04,  1.52327100e+04,  1.41227360e+05,  1.52359871e+05,     1.41845354e+05,  3.27306000e+03,  4.75866084e+03,  6.63152900e+04,     8.63249400e+04,  2.93690000e+03,  1.89183584e+03],  [  1.53450980e+05,  1.00131290e+05,  9.58133100e+04,  4.66129600e+04,     4.39651800e+04,  4.53057300e+04,  1.64633200e+05,  8.40604700e+04,     4.18638000e+03,  7.00787000e+03,  2.09277420e+05,  2.62058169e+05,     1.65651284e+05,  1.89389000e+04,  4.69767864e+04,  1.05347240e+05,     1.29704680e+05,  2.09123000e+04,  1.91485524e+04]], [[  1.40205700e+04,  6.77509000e+03,  6.22040000e+03,  3.23845000e+03,     7.80290000e+02,  4.08989000e+03,  5.00308000e+03,  3.84615000e+03,     2.59476000e+03,  2.36370000e+03,  4.93584000e+03,  5.77138000e+03,     4.70876000e+03,  6.54640000e+02,  8.48320000e+02,  5.98947000e+03,     8.67914000e+03,  7.35870000e+02,  1.19643585e+03],  [  3.43520000e+02,  4.42190000e+02,  7.72360000e+02,  7.48410000e+02,     9.43300000e+01,  1.36484000e+03,  4.91673000e+03,  2.70002000e+03,     9.07080000e+02,  1.00761000e+03,  5.72374000e+03,  4.94588000e+03,     5.64869000e+03,  2.91820000e+02,  2.81500000e+01,  7.61960000e+02,     1.08197000e+03,  7.79300000e+01,  7.10821035e+01],  [  5.85052600e+04,  7.04837300e+04,  1.12298940e+05,  1.27819600e+04,     4.08140000e+03,  2.33305400e+04,  1.36681630e+05,  6.88871100e+04,     1.33583900e+04,  1.49147400e+04,  1.40175470e+05,  1.46433408e+05,     1.40176004e+05,  3.70571000e+03,  4.01140216e+03,  8.54271700e+04,     9.96564000e+04,  3.15125000e+03,  2.02991170e+03],  [  1.58289470e+05,  1.12089100e+05,  1.06228060e+05,  4.09104200e+04,     5.42187500e+04,  4.00217900e+04,  1.67382970e+05,  7.97561800e+04,     4.10200000e+03,  6.95288000e+03,  2.07804410e+05,  2.51864684e+05,     1.63701767e+05,  1.59649000e+04,  3.95999608e+04,  1.13407100e+05,     1.35888110e+05,  2.18161100e+04,  1.99761348e+04]], [[  7.86489000e+03,  7.03754000e+03,  6.07359000e+03,  3.20019000e+03,     1.38730000e+03,  4.85328000e+03,  4.53559000e+03,  3.95813000e+03,     2.96293000e+03,  2.58878000e+03,  2.50789000e+03,  4.87691000e+03,     4.29436000e+03,  7.54810000e+02,  3.40340000e+02,  5.44972000e+03,     8.58771000e+03,  1.11903000e+03,  1.81940778e+03],  [  3.36300000e+02,  4.10420000e+02,  7.49830000e+02,  8.88670000e+02,     1.26640000e+02,  1.55558000e+03,  5.08840000e+03,  2.83034000e+03,     1.04962000e+03,  1.12826000e+03,  6.12339000e+03,  5.06823000e+03,     5.93178000e+03,  3.03090000e+02,  2.07900000e+01,  7.37520000e+02,     1.07528000e+03,  1.23570000e+02,  1.12711607e+02],  [  1.51205100e+04,  2.66920300e+04,  6.85551400e+04,  1.51683100e+04,     4.46245000e+03,  2.63523900e+04,  1.37779420e+05,  6.93365100e+04,     1.54476600e+04,  1.65271300e+04,  1.42164260e+05,  1.50055843e+05,     1.47201071e+05,  3.64673000e+03,  4.86774955e+03,  3.66309200e+04,     6.62642500e+04,  4.00315000e+03,  2.57867228e+03],  [  1.27112330e+05,  7.86799500e+04,  8.47658300e+04,  3.00916500e+04,     5.14951700e+04,  4.66195400e+04,  1.56654580e+05,  8.28263200e+04,     4.32248000e+03,  7.40226000e+03,  2.14568870e+05,  2.58095252e+05,     1.71905852e+05,  1.93730600e+04,  4.80536938e+04,  9.45425900e+04,     1.26312910e+05,  2.19231100e+04,  2.00741104e+04]], [[  8.63311000e+03,  6.78068000e+03,  6.03532000e+03,  2.66137000e+03,     1.61846000e+03,  4.53617000e+03,  5.00508000e+03,  3.93298000e+03,     2.71509000e+03,  2.48712000e+03,  5.05850000e+03,  5.44967000e+03,     4.68703000e+03,  6.28220000e+02,  4.73910000e+02,  5.89473000e+03,     9.00388000e+03,  6.79710000e+02,  1.10512646e+03],  [  3.31750000e+02,  4.32340000e+02,  7.79870000e+02,  7.89380000e+02,     1.04520000e+02,  1.42898000e+03,  5.00869000e+03,  2.76768000e+03,     9.52920000e+02,  1.04960000e+03,  5.74024000e+03,  5.03085000e+03,     5.75425000e+03,  2.98430000e+02,  1.46500000e+01,  7.63550000e+02,     1.08962000e+03,  8.85400000e+01,  8.07597773e+01],  [  4.84136100e+04,  6.02385700e+04,  1.02443060e+05,  1.42120900e+04,     4.07083000e+03,  2.35588700e+04,  1.37999220e+05,  6.96057600e+04,     1.40131100e+04,  1.53390000e+04,  1.41049110e+05,  1.48949128e+05,     1.42795546e+05,  3.66123000e+03,  3.69751834e+03,  7.40139100e+04,     9.21324600e+04,  2.67833000e+03,  1.72527518e+03],  [  1.54866130e+05,  1.07081110e+05,  1.03522010e+05,  2.92918200e+04,     3.20394200e+04,  4.39540700e+04,  1.62348140e+05,  8.52579900e+04,     4.18310000e+03,  7.14198000e+03,  1.96514610e+05,  2.56191708e+05,     1.66760947e+05,  1.47156800e+04,  3.65013467e+04,  1.10317080e+05,     1.34816930e+05,  2.85131100e+04,  2.61083085e+04]], [[  8.59407000e+03,  6.62413000e+03,  6.35243000e+03,  3.18128000e+03,     1.31110000e+03,  4.13446000e+03,  4.69187000e+03,  3.93198000e+03,     2.89275000e+03,  2.54980000e+03,  2.15068000e+03,  5.01059000e+03,     4.39723000e+03,  7.64890000e+02,  5.13070000e+02,  5.61197000e+03,     8.87309000e+03,  8.66860000e+02,  1.40940979e+03],  [  3.99010000e+02,  4.22220000e+02,  7.68090000e+02,  8.54190000e+02,     1.23680000e+02,  1.51739000e+03,  5.05979000e+03,  2.84801000e+03,     1.01944000e+03,  1.10702000e+03,  5.96458000e+03,  5.14518000e+03,     5.88103000e+03,  3.08710000e+02,  2.06400000e+01,  7.55980000e+02,     1.08104000e+03,  1.02700000e+02,  9.36755041e+01],  [  2.97012700e+04,  4.09189200e+04,  8.33693700e+04,  1.50346500e+04,     4.59962000e+03,  2.54517700e+04,  1.38317600e+05,  6.96121600e+04,     1.50171700e+04,  1.62023000e+04,  1.41763730e+05,  1.52334113e+05,     1.45941676e+05,  3.65100000e+03,  4.05116969e+03,  5.26493200e+04,     7.76704700e+04,  2.94112000e+03,  1.89455419e+03],  [  1.25120620e+05,  9.21342900e+04,  9.21425500e+04,  3.45243200e+04,     4.21030700e+04,  4.35404200e+04,  1.64234940e+05,  8.92705900e+04,     4.24972000e+03,  6.96761000e+03,  2.29967270e+05,  2.62013865e+05,     1.70435092e+05,  1.61231700e+04,  3.99925399e+04,  1.02483390e+05,     1.32047760e+05,  2.72364300e+04,  2.49393039e+04]], [[  9.26294000e+03,  6.69224000e+03,  6.52807000e+03,  2.84286000e+03,     1.48000000e+03,  5.10045000e+03,  4.89979000e+03,  3.97296000e+03,     2.78110000e+03,  2.48176000e+03,  3.91657000e+03,  5.05400000e+03,     4.64444000e+03,  7.59760000e+02,  4.40780000e+02,  5.93275000e+03,     8.65252000e+03,  8.98500000e+02,  1.46085261e+03],  [  4.36220000e+02,  4.57330000e+02,  8.00010000e+02,  8.02460000e+02,     1.04740000e+02,  1.45224000e+03,  5.04851000e+03,  2.78510000e+03,     9.66310000e+02,  1.06432000e+03,  5.86254000e+03,  5.06917000e+03,     5.79733000e+03,  3.06770000e+02,  2.05300000e+01,  7.69770000e+02,     1.09824000e+03,  9.41900000e+01,  8.59132982e+01],  [  4.88588700e+04,  6.06803800e+04,  1.03225260e+05,  1.36725500e+04,     5.05019000e+03,  2.43939900e+04,  1.38815410e+05,  6.96619200e+04,     1.42207400e+04,  1.52892100e+04,  1.43276730e+05,  1.50083674e+05,     1.43864604e+05,  3.82202000e+03,  3.79637308e+03,  7.45077400e+04,     9.28259900e+04,  3.22598000e+03,  2.07804984e+03],  [  1.53913560e+05,  1.07199040e+05,  1.04571000e+05,  3.56701500e+04,     4.34011500e+04,  5.69889500e+04,  1.62764810e+05,  8.54999200e+04,     3.81921000e+03,  7.46210000e+03,  2.22153490e+05,  2.58143121e+05,     1.68009426e+05,  1.51091100e+04,  3.74772259e+04,  1.12215980e+05,     1.36851560e+05,  2.85046200e+04,  2.61005345e+04]], [[  9.67128000e+03,  7.31247000e+03,  7.41783000e+03,  3.02612000e+03,     9.93130000e+02,  4.34605000e+03,  5.36480000e+03,  3.95955000e+03,     2.46999000e+03,  2.39171000e+03,  5.22806000e+03,  5.83911000e+03,     5.04400000e+03,  8.13900000e+02,  5.68310000e+02,  6.48144000e+03,     9.10576000e+03,  4.61570000e+02,  7.50457138e+02],  [  4.11360000e+02,  5.03330000e+02,  8.18600000e+02,  6.95930000e+02,     8.69900000e+01,  1.29831000e+03,  4.94482000e+03,  2.70920000e+03,     8.51480000e+02,  9.70880000e+02,  5.71044000e+03,  5.06438000e+03,     5.57725000e+03,  3.10700000e+02,  2.38900000e+01,  8.07100000e+02,     1.11533000e+03,  6.51800000e+01,  5.94524767e+01],  [  8.86406100e+04,  1.00235750e+05,  1.43021510e+05,  1.26415200e+04,     3.85352000e+03,  2.24723000e+04,  1.39268610e+05,  6.99701700e+04,     1.24798500e+04,  1.42733900e+04,  1.45234600e+05,  1.49941855e+05,     1.38403173e+05,  4.05859000e+03,  4.33457772e+03,  1.18500050e+05,     1.23241670e+05,  2.56781000e+03,  1.65408253e+03],  [  1.93647650e+05,  1.41019740e+05,  1.24985430e+05,  3.87209900e+04,     3.72308400e+04,  5.15483800e+04,  1.62990310e+05,  8.94877200e+04,     4.06305000e+03,  7.15277000e+03,  2.08118820e+05,  2.57899195e+05,     1.61631401e+05,  1.72511000e+04,  4.27903014e+04,  1.31939410e+05,     1.46874750e+05,  1.94587100e+04,  1.78175584e+04]], [[  1.51617600e+04,  8.09867000e+03,  7.17602000e+03,  2.58216000e+03,     1.30571000e+03,  4.60245000e+03,  5.21488000e+03,  3.86346000e+03,     2.56503000e+03,  2.43189000e+03,  3.58078000e+03,  5.89617000e+03,     5.00601000e+03,  9.15260000e+02,  6.35020000e+02,  6.27129000e+03,     9.09890000e+03,  7.00140000e+02,  1.13834318e+03],  [  4.41350000e+02,  4.73540000e+02,  8.16650000e+02,  7.35190000e+02,     8.88500000e+01,  1.33517000e+03,  4.95916000e+03,  2.72135000e+03,     8.85560000e+02,  1.00110000e+03,  5.72876000e+03,  5.09054000e+03,     5.64811000e+03,  3.13370000e+02,  2.15000000e+01,  8.02040000e+02,     1.10816000e+03,  6.96700000e+01,  6.35479296e+01],  [  7.92785400e+04,  9.15376000e+04,  1.34611160e+05,  1.34522200e+04,     6.00986000e+03,  2.28883200e+04,  1.39304740e+05,  6.94850000e+04,     1.29877400e+04,  1.47034400e+04,  1.42735020e+05,  1.50716378e+05,     1.40161611e+05,  4.23602000e+03,  4.37730514e+03,  1.08908880e+05,     1.16833370e+05,  3.07170000e+03,  1.97866871e+03],  [  1.93532780e+05,  1.32617920e+05,  1.21203530e+05,  3.78146300e+04,     4.20079700e+04,  4.31646800e+04,  1.61582790e+05,  8.77014900e+04,     4.37875000e+03,  7.46077000e+03,  2.10337710e+05,  2.59231370e+05,     1.63684958e+05,  1.74211500e+04,  4.32121001e+04,  1.28872230e+05,     1.45108800e+05,  2.66163400e+04,  2.43715124e+04]], [[  1.02917400e+04,  7.33197000e+03,  6.72746000e+03,  2.59875000e+03,     1.53085000e+03,  4.90294000e+03,  5.00737000e+03,  3.97699000e+03,     2.76944000e+03,  2.53386000e+03,  4.65637000e+03,  5.53139000e+03,     4.67627000e+03,  8.69390000e+02,  2.74300000e+02,  6.14036000e+03,     9.24768000e+03,  8.70560000e+02,  1.41542554e+03],  [  4.18880000e+02,  4.71480000e+02,  7.94570000e+02,  7.98780000e+02,     1.07660000e+02,  1.44250000e+03,  5.02740000e+03,  2.77961000e+03,     9.62870000e+02,  1.06733000e+03,  5.92345000e+03,  5.14166000e+03,     5.80227000e+03,  3.16780000e+02,  1.38500000e+01,  7.90310000e+02,     1.11441000e+03,  9.05200000e+01,  8.25657899e+01],  [  5.62089100e+04,  6.87681400e+04,  1.12260510e+05,  1.40658800e+04,     4.75686000e+03,  2.41395900e+04,  1.39420800e+05,  7.01962000e+04,     1.41802900e+04,  1.58020900e+04,  1.47326040e+05,  1.52229896e+05,     1.43987194e+05,  4.01818000e+03,  4.15406978e+03,  8.37742700e+04,     9.97169300e+04,  2.45063000e+03,  1.57859977e+03],  [  1.63138110e+05,  1.16209620e+05,  1.09570460e+05,  3.57502400e+04,     4.41048000e+04,  3.86368200e+04,  1.61898110e+05,  8.59759600e+04,     4.09184000e+03,  7.41125000e+03,  2.04943540e+05,  2.61834612e+05,     1.68152589e+05,  1.65327000e+04,  4.10083540e+04,  1.18576900e+05,     1.41499560e+05,  2.30585900e+04,  2.11138238e+04]], [[  1.01149000e+04,  7.91748000e+03,  7.41203000e+03,  2.45239000e+03,     1.43174000e+03,  4.77814000e+03,  5.16624000e+03,  3.94895000e+03,     2.65285000e+03,  2.47671000e+03,  5.46788000e+03,  5.39780000e+03,     4.83174000e+03,  9.20930000e+02,  3.18140000e+02,  6.17944000e+03,     9.19204000e+03,  6.63990000e+02,  1.07956764e+03],  [  4.43490000e+02,  4.54340000e+02,  8.22620000e+02,  7.63460000e+02,     9.14600000e+01,  1.38867000e+03,  5.02497000e+03,  2.76254000e+03,     9.17000000e+02,  1.03077000e+03,  5.81072000e+03,  5.05831000e+03,     5.72368000e+03,  3.18070000e+02,  2.63600000e+01,  8.10740000e+02,     1.12071000e+03,  8.23800000e+01,  7.51410713e+01],  [  7.38678500e+04,  8.64543500e+04,  1.29830930e+05,  1.40656000e+04,     4.94876000e+03,  2.38945100e+04,  1.40163320e+05,  7.05619600e+04,     1.34628600e+04,  1.47821100e+04,  1.43568290e+05,  1.49762140e+05,     1.42036931e+05,  4.21333000e+03,  4.29461421e+03,  1.02972350e+05,     1.13095440e+05,  2.73704000e+03,  1.76309386e+03],  [  1.77679110e+05,  1.33564680e+05,  1.20232370e+05,  3.30902400e+04,     3.98349700e+04,  5.30933500e+04,  1.67562890e+05,  8.48931100e+04,     4.38618000e+03,  7.36443000e+03,  2.37060070e+05,  2.57590085e+05,     1.65875013e+05,  1.70920500e+04,  4.23957876e+04,  1.28120620e+05,     1.47322130e+05,  2.38464900e+04,  2.18352722e+04]], [[  9.16123000e+03,  7.32262000e+03,  6.61636000e+03,  3.05172000e+03,     6.82130000e+02,  4.71597000e+03,  4.68445000e+03,  4.02585000e+03,     3.00391000e+03,  2.67335000e+03,  2.57957000e+03,  5.14429000e+03,     4.28480000e+03,  7.52870000e+02,  2.70830000e+02,  5.92305000e+03,     8.75078000e+03,  1.06820000e+03,  1.73676434e+03],  [  3.19420000e+02,  4.34680000e+02,  7.97780000e+02,  8.91420000e+02,     1.37170000e+02,  1.57672000e+03,  5.18541000e+03,  2.91066000e+03,     1.05955000e+03,  1.15228000e+03,  5.93590000e+03,  5.12502000e+03,     6.02118000e+03,  3.33700000e+02,  1.78100000e+01,  7.78450000e+02,     1.11649000e+03,  1.17840000e+02,  1.07485116e+02],  [  2.92920600e+04,  4.27194000e+04,  8.61684600e+04,  1.49584400e+04,     4.79324000e+03,  2.59020300e+04,  1.40712860e+05,  7.06488600e+04,     1.56349800e+04,  1.68019500e+04,  1.43852400e+05,  1.51737233e+05,     1.49419591e+05,  4.00349000e+03,  4.16564299e+03,  5.42711300e+04,     7.98618500e+04,  3.08878000e+03,  1.98967098e+03],  [  1.41585130e+05,  9.97367800e+04,  1.00026210e+05,  3.92906900e+04,     3.60567800e+04,  4.72491600e+04,  1.57878750e+05,  8.39268500e+04,     4.47736000e+03,  6.89242000e+03,  2.37217560e+05,  2.60987234e+05,     1.74496707e+05,  1.65787600e+04,  4.11226031e+04,  1.08086950e+05,     1.37916230e+05,  2.52176500e+04,  2.30907883e+04]], [[  7.89950000e+03,  7.13639000e+03,  7.48637000e+03,  2.82286000e+03,     1.18490000e+03,  4.33907000e+03,  5.03495000e+03,  4.04270000e+03,     2.75872000e+03,  2.54976000e+03,  4.71189000e+03,  5.76006000e+03,     4.73058000e+03,  8.83960000e+02,  2.88280000e+02,  6.32787000e+03,     9.43595000e+03,  1.02050000e+03,  1.65920989e+03],  [  4.70010000e+02,  4.75600000e+02,  8.14390000e+02,  8.03040000e+02,     9.85200000e+01,  1.44188000e+03,  5.06487000e+03,  2.82281000e+03,     9.62240000e+02,  1.07139000e+03,  5.82817000e+03,  5.10564000e+03,     5.81540000e+03,  3.25080000e+02,  1.57600000e+01,  8.03060000e+02,     1.12902000e+03,  8.69400000e+01,  7.93003732e+01],  [  6.26462900e+04,  7.47133600e+04,  1.18720220e+05,  1.38491600e+04,     3.85310000e+03,  2.51299300e+04,  1.41407620e+05,  7.06216900e+04,     1.41065300e+04,  1.58449100e+04,  1.48678370e+05,  1.51163446e+05,     1.44313024e+05,  3.82374000e+03,  4.14535092e+03,  9.03669900e+04,     1.04659590e+05,  2.62897000e+03,  1.69347940e+03],  [  1.67921020e+05,  1.20828550e+05,  1.15635980e+05,  4.24286700e+04,     3.76563800e+04,  3.71888100e+04,  1.64576590e+05,  8.10938200e+04,     4.35856000e+03,  7.36720000e+03,  2.23927240e+05,  2.60000324e+05,     1.68533103e+05,  1.64980000e+04,  4.09222828e+04,  1.23335420e+05,     1.45601260e+05,  2.42590800e+04,  2.22130642e+04]], [[  1.53167900e+04,  7.21238000e+03,  7.02035000e+03,  3.22529000e+03,     1.43813000e+03,  5.01967000e+03,  4.89299000e+03,  3.93065000e+03,     2.93565000e+03,  2.62800000e+03,  1.91898000e+03,  5.31429000e+03,     4.45989000e+03,  9.59550000e+02,  5.50240000e+02,  6.10652000e+03,     8.99407000e+03,  1.29424000e+03,  2.10427811e+03],  [  4.19670000e+02,  4.56740000e+02,  8.09730000e+02,  8.60650000e+02,     1.25340000e+02,  1.53364000e+03,  5.16008000e+03,  2.85548000e+03,     1.02788000e+03,  1.12670000e+03,  6.10601000e+03,  5.14866000e+03,     5.95600000e+03,  3.29320000e+02,  2.37200000e+01,  7.92430000e+02,     1.13009000e+03,  1.00900000e+02,  9.20336744e+01],  [  4.22484400e+04,  5.43313200e+04,  9.83855800e+04,  1.53861300e+04,     5.19566000e+03,  2.56593800e+04,  1.40762210e+05,  7.12499100e+04,     1.51293700e+04,  1.65162000e+04,  1.44371180e+05,  1.52437146e+05,     1.47802106e+05,  3.57157000e+03,  4.55217473e+03,  6.76107700e+04,     8.91668700e+04,  3.20861000e+03,  2.06686076e+03],  [  1.53741640e+05,  1.07749150e+05,  1.04468600e+05,  3.04858300e+04,     4.24598000e+04,  6.83483100e+04,  1.65471180e+05,  9.04166900e+04,     4.54262000e+03,  7.08303000e+03,  2.21805330e+05,  2.62191081e+05,     1.72607759e+05,  1.81171100e+04,  4.49383864e+04,  1.14374480e+05,     1.41670360e+05,  2.07217500e+04,  1.89740734e+04]], [[  1.11776000e+04,  7.78305000e+03,  7.24576000e+03,  3.19905000e+03,     1.40053000e+03,  4.18018000e+03,  5.04413000e+03,  3.99342000e+03,     2.79006000e+03,  2.56480000e+03,  5.22345000e+03,  5.24925000e+03,     4.65434000e+03,  9.81800000e+02,  4.92310000e+02,  6.32180000e+03,     9.32019000e+03,  1.01681000e+03,  1.65321040e+03],  [  3.40040000e+02,  4.68810000e+02,  8.11650000e+02,  8.09600000e+02,     9.91100000e+01,  1.46185000e+03,  5.10490000e+03,  2.83978000e+03,     9.74010000e+02,  1.08257000e+03,  5.91957000e+03,  5.13310000e+03,     5.85482000e+03,  3.30060000e+02,  5.76000000e+00,  8.03150000e+02,     1.13030000e+03,  9.57800000e+01,  8.73635811e+01],  [  5.90894600e+04,  7.29714500e+04,  1.16764800e+05,  1.35198700e+04,     4.80990000e+03,  2.42449600e+04,  1.41696820e+05,  7.13367400e+04,     1.43265800e+04,  1.57232300e+04,  1.48162780e+05,  1.51976459e+05,     1.45291257e+05,  4.38082000e+03,  3.92348997e+03,  8.79608100e+04,     1.03146270e+05,  2.60742000e+03,  1.67959774e+03],  [  1.71652150e+05,  1.22993650e+05,  1.14945320e+05,  3.15862700e+04,     4.52768700e+04,  5.91666500e+04,  1.63910040e+05,  8.66235000e+04,     4.21268000e+03,  7.53760000e+03,  2.17706140e+05,  2.61398701e+05,     1.69675514e+05,  1.56150200e+04,  3.87321048e+04,  1.22816400e+05,     1.45240200e+05,  2.40263300e+04,  2.19999444e+04]], [[  1.27584000e+04,  7.90831000e+03,  7.23024000e+03,  3.22422000e+03,     1.40961000e+03,  3.98179000e+03,  5.46008000e+03,  4.03834000e+03,     2.51870000e+03,  2.47377000e+03,  6.58809000e+03,  6.03580000e+03,     5.15880000e+03,  1.06161000e+03,  9.63020000e+02,  6.76388000e+03,     9.25318000e+03,  8.72970000e+02,  1.41934391e+03],  [  4.90500000e+02,  5.12570000e+02,  8.43100000e+02,  7.13810000e+02,     8.57500000e+01,  1.31118000e+03,  5.01388000e+03,  2.73282000e+03,     8.65640000e+02,  9.92710000e+02,  5.73487000e+03,  5.14224000e+03,     5.65791000e+03,  3.29940000e+02,  2.64200000e+01,  8.28100000e+02,     1.14398000e+03,  7.28100000e+01,  6.64120102e+01],  [  9.54806100e+04,  1.08473150e+05,  1.52819760e+05,  1.30519500e+04,     3.55837000e+03,  2.23555900e+04,  1.41967560e+05,  7.11506900e+04,     1.26512800e+04,  1.43366700e+04,  1.45569700e+05,  1.52247068e+05,     1.40404804e+05,  4.19273000e+03,  3.45933027e+03,  1.27922320e+05,     1.30760000e+05,  2.82263000e+03,  1.81822758e+03],  [  2.10345900e+05,  1.49121950e+05,  1.33824810e+05,  4.02494800e+04,     4.35822600e+04,  5.54703000e+04,  1.64527010e+05,  8.71052900e+04,     4.20568000e+03,  7.79332000e+03,  2.10541360e+05,  2.61864148e+05,     1.63968967e+05,  1.37677200e+04,  3.41499898e+04,  1.39959160e+05,     1.53684280e+05,  2.57471800e+04,  2.35756576e+04]], [[  1.04546300e+04,  7.24010000e+03,  7.80006000e+03,  2.58665000e+03,     7.60930000e+02,  4.53507000e+03,  5.40206000e+03,  4.07823000e+03,     2.49549000e+03,  2.44324000e+03,  7.23127000e+03,  6.15490000e+03,     5.22939000e+03,  9.75330000e+02,  7.33980000e+02,  6.82996000e+03,     9.30577000e+03,  5.63890000e+02,  9.16817114e+02],  [  5.09050000e+02,  5.29100000e+02,  8.56870000e+02,  7.08350000e+02,     9.19100000e+01,  1.31428000e+03,  5.04760000e+03,  2.75026000e+03,     8.62200000e+02,  9.91110000e+02,  5.67793000e+03,  5.22933000e+03,     5.67550000e+03,  3.30320000e+02,  3.02400000e+01,  8.32490000e+02,     1.14770000e+03,  6.97500000e+01,  6.36208998e+01],  [  9.73496000e+04,  1.10625850e+05,  1.54712510e+05,  1.29144700e+04,     4.36218000e+03,  2.17446800e+04,  1.41701530e+05,  7.16070500e+04,     1.26654700e+04,  1.40259200e+04,  1.46661150e+05,  1.54825555e+05,     1.40841312e+05,  4.09300000e+03,  3.45534523e+03,  1.30011280e+05,     1.32237700e+05,  3.10623000e+03,  2.00091158e+03],  [  2.09045620e+05,  1.51067430e+05,  1.33942290e+05,  3.43618500e+04,     3.66707800e+04,  5.03349300e+04,  1.69832460e+05,  8.31112000e+04,     4.01011000e+03,  7.68843000e+03,  2.17979410e+05,  2.66299131e+05,     1.64478734e+05,  1.37518600e+04,  3.41106500e+04,  1.40760420e+05,     1.54553850e+05,  2.55586200e+04,  2.34030008e+04]], [[  1.23154400e+04,  7.40513000e+03,  7.84770000e+03,  2.53698000e+03,     1.56031000e+03,  4.62493000e+03,  5.57954000e+03,  4.08691000e+03,     2.47638000e+03,  2.42311000e+03,  6.74921000e+03,  6.52035000e+03,     5.24796000e+03,  9.72140000e+02,  3.04050000e+02,  6.88707000e+03,     9.64357000e+03,  5.25660000e+02,  8.54659746e+02],  [  5.57310000e+02,  5.49770000e+02,  8.65690000e+02,  6.94870000e+02,     7.95700000e+01,  1.28982000e+03,  5.00877000e+03,  2.73951000e+03,     8.44600000e+02,  9.76580000e+02,  5.72482000e+03,  5.04729000e+03,     5.64606000e+03,  3.32830000e+02,  2.37300000e+01,  8.37030000e+02,     1.15970000e+03,  5.98000000e+01,  5.45452302e+01],  [  1.03900450e+05,  1.17143770e+05,  1.61539290e+05,  1.29659300e+04,     3.88286000e+03,  2.27212600e+04,  1.42289430e+05,  7.13258400e+04,     1.23584700e+04,  1.44717400e+04,  1.48652840e+05,  1.49435869e+05,     1.40110739e+05,  4.46398000e+03,  4.17928662e+03,  1.37289020e+05,     1.37287250e+05,  2.60542000e+03,  1.67830941e+03],  [  2.21893930e+05,  1.56545250e+05,  1.37802380e+05,  2.94927600e+04,     3.88717900e+04,  5.08149600e+04,  1.65213270e+05,  8.76231300e+04,     3.99049000e+03,  7.20937000e+03,  2.03346290e+05,  2.57028901e+05,     1.63625548e+05,  1.66330600e+04,  4.12572909e+04,  1.44450670e+05,     1.56409470e+05,  2.14194100e+04,  1.96128926e+04]], [[  1.64486600e+04,  7.69960000e+03,  7.72594000e+03,  2.66997000e+03,     1.43169000e+03,  3.82646000e+03,  5.85416000e+03,  4.00008000e+03,     2.31002000e+03,  2.34715000e+03,  7.03088000e+03,  6.70718000e+03,     5.62591000e+03,  1.10680000e+03,  3.81830000e+02,  7.05905000e+03,     9.19085000e+03,  5.92940000e+02,  9.64048910e+02],  [  4.03390000e+02,  5.47720000e+02,  8.74650000e+02,  6.40540000e+02,     7.37000000e+01,  1.20176000e+03,  4.98553000e+03,  2.68234000e+03,     7.76350000e+02,  9.20430000e+02,  5.64288000e+03,  5.03623000e+03,     5.51821000e+03,  3.41790000e+02,  9.08000000e+00,  8.54330000e+02,     1.15970000e+03,  5.34200000e+01,  4.87258561e+01],  [  1.26323580e+05,  1.40166720e+05,  1.84593450e+05,  1.17344900e+04,     4.86825000e+03,  2.03914500e+04,  1.42694490e+05,  7.13949300e+04,     1.13826300e+04,  1.33949000e+04,  1.45395290e+05,  1.49108414e+05,     1.36938056e+05,  4.47271000e+03,  4.06229315e+03,  1.62838240e+05,     1.54976690e+05,  2.17154000e+03,  1.39882093e+03],  [  2.46559600e+05,  1.73211350e+05,  1.50013060e+05,  3.75987700e+04,     3.51308600e+04,  4.84511100e+04,  1.65698000e+05,  8.48682000e+04,     4.07984000e+03,  7.22685000e+03,  2.09288290e+05,  2.56465680e+05,     1.59920393e+05,  1.61674400e+04,  4.01023489e+04,  1.54995910e+05,     1.62436050e+05,  2.75346800e+04,  2.52123995e+04]], [[  1.38867400e+04,  8.77526000e+03,  7.74476000e+03,  3.10310000e+03,     2.95250000e+02,  4.13459000e+03,  5.63709000e+03,  3.99630000e+03,     2.43513000e+03,  2.41007000e+03,  7.27663000e+03,  6.37333000e+03,     5.35593000e+03,  1.06257000e+03,  5.13630000e+02,  6.88118000e+03,     9.70137000e+03,  9.62600000e+02,  1.56507147e+03],  [  5.20350000e+02,  5.28600000e+02,  8.68240000e+02,  6.82030000e+02,     7.16300000e+01,  1.26538000e+03,  5.00955000e+03,  2.74934000e+03,     8.27450000e+02,  9.63620000e+02,  5.70911000e+03,  5.06251000e+03,     5.62523000e+03,  3.35350000e+02,  1.61100000e+01,  8.45800000e+02,     1.15894000e+03,  5.45100000e+01,  4.97200752e+01],  [  1.10725500e+05,  1.24582830e+05,  1.68872450e+05,  1.22297000e+04,     3.94354000e+03,  2.14022200e+04,  1.43634180e+05,  7.19539100e+04,     1.21012900e+04,  1.40125100e+04,  1.49296370e+05,  1.49886490e+05,     1.39593828e+05,  4.31803000e+03,  4.11608622e+03,  1.45410760e+05,     1.43033650e+05,  2.10525000e+03,  1.35611951e+03],  [  2.16283780e+05,  1.61723420e+05,  1.42871480e+05,  3.29063900e+04,     4.62993500e+04,  4.14838100e+04,  1.71102910e+05,  8.59399700e+04,     3.96751000e+03,  7.50004000e+03,  2.16637360e+05,  2.57803966e+05,     1.63021885e+05,  1.63815300e+04,  4.06333861e+04,  1.47851820e+05,     1.58804910e+05,  2.29578600e+04,  2.10215894e+04]], [[  1.32981200e+04,  7.57518000e+03,  7.45235000e+03,  3.02774000e+03,     1.08047000e+03,  4.26347000e+03,  5.50136000e+03,  4.02794000e+03,     2.53185000e+03,  2.47167000e+03,  7.01341000e+03,  6.37237000e+03,     5.21533000e+03,  1.00814000e+03,  2.89450000e+02,  6.75634000e+03,     9.54143000e+03,  8.36330000e+02,  1.35977169e+03],  [  3.18210000e+02,  5.10400000e+02,  8.51220000e+02,  7.16660000e+02,     8.80700000e+01,  1.32666000e+03,  5.02794000e+03,  2.78440000e+03,     8.71380000e+02,  1.00059000e+03,  5.81439000e+03,  5.17003000e+03,     5.70653000e+03,  3.33890000e+02,  1.56700000e+01,  8.39120000e+02,     1.15831000e+03,  7.17000000e+01,  6.53995486e+01],  [  9.79272200e+04,  1.11051340e+05,  1.55466960e+05,  1.22277800e+04,     5.37393000e+03,  2.30941600e+04,  1.43218730e+05,  7.13877100e+04,     1.27342900e+04,  1.42002400e+04,  1.47442060e+05,  1.53069851e+05,     1.41611342e+05,  4.19746000e+03,  4.39165231e+03,  1.30490710e+05,     1.32835720e+05,  2.77171000e+03,  1.78542691e+03],  [  2.16430110e+05,  1.53337530e+05,  1.35999760e+05,  3.56494700e+04,     3.72195500e+04,  4.28745900e+04,  1.66785720e+05,  9.12030000e+04,     4.17525000e+03,  7.72994000e+03,  2.04719410e+05,  2.63279330e+05,     1.65377998e+05,  1.74782500e+04,  4.33537332e+04,  1.42285110e+05,     1.55458660e+05,  2.94993800e+04,  2.70113963e+04]], [[  1.60324200e+04,  7.59741000e+03,  7.70141000e+03,  3.09485000e+03,     1.06808000e+03,  4.87358000e+03,  5.45963000e+03,  4.06610000e+03,     2.58028000e+03,  2.48095000e+03,  5.10291000e+03,  6.02101000e+03,     5.13351000e+03,  1.02022000e+03,  6.88590000e+02,  6.77410000e+03,     9.48874000e+03,  3.25550000e+02,  5.29305027e+02],  [  3.83510000e+02,  4.99570000e+02,  8.53710000e+02,  7.35650000e+02,     9.08700000e+01,  1.34940000e+03,  5.08913000e+03,  2.79022000e+03,     8.90020000e+02,  1.01675000e+03,  5.84040000e+03,  5.19440000e+03,     5.73512000e+03,  3.35160000e+02,  1.80600000e+01,  8.41630000e+02,     1.15995000e+03,  7.16700000e+01,  6.53721848e+01],  [  9.23342400e+04,  1.05667560e+05,  1.50376030e+05,  1.35725200e+04,     4.49246000e+03,  2.24487800e+04,  1.43576270e+05,  7.25355900e+04,     1.30347000e+04,  1.46246400e+04,  1.51297710e+05,  1.53791377e+05,     1.42320822e+05,  4.40468000e+03,  4.67573875e+03,  1.24780610e+05,     1.28989720e+05,  2.47147000e+03,  1.59202408e+03],  [  2.05751670e+05,  1.48488550e+05,  1.33103930e+05,  4.00349100e+04,     4.61945300e+04,  4.62629500e+04,  1.67391280e+05,  8.79658800e+04,     4.00741000e+03,  7.16882000e+03,  2.12251380e+05,  2.64520351e+05,     1.66206550e+05,  1.86088800e+04,  4.61581919e+04,  1.39758710e+05,     1.54262990e+05,  2.40100900e+04,  2.19850741e+04]], [[  1.36178400e+04,  7.44625000e+03,  7.42908000e+03,  2.82975000e+03,     1.32719000e+03,  4.63017000e+03,  5.21628000e+03,  4.06698000e+03,     2.76985000e+03,  2.61296000e+03,  3.59156000e+03,  5.81889000e+03,     4.92054000e+03,  1.10083000e+03,  7.97550000e+02,  6.72865000e+03,     9.57976000e+03,  1.27772000e+03,  2.07741858e+03],  [  4.32250000e+02,  4.93560000e+02,  8.41190000e+02,  8.00050000e+02,     1.06900000e+02,  1.44621000e+03,  5.15100000e+03,  2.85324000e+03,     9.59200000e+02,  1.07505000e+03,  6.00952000e+03,  5.18195000e+03,     5.90090000e+03,  3.38580000e+02,  2.63000000e+01,  8.21650000e+02,     1.14254000e+03,  8.43000000e+01,  7.68923563e+01],  [  7.03910200e+04,  8.40759700e+04,  1.28905160e+05,  1.37432200e+04,     4.86402000e+03,  2.42668600e+04,  1.43447810e+05,  7.25148700e+04,     1.41023500e+04,  1.58344300e+04,  1.47608480e+05,  1.53422768e+05,     1.46434763e+05,  4.11433000e+03,  4.04297598e+03,  1.00793200e+05,     1.12582660e+05,  3.01687000e+03,  1.94334937e+03],  [  1.83157480e+05,  1.31272820e+05,  1.23071950e+05,  3.47553700e+04,     4.22250400e+04,  4.30196400e+04,  1.66390730e+05,  8.42615700e+04,     4.16346000e+03,  7.91623000e+03,  2.11517100e+05,  2.63886346e+05,     1.71010935e+05,  1.60905600e+04,  3.99116527e+04,  1.30193170e+05,     1.51400670e+05,  2.42845700e+04,  2.22364044e+04]], [[  1.25415400e+04,  7.47287000e+03,  7.08224000e+03,  2.77632000e+03,     8.92000000e+02,  5.06740000e+03,  4.98707000e+03,  4.05941000e+03,     2.89360000e+03,  2.65658000e+03,  4.16800000e+03,  4.99516000e+03,     4.78416000e+03,  8.22680000e+02,  8.86800000e+02,  6.30897000e+03,     9.38604000e+03,  8.42900000e+02,  1.37045372e+03],  [  5.46610000e+02,  4.51820000e+02,  8.19800000e+02,  8.52910000e+02,     1.18340000e+02,  1.52533000e+03,  5.18075000e+03,  2.90114000e+03,     1.01761000e+03,  1.12454000e+03,  5.90148000e+03,  5.32251000e+03,     6.00620000e+03,  3.43740000e+02,  1.86700000e+01,  8.14670000e+02,     1.14091000e+03,  1.00470000e+02,  9.16414595e+01],  [  5.25195500e+04,  6.61739200e+04,  1.10816940e+05,  1.47378500e+04,     4.71765000e+03,  2.49527800e+04,  1.44674690e+05,  7.24553100e+04,     1.49927300e+04,  1.63436300e+04,  1.49417520e+05,  1.57584349e+05,     1.49047853e+05,  3.91286000e+03,  4.42998763e+03,  8.06386200e+04,     9.88501200e+04,  3.19744000e+03,  2.05966549e+03],  [  1.67815300e+05,  1.18651000e+05,  1.13523020e+05,  4.49638900e+04,     4.27664600e+04,  4.36954400e+04,  1.67278720e+05,  8.32684500e+04,     4.57648000e+03,  7.78939000e+03,  2.30056460e+05,  2.71044243e+05,     1.74062579e+05,  1.76308200e+04,  4.37321737e+04,  1.22434980e+05,     1.46363060e+05,  2.39726700e+04,  2.19508101e+04]], [[  1.02890500e+04,  7.26356000e+03,  6.91686000e+03,  3.17778000e+03,     1.55191000e+03,  4.97280000e+03,  4.69325000e+03,  4.04086000e+03,     3.08100000e+03,  2.72520000e+03,  2.37207000e+03,  4.98623000e+03,     4.49478000e+03,  8.49050000e+02,  5.66510000e+02,  6.14510000e+03,     9.28476000e+03,  9.16920000e+02,  1.49080131e+03],  [  3.84870000e+02,  4.36200000e+02,  8.04370000e+02,  9.29530000e+02,     1.42160000e+02,  1.62147000e+03,  5.30140000e+03,  2.98058000e+03,     1.09342000e+03,  1.18834000e+03,  6.27558000e+03,  5.38263000e+03,     6.15038000e+03,  3.48630000e+02,  1.33000000e+01,  7.98250000e+02,     1.14793000e+03,  1.23700000e+02,  1.12830184e+02],  [  2.87900000e+04,  4.22659200e+04,  8.69927100e+04,  1.64020900e+04,     6.06666000e+03,  2.68839400e+04,  1.44399390e+05,  7.28913700e+04,     1.60962900e+04,  1.74631500e+04,  1.47702170e+05,  1.59364331e+05,     1.52625775e+05,  4.06080000e+03,  4.70480746e+03,  5.40908700e+04,     8.05977400e+04,  3.33100000e+03,  2.14569960e+03],  [  1.50514750e+05,  9.96941100e+04,  1.03159740e+05,  4.50438200e+04,     5.13464600e+04,  4.26920000e+04,  1.63422050e+05,  8.60277400e+04,     4.58551000e+03,  8.13522000e+03,  2.09505680e+05,  2.74105802e+05,     1.78240986e+05,  1.87245700e+04,  4.64451539e+04,  1.11369890e+05,     1.41970450e+05,  2.34385500e+04,  2.14617379e+04]], [[  7.08648000e+03,  7.36929000e+03,  6.96330000e+03,  3.24204000e+03,     1.80302000e+03,  4.98057000e+03,  4.70306000e+03,  4.04065000e+03,     3.13356000e+03,  2.76120000e+03,  2.33940000e+02,  5.07203000e+03,     4.32873000e+03,  6.76500000e+02,  3.53630000e+02,  6.09769000e+03,     9.31687000e+03,  7.85260000e+02,  1.27673803e+03],  [  3.02110000e+02,  4.39960000e+02,  8.18730000e+02,  9.48570000e+02,     1.39650000e+02,  1.64959000e+03,  5.31725000e+03,  2.95789000e+03,     1.11264000e+03,  1.20467000e+03,  6.23918000e+03,  5.49289000e+03,     6.19594000e+03,  3.55220000e+02,  2.36700000e+01,  7.94260000e+02,     1.14289000e+03,  1.30290000e+02,  1.18841104e+02],  [  2.34983300e+04,  3.64295400e+04,  8.15892700e+04,  1.60939800e+04,     5.19969000e+03,  2.66591900e+04,  1.45164830e+05,  7.30079200e+04,     1.64086700e+04,  1.73241200e+04,  1.52073820e+05,  1.62628815e+05,     1.53756377e+05,  4.30907000e+03,  4.71154887e+03,  4.79618300e+04,     7.64869400e+04,  3.73869000e+03,  2.40831752e+03],  [  1.42324850e+05,  9.64410700e+04,  9.84380300e+04,  4.05514200e+04,     4.77078700e+04,  4.32118600e+04,  1.65001160e+05,  9.02270600e+04,     4.23846000e+03,  7.75149000e+03,  2.30869860e+05,  2.79720698e+05,     1.79561336e+05,  1.87514000e+04,  4.65117041e+04,  1.09261970e+05,     1.41760460e+05,  3.07945100e+04,  2.81972947e+04]], [[  9.96289000e+03,  7.89035000e+03,  6.93085000e+03,  2.28671000e+03,     9.39850000e+02,  4.73203000e+03,  4.99993000e+03,  4.09594000e+03,     2.89620000e+03,  2.62152000e+03,  2.53707000e+03,  5.25181000e+03,     4.64377000e+03,  8.31150000e+02,  7.33940000e+02,  6.35318000e+03,     9.56899000e+03,  5.57630000e+02,  9.06639110e+02],  [  3.63100000e+02,  4.81690000e+02,  8.35680000e+02,  8.47940000e+02,     1.13510000e+02,  1.51819000e+03,  5.23070000e+03,  2.88500000e+03,     1.01508000e+03,  1.12367000e+03,  6.04220000e+03,  5.31129000e+03,     5.99612000e+03,  3.41980000e+02,  1.64500000e+01,  8.18400000e+02,     1.15905000e+03,  1.03620000e+02,  9.45146615e+01],  [  5.52086900e+04,  6.90090900e+04,  1.13834580e+05,  1.42408900e+04,     5.54953000e+03,  2.53046000e+04,  1.44798700e+05,  7.26437800e+04,     1.49225200e+04,  1.61961600e+04,  1.50123270e+05,  1.57252157e+05,     1.48797711e+05,  3.93486000e+03,  4.72803680e+03,  8.38004100e+04,     1.01219740e+05,  3.50563000e+03,  2.25818940e+03],  [  1.72510730e+05,  1.21155010e+05,  1.15717930e+05,  4.63488000e+04,     4.64395400e+04,  4.57150100e+04,  1.66751910e+05,  8.35355500e+04,     4.36224000e+03,  8.13844000e+03,  2.40361330e+05,  2.70472874e+05,     1.73770456e+05,  1.88170200e+04,  4.66744705e+04,  1.24080030e+05,     1.47606920e+05,  2.15389500e+04,  1.97223506e+04]], [[  1.47836700e+04,  7.96811000e+03,  7.52564000e+03,  2.64259000e+03,     8.69450000e+02,  4.63126000e+03,  5.33564000e+03,  4.05962000e+03,     2.70046000e+03,  2.58377000e+03,  5.27011000e+03,  6.12082000e+03,     5.11293000e+03,  9.32410000e+02,  5.44300000e+02,  6.63781000e+03,     9.55836000e+03,  9.78120000e+02,  1.59030512e+03],  [  4.24890000e+02,  5.15890000e+02,  8.51180000e+02,  7.78390000e+02,     1.03740000e+02,  1.41338000e+03,  5.14373000e+03,  2.83732000e+03,     9.38170000e+02,  1.06036000e+03,  5.92095000e+03,  5.12372000e+03,     5.86833000e+03,  3.39480000e+02,  1.99400000e+01,  8.37110000e+02,     1.16056000e+03,  8.57700000e+01,  7.82331839e+01],  [  7.96534600e+04,  9.44447100e+04,  1.39404280e+05,  1.39181700e+04,     4.65677000e+03,  2.39347900e+04,  1.45192440e+05,  7.30247500e+04,     1.37732400e+04,  1.49437500e+04,  1.51845080e+05,  1.51698744e+05,     1.45626517e+05,  4.04570000e+03,  5.06574546e+03,  1.12263130e+05,     1.20672610e+05,  3.28521000e+03,  2.11620348e+03],  [  1.99063900e+05,  1.40879330e+05,  1.28293520e+05,  3.18614600e+04,     4.17840300e+04,  5.20134500e+04,  1.77627800e+05,  8.89046600e+04,     4.16417000e+03,  8.12351000e+03,  2.47009270e+05,  2.60921033e+05,     1.70067040e+05,  2.01610600e+04,  5.00082797e+04,  1.36151400e+05,     1.54065350e+05,  2.81897600e+04,  2.58122299e+04]], [[  1.39929200e+04,  8.36748000e+03,  8.10747000e+03,  2.91217000e+03,     1.24824000e+03,  4.28181000e+03,  5.61427000e+03,  4.08698000e+03,     2.54264000e+03,  2.49037000e+03,  8.45426000e+03,  6.24326000e+03,     5.16787000e+03,  9.68290000e+02,  8.19200000e+02,  6.94986000e+03,     9.68210000e+03,  7.52830000e+02,  1.22401076e+03],  [  5.11920000e+02,  5.25050000e+02,  8.71100000e+02,  7.20020000e+02,     7.77200000e+01,  1.32578000e+03,  5.09950000e+03,  2.79049000e+03,     8.68030000e+02,  1.00261000e+03,  5.89377000e+03,  5.12665000e+03,     5.75860000e+03,  3.45480000e+02,  1.40000000e+01,  8.54000000e+02,     1.17728000e+03,  6.16800000e+01,  5.62600301e+01],  [  1.04778410e+05,  1.18169760e+05,  1.62889810e+05,  1.36896300e+04,     3.58885000e+03,  2.30043700e+04,  1.45229330e+05,  7.26575800e+04,     1.27065500e+04,  1.46832600e+04,  1.51449530e+05,  1.51785493e+05,     1.42903494e+05,  4.31540000e+03,  4.27296783e+03,  1.38125150e+05,     1.38588330e+05,  3.05206000e+03,  1.96601739e+03],  [  2.17483160e+05,  1.61929980e+05,  1.40593620e+05,  3.75699000e+04,     5.27630700e+04,  3.75777700e+04,  1.69150950e+05,  8.81854600e+04,     4.29112000e+03,  7.73198000e+03,  2.16407850e+05,  2.61070241e+05,     1.66887012e+05,  1.70059000e+04,  4.21820978e+04,  1.47300590e+05,     1.60350120e+05,  2.38313600e+04,  2.18214182e+04]], [[  1.19116700e+04,  8.69402000e+03,  8.12713000e+03,  3.18876000e+03,     7.64690000e+02,  4.16779000e+03,  5.64616000e+03,  4.19037000e+03,     2.54714000e+03,  2.50531000e+03,  5.04312000e+03,  6.55071000e+03,     5.50063000e+03,  9.81670000e+02,  5.99880000e+02,  6.94439000e+03,     9.90928000e+03,  7.52540000e+02,  1.22353926e+03],  [  5.81630000e+02,  5.12840000e+02,  8.88630000e+02,  7.17770000e+02,     7.78600000e+01,  1.32287000e+03,  5.10625000e+03,  2.81299000e+03,     8.68050000e+02,  1.00282000e+03,  5.76721000e+03,  5.15655000e+03,     5.76493000e+03,  3.45080000e+02,  2.14400000e+01,  8.54460000e+02,     1.17221000e+03,  6.74600000e+01,  6.15321276e+01],  [  1.04674790e+05,  1.18564370e+05,  1.63562990e+05,  1.32022000e+04,     4.86661000e+03,  2.27990700e+04,  1.45739100e+05,  7.34897100e+04,     1.27013200e+04,  1.46105900e+04,  1.51923190e+05,  1.52670746e+05,     1.43060577e+05,  4.32696000e+03,  4.08233144e+03,  1.38840550e+05,     1.39127160e+05,  2.63726000e+03,  1.69881949e+03],  [  2.26320910e+05,  1.60647110e+05,  1.40786520e+05,  4.39355900e+04,     3.21348100e+04,  3.85039500e+04,  1.69786570e+05,  9.05018600e+04,     4.30621000e+03,  7.50077000e+03,  2.18869470e+05,  2.62592872e+05,     1.67070458e+05,  1.62471900e+04,  4.03001639e+04,  1.47624650e+05,     1.60007410e+05,  2.05437500e+04,  1.88110859e+04]], [[  1.26484800e+04,  8.19516000e+03,  8.02176000e+03,  2.28820000e+03,     8.01140000e+02,  3.96479000e+03,  5.82676000e+03,  4.11355000e+03,     2.39663000e+03,  2.43050000e+03,  6.44254000e+03,  6.54708000e+03,     5.52717000e+03,  1.01594000e+03,  5.51510000e+02,  7.34929000e+03,     9.71131000e+03,  5.96770000e+02,  9.70276028e+02],  [  4.30350000e+02,  5.39270000e+02,  8.83620000e+02,  6.72770000e+02,     7.18900000e+01,  1.25122000e+03,  5.03379000e+03,  2.77954000e+03,     8.12890000e+02,  9.57310000e+02,  5.64017000e+03,  5.15230000e+03,     5.66458000e+03,  3.48310000e+02,  1.26900000e+01,  8.69910000e+02,     1.17518000e+03,  5.86100000e+01,  5.34597984e+01],  [  1.23325730e+05,  1.36916950e+05,  1.82281640e+05,  1.19482400e+04,     4.64788000e+03,  2.17830700e+04,  1.45782420e+05,  7.29980800e+04,     1.19133500e+04,  1.37933400e+04,  1.52935400e+05,  1.52544916e+05,     1.40570325e+05,  4.37873000e+03,  4.51993506e+03,  1.59502840e+05,     1.53486110e+05,  2.36472000e+03,  1.52325991e+03],  [  2.35454060e+05,  1.71539820e+05,  1.49501350e+05,  4.05425100e+04,     4.65714800e+04,  4.86695100e+04,  1.63671610e+05,  8.76937800e+04,     4.07521000e+03,  7.69113000e+03,  2.38007290e+05,  2.62376445e+05,     1.64162267e+05,  1.79888000e+04,  4.46201213e+04,  1.56449380e+05,     1.64497550e+05,  1.80573900e+04,  1.65344260e+04]], [[  7.69077000e+03,  8.52355000e+03,  7.86868000e+03,  2.67552000e+03,     1.35316000e+03,  4.41582000e+03,  5.68588000e+03,  4.10526000e+03,     2.53264000e+03,  2.45487000e+03,  5.43399000e+03,  5.93604000e+03,     5.43022000e+03,  1.09989000e+03,  4.60310000e+02,  6.98631000e+03,     9.91988000e+03,  4.18440000e+02,  6.80332961e+02],  [  4.56520000e+02,  5.23740000e+02,  8.65360000e+02,  7.12490000e+02,     8.64800000e+01,  1.31836000e+03,  5.11508000e+03,  2.77744000e+03,     8.59480000e+02,  9.96670000e+02,  5.76424000e+03,  5.08226000e+03,     5.73938000e+03,  3.44330000e+02,  2.25800000e+01,  8.63220000e+02,     1.17824000e+03,  7.19400000e+01,  6.56184592e+01],  [  1.09248700e+05,  1.22858680e+05,  1.67906880e+05,  1.26061100e+04,     5.55923000e+03,  2.20273600e+04,  1.46543870e+05,  7.36990900e+04,     1.25719800e+04,  1.41090600e+04,  1.50765120e+05,  1.50471231e+05,     1.42426537e+05,  4.40610000e+03,  3.88274251e+03,  1.43503250e+05,     1.42565800e+05,  2.62751000e+03,  1.69253893e+03],  [  2.15585030e+05,  1.63530200e+05,  1.43079180e+05,  4.38253900e+04,     4.31946700e+04,  4.65017200e+04,  1.69552280e+05,  8.46528800e+04,     4.26770000e+03,  8.13335000e+03,  2.22557420e+05,  2.58809718e+05,     1.66330007e+05,  1.54528500e+04,  3.83298520e+04,  1.49460470e+05,     1.60903360e+05,  2.20198400e+04,  2.01626822e+04]], [[  1.01599500e+04,  7.93493000e+03,  7.43233000e+03,  2.66439000e+03,     1.49887000e+03,  4.21981000e+03,  5.45449000e+03,  4.05933000e+03,     2.64761000e+03,  2.54921000e+03,  7.57138000e+03,  5.79453000e+03,     5.17235000e+03,  1.08681000e+03,  6.47670000e+02,  6.82042000e+03,     9.55465000e+03,  7.12780000e+02,  1.15889429e+03],  [  4.76790000e+02,  4.91750000e+02,  8.73680000e+02,  7.56060000e+02,     8.26800000e+01,  1.38501000e+03,  5.17580000e+03,  2.83928000e+03,     9.13660000e+02,  1.04234000e+03,  5.96287000e+03,  5.25216000e+03,     5.85744000e+03,  3.41470000e+02,  1.62900000e+01,  8.55590000e+02,     1.17990000e+03,  7.73100000e+01,  7.05165844e+01],  [  9.21330000e+04,  1.05844150e+05,  1.51034900e+05,  1.32850300e+04,     4.18655000e+03,  2.35978800e+04,  1.46470760e+05,  7.32884500e+04,     1.33971500e+04,  1.46248400e+04,  1.50837920e+05,  1.55501486e+05,     1.45356274e+05,  4.62083000e+03,  4.27965396e+03,  1.24669930e+05,     1.29659300e+05,  2.19942000e+03,  1.41678013e+03],  [  2.07662450e+05,  1.51211940e+05,  1.35858170e+05,  3.62676500e+04,     4.29424400e+04,  5.23083800e+04,  1.73787650e+05,  8.88208800e+04,     4.35253000e+03,  7.81394000e+03,  2.34169200e+05,  2.67461729e+05,     1.69751443e+05,  1.70325100e+04,  4.22481023e+04,  1.42588310e+05,     1.57401150e+05,  2.39174000e+04,  2.19002016e+04]], [[  1.23021600e+04,  8.45057000e+03,  7.41762000e+03,  3.22004000e+03,     1.19194000e+03,  4.67021000e+03,  5.35026000e+03,  4.15113000e+03,     2.73296000e+03,  2.62589000e+03,  4.63048000e+03,  6.02882000e+03,     5.10632000e+03,  9.56420000e+02,  4.86670000e+02,  6.85906000e+03,     9.98589000e+03,  4.78780000e+02,  7.78438522e+02],  [  4.21100000e+02,  5.21050000e+02,  8.60010000e+02,  7.85710000e+02,     8.87900000e+01,  1.43566000e+03,  5.20391000e+03,  2.86327000e+03,     9.48850000e+02,  1.07194000e+03,  5.95159000e+03,  5.25262000e+03,     5.91965000e+03,  3.43660000e+02,  1.96600000e+01,  8.47200000e+02,     1.17009000e+03,  9.02600000e+01,  8.23286368e+01],  [  8.04871200e+04,  9.49223900e+04,  1.40321590e+05,  1.38709500e+04,     4.33068000e+03,  2.46661000e+04,  1.46935480e+05,  7.37967900e+04,     1.39118100e+04,  1.56313800e+04,  1.52700420e+05,  1.55515105e+05,     1.46900057e+05,  4.17936000e+03,  4.34316592e+03,  1.12806730e+05,     1.21572280e+05,  3.82988000e+03,  2.46705854e+03],  [  2.01365320e+05,  1.43635020e+05,  1.29182920e+05,  3.31469500e+04,     3.44982400e+04,  3.76993500e+04,  1.69954100e+05,  8.91276600e+04,     4.38582000e+03,  7.45019000e+03,  2.29290860e+05,  2.67485155e+05,     1.71554319e+05,  1.72852800e+04,  4.28750828e+04,  1.37647470e+05,     1.55307170e+05,  2.21606200e+04,  2.02915888e+04]], [[  1.22732800e+04,  8.11515000e+03,  7.66434000e+03,  2.55924000e+03,     1.04728000e+03,  4.54280000e+03,  5.43691000e+03,  4.13988000e+03,     2.71049000e+03,  2.56523000e+03,  3.80459000e+03,  5.95058000e+03,     5.14192000e+03,  1.02812000e+03,  3.92320000e+02,  6.77369000e+03,     9.71709000e+03,  7.45670000e+02,  1.21236946e+03],  [  3.90870000e+02,  4.85630000e+02,  8.50260000e+02,  7.77230000e+02,     1.04520000e+02,  1.41234000e+03,  5.22031000e+03,  2.86982000e+03,     9.37510000e+02,  1.06329000e+03,  5.96021000e+03,  5.30294000e+03,     5.91076000e+03,  3.46500000e+02,  2.69100000e+01,  8.49140000e+02,     1.17851000e+03,  8.18000000e+01,  7.46120373e+01],  [  8.45248000e+04,  9.91906000e+04,  1.44878870e+05,  1.37648400e+04,     4.06219000e+03,  2.36693100e+04,  1.46589590e+05,  7.39883100e+04,     1.37885300e+04,  1.53161800e+04,  1.53110290e+05,  1.57004937e+05,     1.46679445e+05,  4.45160000e+03,  4.63671998e+03,  1.17572120e+05,     1.24820040e+05,  3.10985000e+03,  2.00324345e+03],  [  1.97290210e+05,  1.44596810e+05,  1.33155960e+05,  3.54567400e+04,     3.88821800e+04,  4.90165900e+04,  1.71416290e+05,  8.73267600e+04,     4.27508000e+03,  8.36033000e+03,  2.37015750e+05,  2.70047657e+05,     1.71296682e+05,  1.84535900e+04,  4.57730045e+04,  1.39576790e+05,     1.56454870e+05,  1.87989500e+04,  1.72134427e+04]]],[historic_time, sales_channels, product_families])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_sales_sales_chn_prod_family", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical Sales by Sales Channel and Product Family", "units": null, "w": "184", "x": 43, "y": 64, "z": 1}, {"color": "#9999ff", "definition": "_list = []\n\nfor i in range(1,20):\n    _list.append( 'Product Family ' + str(i) )\n\nresult = pd.Index( _list )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "product_families", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Product Families", "units": null, "w": "100", "x": "143", "y": "61", "z": 1}, {"color": "#4CBCFF", "definition": "result = np.transpose( cdm_hist_sales_sales_chn_prod_family.values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_historical_sales", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical Sales", "units": null, "w": "184", "x": 273, "y": 64, "z": 1}, {"color": "#9999ff", "definition": "result = subset( cdm_ind_variables_sel == 'Yes' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "independent_variables_chosen", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Independent Variables Chosen", "units": null, "w": "100", "x": "41", "y": "123", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Dependant and Independant Variables", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node115", "moduleId": "inputs_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 22, "y": 28, "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "OLS Linear Regression", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node115_copy", "moduleId": "ols_linear_regression_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 25, "y": 20, "z": -1}, {"color": "#4cffa6", "definition": "result = choice( product_families,1, False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_choice_product_family", "moduleId": "inputs_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Product Family", "units": null, "w": "140", "x": 74, "y": 385, "z": 1}, {"color": "#4CFFA6", "definition": "result = cdm_choice_product_family", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4a166db2bbbd4520b8fab9a5f6b4f036", "moduleId": "inputs_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_choice_product_family", "picture": null, "title": "Product Family", "units": null, "w": "224", "x": 46, "y": 385, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[842.0,848.0,855.0,861.0,868.0,875.0,881.0,888.0,895.0,902.0,909.0,916.0,  923.0,925.0,927.0,930.0,932.0,934.0,936.0,939.0,941.0,943.0,946.0,948.0,  950.0,952.0,954.0,955.0,957.0,959.0,961.0,962.0,964.0,966.0,968.0,970.0,  971.0,973.0,975.0,977.0,979.0,980.0,982.0,984.0,986.0,988.0,989.0,991.0,  993.0,995.0,997.0,999.0,1000.0,1002.0,1004.0,1006.0,1008.0,1010.0,  1012.0,1013.0,1015.0,1017.0,1019.0,1021.0,1023.0,1025.0,1027.0,1029.0,  1030.0,1032.0,1034.0,1036.0,1015.0,1017.0,1019.0,1021.0,1023.0,1025.0,  1027.0,1029.0,1030.0,1032.0,1034.0,1036.0,1015.0,1017.0,1019.0,1021.0,  1023.0,1025.0,1027.0,1029.0,1030.0,1032.0,1034.0,1036.0,1015.0,1017.0,  1019.0,1021.0,1023.0,1025.0,1027.0,1029.0,1030.0,1032.0,1034.0,1036.0], [115000.0,115165.353,115330.943,115496.772,115662.839,115829.145,  115995.69,116162.474,116329.498,116496.762,116664.267,116832.013,  117000.0,117124.272,117248.675,117373.211,117497.878,117622.679,  117747.611,117872.677,117997.875,118123.207,118248.671,118374.269,  118500.0,118600.777,118701.64,118802.589,118903.624,119004.744,  119105.951,119207.243,119308.622,119410.087,119511.638,119613.276,  119715.0,119816.811,119918.708,120020.692,120122.762,120224.919,  120327.164,120429.495,120531.913,120634.418,120737.011,120839.69,  120942.458,121045.312,121148.254,121251.283,121354.401,121457.605,  121560.898,121664.278,121767.747,121871.303,121974.947,122078.68,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373,  122182.5,122286.409,122390.407,122494.493,122598.667,122702.93,  122807.282,122911.722,123016.251,123120.869,123225.576,123330.373], [18.6,19.5,21.6,20.3,24.2,21.5,23.3,21.8,18.6,19.5,21.6,20.3,24.2,21.5,  23.3,21.8,18.8,18.7,18.2,16.3,17.7,18.9,19.4,21.3,22.9,24.98,25.5,22.8,  20.67,18.73,18.72,17.19,18.46,19.95,20.91,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59,22.0,22.55,23.58,22.45,  20.69,18.22,17.47,17.23,18.26,18.74,19.98,20.59]],[independent_variables, historic_projected_totaltime])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_proj_independent_variables", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical and Projected Independent Variables", "units": null, "w": "184", "x": 43, "y": 109, "z": 1}, {"color": null, "definition": "result = concat_index( historic_time, time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "historic_projected_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historic & Projected Time", "units": null, "w": "100", "x": "166", "y": "243", "z": 1}, {"color": "#4CBCFF", "definition": "_historic_data = change_index( cdm_hist_proj_independent_variables, historic_projected_totaltime, historic_time )\n_chosen_variables = change_index( _historic_data, independent_variables, independent_variables_chosen )\n\n_df = _chosen_variables.to_dataframe( 'value' ).pivot_table( values = 'value', index = 'historic_time', columns = 'independent_variables_chosen' ).reset_index()#.drop( columns = 'historic_time')\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_independent_variables", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historical Independent Variables", "units": null, "w": "184", "x": 273, "y": 109, "z": 1}, {"color": "#4CBCFF", "definition": "_projected_data = change_index( cdm_hist_proj_independent_variables, historic_projected_totaltime, projected_time )\n_chosen_variables = change_index( _projected_data, independent_variables, independent_variables_chosen )\n\n_df = _chosen_variables.to_dataframe( 'value' ).pivot_table( values = 'value', index = 'projected_time', columns = 'independent_variables_chosen' ).reset_index()#.drop( columns = 'projected_time')\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_proj_independent_variables", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Independent Variables", "units": null, "w": "184", "x": 273, "y": 156, "z": 1}, {"color": null, "definition": "result = subset( get_pos(time) > 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "projected_time", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Time", "units": null, "w": "100", "x": "813", "y": "175", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "ARIMA", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node117", "moduleId": "arima_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 57, "y": 77, "z": -1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_arima_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist().as_text()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_summary", "moduleId": "arima_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Summary", "units": null, "w": "184", "x": 306, "y": 201, "z": 1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_ols_linear_reg_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist().as_text()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_summary", "moduleId": "ols_linear_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Summary", "units": null, "w": "184", "x": 275, "y": 148, "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "OLS Quadratic Regression", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node118", "moduleId": "ols_quadratic_regression_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 52, "y": 71, "z": -1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_ols_quad_reg_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist().as_text()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_summary", "moduleId": "ols_quadratic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Summary", "units": null, "w": "184", "x": 302, "y": 196, "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "OLS Cubic Regression", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node119", "moduleId": "ols_cubic_regression_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 41, "y": 89, "z": -1}, {"color": "#CCCCCC", "definition": "result = subscript( cdm_ols_cubic_reg_model_results.Summary, [product_families, sales_channels], [cdm_choice_product_family, cdm_choice_sales_channel] ).values.tolist().as_text()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_summary", "moduleId": "ols_cubic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Summary", "units": null, "w": "184", "x": 290, "y": 217, "z": 1}, {"color": null, "definition": "result = pd.Index(['Linear Regression','Quadratic Regression','Cubic Regression','ARIMA'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_models", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Models", "units": null, "w": "100", "x": "143", "y": "123", "z": 1}, {"color": "#4CBCFF", "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node5", "moduleId": "cdm_regressions_mod", "nodeClass": "cube", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": "737", "y": "221", "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node6", "moduleId": "cdm_regressions_mod", "nodeClass": "cube", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1115, "y": 445, "z": 1}, {"color": "#CCCCCC", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = np.nan )\n\nresult = xr.concat( [_observed_data,cdm_ols_linear_reg_model_results.Regression,cdm_ols_quad_reg_model_results.Regression,cdm_ols_cubic_reg_model_results.Regression,cdm_arima_model_results.Regression], dim = regression_models_observed_data )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_prediction_comp", "moduleId": "models_comparison_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Predictions Comparison", "units": null, "w": "184", "x": 85, "y": 136, "z": 1}, {"color": "#FFFFFF", "definition": "result = 0", "description": "Library used: Statsmodels\n( https://www.statsmodels.org/stable/index.html )", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "node124", "moduleId": "cdm_regressions_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "296", "x": "38", "y": "73", "z": -1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray(['No','Yes','Yes'],[independent_variables]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ind_variables_sel", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Independent Variables Selection", "units": null, "w": "184", "x": 43, "y": 245, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[  1.    ,  0.8165,  0.7649,  0.7407,  0.7267,  0.7176,  0.7111,  0.7064,    0.7027,  0.6998,  0.6974,  0.6955,  0.6938,  0.6924,  0.6912,  0.6901,    0.6892,  0.6884,  0.6876,  0.687 ,  0.6864,  0.6858,  0.6853,  0.6848,    0.6844,  0.684 ,  0.6837,  0.6834,  0.683 ,  0.6828,  0.6825,  0.6822,    0.682 ,  0.6818,  0.6816,  0.6814,  0.6812,  0.681 ,  0.6808,  0.6807,    0.6805,  0.6804,  0.6802,  0.6801,  0.68  ,  0.6799,  0.6797,  0.6796,    0.6795,  0.6794,  0.6793,  0.6792,  0.6791,  0.6791,  0.679 ,  0.6789,    0.6788,  0.6787,  0.6787,  0.6786,  0.6785,  0.6785,  0.6784,  0.6783,    0.6783,  0.6782,  0.6782,  0.6781,  0.6781,  0.678 ,  0.678 ,  0.6779,    0.6779,  0.6778,  0.6778,  0.6777,  0.6777,  0.6776,  0.6776,  0.6776,    0.6775,  0.6775,  0.6775,  0.6774,  0.6774,  0.6774,  0.6773,  0.6773,    0.6773,  0.6772,  0.6772,  0.6772,  0.6771,  0.6771,  0.6771,  0.6771,    0.677 ,  0.677 ,  0.677 ,  0.677 ,  0.6745], [  3.0777,  1.8856,  1.6377,  1.5332,  1.4759,  1.4398,  1.4149,  1.3968,    1.383 ,  1.3722,  1.3634,  1.3562,  1.3502,  1.345 ,  1.3406,  1.3368,    1.3334,  1.3304,  1.3277,  1.3253,  1.3232,  1.3212,  1.3195,  1.3178,    1.3163,  1.315 ,  1.3137,  1.3125,  1.3114,  1.3104,  1.3095,  1.3086,    1.3077,  1.307 ,  1.3062,  1.3055,  1.3049,  1.3042,  1.3036,  1.3031,    1.3025,  1.302 ,  1.3016,  1.3011,  1.3007,  1.3002,  1.2998,  1.2994,    1.2991,  1.2987,  1.2984,  1.298 ,  1.2977,  1.2974,  1.2971,  1.2969,    1.2966,  1.2963,  1.2961,  1.2958,  1.2956,  1.2954,  1.2951,  1.2949,    1.2947,  1.2945,  1.2943,  1.2941,  1.2939,  1.2938,  1.2936,  1.2934,    1.2933,  1.2931,  1.2929,  1.2928,  1.2926,  1.2925,  1.2924,  1.2922,    1.2921,  1.292 ,  1.2918,  1.2917,  1.2916,  1.2915,  1.2914,  1.2912,    1.2911,  1.291 ,  1.2909,  1.2908,  1.2907,  1.2906,  1.2905,  1.2904,    1.2903,  1.2903,  1.2902,  1.2901,  1.2816], [  6.3137,  2.92  ,  2.3534,  2.1318,  2.015 ,  1.9432,  1.8946,  1.8595,    1.8331,  1.8125,  1.7959,  1.7823,  1.7709,  1.7613,  1.7531,  1.7459,    1.7396,  1.7341,  1.7291,  1.7247,  1.7207,  1.7171,  1.7139,  1.7109,    1.7081,  1.7056,  1.7033,  1.7011,  1.6991,  1.6973,  1.6955,  1.6939,    1.6924,  1.6909,  1.6896,  1.6883,  1.6871,  1.686 ,  1.6849,  1.6839,    1.6829,  1.682 ,  1.6811,  1.6802,  1.6794,  1.6787,  1.6779,  1.6772,    1.6766,  1.6759,  1.6753,  1.6747,  1.6741,  1.6736,  1.673 ,  1.6725,    1.672 ,  1.6716,  1.6711,  1.6706,  1.6702,  1.6698,  1.6694,  1.669 ,    1.6686,  1.6683,  1.6679,  1.6676,  1.6672,  1.6669,  1.6666,  1.6663,    1.666 ,  1.6657,  1.6654,  1.6652,  1.6649,  1.6646,  1.6644,  1.6641,    1.6639,  1.6636,  1.6634,  1.6632,  1.663 ,  1.6628,  1.6626,  1.6624,    1.6622,  1.662 ,  1.6618,  1.6616,  1.6614,  1.6612,  1.6611,  1.6609,    1.6607,  1.6606,  1.6604,  1.6602,  1.6449], [ 12.7062,  4.3027,  3.1824,  2.7765,  2.5706,  2.4469,  2.3646,  2.306 ,    2.2622,  2.2281,  2.201 ,  2.1788,  2.1604,  2.1448,  2.1315,  2.1199,    2.1098,  2.1009,  2.093 ,  2.086 ,  2.0796,  2.0739,  2.0687,  2.0639,    2.0595,  2.0555,  2.0518,  2.0484,  2.0452,  2.0423,  2.0395,  2.0369,    2.0345,  2.0322,  2.0301,  2.0281,  2.0262,  2.0244,  2.0227,  2.0211,    2.0195,  2.0181,  2.0167,  2.0154,  2.0141,  2.0129,  2.0117,  2.0106,    2.0096,  2.0086,  2.0076,  2.0066,  2.0057,  2.0049,  2.004 ,  2.0032,    2.0025,  2.0017,  2.001 ,  2.0003,  1.9996,  1.999 ,  1.9983,  1.9977,    1.9971,  1.9966,  1.996 ,  1.9955,  1.9949,  1.9944,  1.9939,  1.9935,    1.993 ,  1.9925,  1.9921,  1.9917,  1.9913,  1.9908,  1.9905,  1.9901,    1.9897,  1.9893,  1.989 ,  1.9886,  1.9883,  1.9879,  1.9876,  1.9873,    1.987 ,  1.9867,  1.9864,  1.9861,  1.9858,  1.9855,  1.9852,  1.985 ,    1.9847,  1.9845,  1.9842,  1.984 ,  1.96  ], [ 31.821 ,  6.9645,  4.5407,  3.7469,  3.3649,  3.1427,  2.9979,  2.8965,    2.8214,  2.7638,  2.7181,  2.681 ,  2.6503,  2.6245,  2.6025,  2.5835,    2.5669,  2.5524,  2.5395,  2.528 ,  2.5176,  2.5083,  2.4999,  2.4922,    2.4851,  2.4786,  2.4727,  2.4671,  2.462 ,  2.4573,  2.4528,  2.4487,    2.4448,  2.4411,  2.4377,  2.4345,  2.4314,  2.4286,  2.4258,  2.4233,    2.4208,  2.4185,  2.4163,  2.4141,  2.4121,  2.4102,  2.4083,  2.4066,    2.4049,  2.4033,  2.4017,  2.4002,  2.3988,  2.3974,  2.3961,  2.3948,    2.3936,  2.3924,  2.3912,  2.3901,  2.389 ,  2.388 ,  2.387 ,  2.386 ,    2.3851,  2.3842,  2.3833,  2.3824,  2.3816,  2.3808,  2.38  ,  2.3793,    2.3785,  2.3778,  2.3771,  2.3764,  2.3758,  2.3751,  2.3745,  2.3739,    2.3733,  2.3727,  2.3721,  2.3716,  2.371 ,  2.3705,  2.37  ,  2.3695,    2.369 ,  2.3685,  2.368 ,  2.3676,  2.3671,  2.3667,  2.3662,  2.3658,    2.3654,  2.365 ,  2.3646,  2.3642,  2.3263], [ 63.6559,  9.925 ,  5.8408,  4.6041,  4.0321,  3.7074,  3.4995,  3.3554,    3.2498,  3.1693,  3.1058,  3.0545,  3.0123,  2.9768,  2.9467,  2.9208,    2.8982,  2.8784,  2.8609,  2.8453,  2.8314,  2.8188,  2.8073,  2.797 ,    2.7874,  2.7787,  2.7707,  2.7633,  2.7564,  2.75  ,  2.744 ,  2.7385,    2.7333,  2.7284,  2.7238,  2.7195,  2.7154,  2.7116,  2.7079,  2.7045,    2.7012,  2.6981,  2.6951,  2.6923,  2.6896,  2.687 ,  2.6846,  2.6822,    2.68  ,  2.6778,  2.6757,  2.6737,  2.6718,  2.67  ,  2.6682,  2.6665,    2.6649,  2.6633,  2.6618,  2.6603,  2.6589,  2.6575,  2.6561,  2.6549,    2.6536,  2.6524,  2.6512,  2.6501,  2.649 ,  2.6479,  2.6469,  2.6458,    2.6449,  2.6439,  2.643 ,  2.6421,  2.6412,  2.6403,  2.6395,  2.6387,    2.6379,  2.6371,  2.6364,  2.6356,  2.6349,  2.6342,  2.6335,  2.6329,    2.6322,  2.6316,  2.6309,  2.6303,  2.6297,  2.6291,  2.6286,  2.628 ,    2.6275,  2.6269,  2.6264,  2.6259,  2.5758]], [level_of_significance_div_2, t_values])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_student_t_distrib_table", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Student's T Distribution Table", "units": null, "w": "184", "x": 43, "y": 338, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([0.25,0.1,0.05,0.025,0.01,0.005])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "level_of_significance_div_2", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Level of Significance / 2", "units": null, "w": "100", "x": "40", "y": "231", "z": 1}, {"color": "#9999ff", "definition": "_sequence = []\n\nfor number in range(1,101):\n    _sequence.append( str( number ) )\n\n_sequence.append( '> 100' )\n\nresult = pd.Index( _sequence )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "t_values", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "T Values", "units": null, "w": "100", "x": "143", "y": "231", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Other Parameters", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "362", "identifier": "node125", "moduleId": "inputs_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "458", "x": 22, "y": 213, "z": -1}, {"color": "#9999ff", "definition": "result = copy_index( xr.DataArray(level_of_significance_div_2.values, [level_of_significance_div_2]) * 2 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "levels_of_significance", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Levels of Significance", "units": null, "w": "100", "x": "244", "y": "231", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(levels_of_significance,1,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_choice_level_of_significance", "moduleId": "inputs_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Level of Significance", "units": null, "w": "176", "x": 99, "y": 291, "z": 1}, {"color": "#4CFFA6", "definition": "result = cdm_choice_level_of_significance", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab0751df935204758ba30aa71b1d79ee3", "moduleId": "inputs_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_choice_level_of_significance", "picture": null, "title": "Level of Significance", "units": null, "w": "256", "x": 46, "y": 291, "z": 1}, {"color": "#4CBCFF", "definition": "_df_aux = len( historic_time.values ) - len( independent_variables_chosen.values )\n_df = str ( _df_aux ) if _df_aux <= 100 else '> 100'\n_level_of_significance_div_2 = cdm_choice_level_of_significance / 2\n\nresult = np.asscalar( subscript( cdm_student_t_distrib_table, [t_values, level_of_significance_div_2], [_df, _level_of_significance_div_2] ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_t", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "t*", "units": null, "w": "184", "x": 273, "y": 338, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Observed Data / Regression','ICL','SCL'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_and_confid_levels", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression and Confidence Levels", "units": null, "w": "100", "x": "345", "y": "231", "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tools.tools import add_constant\n\n_dependent_var = cdm_historical_sales\n\n_hist_independent_vars = cdm_hist_independent_variables.iloc[:,1:]\nfor _variable in _hist_independent_vars.columns:\n    _hist_independent_vars[_variable + '**2'] = _hist_independent_vars[_variable] ** 2\n    _hist_independent_vars[_variable + '**3'] = _hist_independent_vars[_variable] ** 3\n_hist_independent_vars_w_constant = add_constant( _hist_independent_vars )\n\n_proj_independent_vars = cdm_proj_independent_variables.iloc[:,1:]\nfor _variable in _proj_independent_vars.columns:\n    _proj_independent_vars[_variable + '**2'] = _proj_independent_vars[_variable] ** 2\n    _proj_independent_vars[_variable + '**3'] = _proj_independent_vars[_variable] ** 3\n_proj_independent_vars_w_constant = add_constant( _proj_independent_vars )\n\n_historic_time_length = len( historic_time.values )\n_hist_predicts_array = np.empty( (0,_historic_time_length) )\n_proj_length = len( projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_predicts_array = np.empty( (0, _proj_length) )\n_r_squared = []\n_adj_r_squared = []\n_std_dev_reg = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        _model = OLS( _dependent_var[product, channel], _hist_independent_vars_w_constant ).fit()\n        _hist_predict = _model.predict( _hist_independent_vars_w_constant )\n        _hist_predicts_array = np.append( _hist_predicts_array, [_hist_predict], axis = 0 )\n        _predict = _model.predict( _proj_independent_vars_w_constant )\n        _predicts_array = np.append( _predicts_array, [_predict], axis = 0 )\n        _r_squared.append( _model.rsquared_adj )\n        _adj_r_squared.append( _model.rsquared_adj )\n        _std_dev_reg.append( np.sqrt( _model.scale ) )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n\n_hist_predicts_array_aux = _hist_predicts_array.reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_predicts_array_aux = _predicts_array.reshape(_product_families_length,_sales_channels_length,_proj_length)\n_r_squared_aux = np.array(_r_squared).reshape(_product_families_length,_sales_channels_length)\n_adj_r_squared_aux = np.array(_adj_r_squared).reshape(_product_families_length,_sales_channels_length)\n_std_dev_reg_aux = np.array(_std_dev_reg).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n\n_hist_proj = xr.DataArray( _hist_predicts_array_aux, [product_families, sales_channels,historic_time] )\n_proj = create_dataarray( _predicts_array_aux, [product_families, sales_channels, projected_time] )\n_regression = change_index( _hist_proj, historic_time, historic_projected_time, defaultValue = 0. ) + change_index( _proj, projected_time, historic_projected_time, defaultValue = 0. )\n_r_squared = xr.DataArray( _r_squared_aux, [product_families, sales_channels] )\n_adjusted_r_squared = xr.DataArray( _adj_r_squared_aux, [product_families, sales_channels] )\n_std_dev_regression = xr.DataArray( _std_dev_reg_aux, [product_families, sales_channels] )\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summaries = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'RSquared': _r_squared, 'AdjRSquared': _adjusted_r_squared, 'StdDevRegression': _std_dev_regression, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summaries})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_results", "moduleId": "ols_cubic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Model Results", "units": null, "w": "184", "x": 64, "y": 125, "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tools.tools import add_constant\n\n_dependent_var = cdm_historical_sales\n\n_hist_independent_vars = cdm_hist_independent_variables.iloc[:,1:]\nfor _variable in _hist_independent_vars.columns:\n    _hist_independent_vars[_variable + '**2'] = _hist_independent_vars[_variable] ** 2\n_hist_independent_vars_w_constant = add_constant( _hist_independent_vars )\n\n_proj_independent_vars = cdm_proj_independent_variables.iloc[:,1:]\nfor _variable in _proj_independent_vars.columns:\n    _proj_independent_vars[_variable + '**2'] = _proj_independent_vars[_variable] ** 2\n_proj_independent_vars_w_constant = add_constant( _proj_independent_vars )\n\n_historic_time_length = len( historic_time.values )\n_hist_predicts_array = np.empty( (0,_historic_time_length) )\n_proj_length = len( projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_predicts_array = np.empty( (0, _proj_length) )\n_r_squared = []\n_adj_r_squared = []\n_std_dev_reg = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        _model = OLS( _dependent_var[product,channel], _hist_independent_vars_w_constant ).fit()\n        _hist_predict = _model.predict( _hist_independent_vars_w_constant )\n        _hist_predicts_array = np.append( _hist_predicts_array, [_hist_predict], axis = 0 )\n        _predict = _model.predict( _proj_independent_vars_w_constant )\n        _predicts_array = np.append( _predicts_array, [_predict], axis = 0 )\n        _r_squared.append( _model.rsquared )\n        _adj_r_squared.append( _model.rsquared_adj )\n        _std_dev_reg.append( np.sqrt( _model.scale ) )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n\n_hist_predicts_array_aux = _hist_predicts_array.reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_predicts_array_aux = _predicts_array.reshape(_product_families_length,_sales_channels_length,_proj_length)\n_r_squared_aux = np.array(_r_squared).reshape(_product_families_length,_sales_channels_length)\n_adj_r_squared_aux = np.array(_adj_r_squared).reshape(_product_families_length,_sales_channels_length)\n_std_dev_reg_aux = np.array(_std_dev_reg).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n\n_hist_proj = xr.DataArray( _hist_predicts_array_aux, [product_families, sales_channels,historic_time] )\n_proj = create_dataarray( _predicts_array_aux, [product_families, sales_channels, projected_time] )\n_regression = change_index( _hist_proj, historic_time, historic_projected_time, defaultValue = 0. ) + change_index( _proj, projected_time, historic_projected_time, defaultValue = 0. )\n_r_squared = xr.DataArray( _r_squared_aux, [product_families, sales_channels] )\n_adjusted_r_squared = xr.DataArray( _adj_r_squared_aux, [product_families, sales_channels] )\n_std_dev_regression = xr.DataArray( _std_dev_reg_aux, [product_families, sales_channels] )\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summaries = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'RSquared': _r_squared, 'AdjRSquared': _adjusted_r_squared, 'StdDevRegression': _std_dev_regression, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summaries})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_results", "moduleId": "ols_quadratic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Model Results", "units": null, "w": "184", "x": 76, "y": 103, "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tools.tools import add_constant\n\n_dependent_var = cdm_historical_sales\n_hist_independent_vars = cdm_hist_independent_variables.iloc[:,1:]\n_independent_vars_w_constant = add_constant( _hist_independent_vars )\n_proj_independent_vars = cdm_proj_independent_variables.iloc[:,1:]\n_proj_independent_vars_w_constant = add_constant( _proj_independent_vars )\n_historic_time_length = len( historic_time.values )\n_hist_predicts_array = np.empty( (0,_historic_time_length) )\n_proj_length = len( projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_predicts_array = np.empty( (0, _proj_length) )\n_r_squared = []\n_adj_r_squared = []\n_std_dev_reg = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        _model = OLS( _dependent_var[product,channel], _independent_vars_w_constant ).fit()\n        _hist_predict = _model.predict( _independent_vars_w_constant )\n        _hist_predicts_array = np.append( _hist_predicts_array, [_hist_predict], axis = 0 )\n        _predict = _model.predict( _proj_independent_vars_w_constant )\n        _predicts_array = np.append( _predicts_array, [_predict], axis = 0 )\n        _r_squared.append( _model.rsquared )\n        _adj_r_squared.append( _model.rsquared_adj )\n        _std_dev_reg.append( np.sqrt( _model.scale ) )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n        \n_hist_predicts_array_aux = _hist_predicts_array.reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_predicts_array_aux = _predicts_array.reshape(_product_families_length,_sales_channels_length,_proj_length)\n_r_squared_aux = np.array(_r_squared).reshape(_product_families_length,_sales_channels_length)\n_adj_r_squared_aux = np.array(_adj_r_squared).reshape(_product_families_length,_sales_channels_length)\n_std_dev_reg_aux = np.array(_std_dev_reg).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n\n_hist_proj = xr.DataArray( _hist_predicts_array_aux, [product_families, sales_channels,historic_time] )\n_proj = create_dataarray( _predicts_array_aux, [product_families, sales_channels, projected_time] )\n_regression = change_index( _hist_proj, historic_time, historic_projected_time, defaultValue = 0. ) + change_index( _proj, projected_time, historic_projected_time, defaultValue = 0. )\n_r_squared = xr.DataArray( _r_squared_aux, [product_families, sales_channels] )\n_adjusted_r_squared = xr.DataArray( _adj_r_squared_aux, [product_families, sales_channels] )\n_std_dev_regression = xr.DataArray( _std_dev_reg_aux, [product_families, sales_channels] )\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summaries = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'RSquared': _r_squared, 'AdjRSquared': _adjusted_r_squared, 'StdDevRegression': _std_dev_regression, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summaries})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_results", "moduleId": "ols_linear_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Results", "units": null, "w": "184", "x": 49, "y": 56, "z": 1}, {"color": "#4CBCFF", "definition": "from statsmodels.tsa.arima_model import ARIMA\n\n_dependent_var = cdm_historical_sales\n\n_historic_time_length = len( historic_time.values )\n_hist_proj_time_length = len( historic_projected_time.values )\n_product_families_length = len( product_families.values )\n_sales_channels_length = len( sales_channels.values )\n_projection_array = np.empty( (0, _hist_proj_time_length) )\n_resid = []\n_resid_df = []\n_log_lh = []\n_aic = []\n_bic = []\n_smry = []\n\nfor product in range( len(product_families.values) ):\n    for channel in range( len(sales_channels.values) ):\n        try:\n            _model = ARIMA( _dependent_var[product, channel], (2,0,1) ).fit()\n            _predict = _model.predict( start = 0, end = _hist_proj_time_length - 1 )\n            if np.isnan( np.sum( _predict ) ) == True:\n                _model = ARIMA( _dependent_var[product, channel], (2,0,0) ).fit()\n                _predict = _model.predict( start = 0, end = _hist_proj_time_length - 1 )\n        except:\n            _model = ARIMA( _dependent_var[product, channel], (1,0,0) ).fit()\n            _predict = _model.predict( start = 0, end = _hist_proj_time_length - 1 )\n        _projection_array = np.append( _projection_array, [_predict], axis = 0 )\n        _resid.append( _model.resid )\n        _resid_df.append( _model.df_resid )\n        _log_lh.append( _model.llf )\n        _aic.append( _model.aic )\n        _bic.append( _model.bic )\n        _smry.append( _model.summary() )\n\n_projection_array_aux = _projection_array.reshape(_product_families_length,_sales_channels_length,_hist_proj_time_length)\n_resid_aux = np.array(_resid).reshape(_product_families_length,_sales_channels_length,_historic_time_length)\n_resid_df_aux = np.array(_resid_df).reshape(_product_families_length,_sales_channels_length)\n_log_lh_aux = np.array(_log_lh).reshape(_product_families_length,_sales_channels_length)\n_aic_aux = np.array(_aic).reshape(_product_families_length,_sales_channels_length)\n_bic_aux = np.array(_bic).reshape(_product_families_length,_sales_channels_length)\n_smry_aux = np.array(_smry).reshape(_product_families_length,_sales_channels_length)\n\n_regression = xr.DataArray( _projection_array_aux, [product_families, sales_channels, historic_projected_time] )\n_residual = xr.DataArray( _resid_aux, [product_families, sales_channels, historic_time] )\n_sqr_residual = ( _residual ** 2 ).sum(historic_time.name)\n_residual_deg_of_freedom =xr.DataArray( _resid_df_aux, [product_families, sales_channels] )\n_mean_sqr_residual = _sqr_residual / _residual_deg_of_freedom\n_log_likelihood = xr.DataArray( _log_lh_aux, [product_families, sales_channels] )\n_akaike_ic = xr.DataArray( _aic_aux, [product_families, sales_channels] )\n_bayes_ic = xr.DataArray( _bic_aux, [product_families, sales_channels] )\n_summary = xr.DataArray( _smry_aux, [product_families, sales_channels] )\n\nresult = xr.Dataset( {'Regression': _regression, 'MeanSqrResidual':_mean_sqr_residual, 'LogLikelihood': _log_likelihood, 'AkaikeInformationCriteria': _akaike_ic, 'BayesInformationCriteria': _bayes_ic, 'Summary': _summary} ) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_results", "moduleId": "arima_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Results", "units": null, "w": "184", "x": 80, "y": 108, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_ols_linear_reg_model_results.Regression)\n_icl = cdm_ols_linear_reg_model_results.Regression - cdm_t * cdm_ols_linear_reg_model_results.StdDevRegression\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_ols_linear_reg_model_results.Regression + cdm_t * cdm_ols_linear_reg_model_results.StdDevRegression\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_confid_bands_an", "moduleId": "ols_linear_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Confidence Bands Analysis", "units": null, "w": "184", "x": 49, "y": 101, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_ols_quad_reg_model_results.Regression)\n_icl = cdm_ols_quad_reg_model_results.Regression - cdm_t * cdm_ols_quad_reg_model_results.StdDevRegression\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_ols_quad_reg_model_results.Regression + cdm_t * cdm_ols_quad_reg_model_results.StdDevRegression\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_confid_bands_an", "moduleId": "ols_quadratic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Reg Model Confidence Bands Analysis", "units": null, "w": "184", "x": 76, "y": 149, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_ols_cubic_reg_model_results.Regression)\n_icl = cdm_ols_cubic_reg_model_results.Regression - cdm_t * cdm_ols_cubic_reg_model_results.StdDevRegression\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_ols_cubic_reg_model_results.Regression + cdm_t * cdm_ols_cubic_reg_model_results.StdDevRegression\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_confid_bands_an", "moduleId": "ols_cubic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Reg Model Confidence Bands Analysis", "units": null, "w": "184", "x": 64, "y": 170, "z": 1}, {"color": "#4CBCFF", "definition": "_observed_data = change_index( cdm_hist_sales_sales_chn_prod_family, historic_time, historic_projected_time, defaultValue = 0. )\n_observed_regression = xr.where( to_dataarray(historic_projected_time) < first_projected_month, _observed_data, cdm_arima_model_results.Regression)\n_icl = cdm_arima_model_results.Regression - cdm_t * xr.ufuncs.sqrt( cdm_arima_model_results.MeanSqrResidual )\n_icl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _icl ) )\n_scl = cdm_arima_model_results.Regression + cdm_t * xr.ufuncs.sqrt( cdm_arima_model_results.MeanSqrResidual )\n_scl = xr.where( to_dataarray(historic_projected_time) < last_historical_month, np.nan, xr.where( to_dataarray(historic_projected_time) == last_historical_month, _observed_data, _scl ) )\n\nresult = xr.concat( [_observed_regression, _icl, _scl], dim = regression_and_confid_levels)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_confid_bands_an", "moduleId": "arima_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Confidence Bands Analysis", "units": null, "w": "184", "x": 80, "y": 154, "z": 1}, {"color": "#4CBCFF", "definition": "result = np.asscalar( subset( get_pos(projected_time) == 0 ).values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "first_projected_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "First Projected Month", "units": null, "w": "184", "x": "489", "y": "366", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"R-Squared\",\"Adjusted R-Squared\",\"Log-Likelihood\",\"Akaike's Inf Criteria\", \"Bayes's Inf Criteria\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_results", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Results", "units": null, "w": "100", "x": "446", "y": "231", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.concat( [cdm_ols_linear_reg_model_results.RSquared, cdm_ols_linear_reg_model_results.AdjRSquared, cdm_ols_linear_reg_model_results.LogLikelihood, cdm_ols_linear_reg_model_results.AkaikeInformationCriteria, cdm_ols_linear_reg_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_reg_res", "moduleId": "ols_linear_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Regression Results", "units": null, "w": "184", "x": 275, "y": 56, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.concat( [cdm_ols_quad_reg_model_results.RSquared, cdm_ols_quad_reg_model_results.AdjRSquared, cdm_ols_quad_reg_model_results.LogLikelihood, cdm_ols_quad_reg_model_results.AkaikeInformationCriteria, cdm_ols_quad_reg_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_reg_res", "moduleId": "ols_quadratic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Model Regression Results", "units": null, "w": "184", "x": 302, "y": 103, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.concat( [cdm_ols_cubic_reg_model_results.RSquared, cdm_ols_cubic_reg_model_results.AdjRSquared, cdm_ols_cubic_reg_model_results.LogLikelihood, cdm_ols_cubic_reg_model_results.AkaikeInformationCriteria, cdm_ols_cubic_reg_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_reg_res", "moduleId": "ols_cubic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Model Regression Results", "units": null, "w": "184", "x": 290, "y": 125, "z": 1}, {"color": "#4CBCFF", "definition": "_historical_data = cdm_hist_sales_sales_chn_prod_family\n_historical_data_avg = xr.where( get_pos(historic_time) >= 0, _historical_data.mean(historic_time.name), 0 )\n_historical_estimation = change_index( cdm_arima_model_results.Regression, historic_projected_time, historic_time )\n_r_squared = ( ( _historical_estimation - _historical_data_avg ) ** 2 ).sum(historic_time.name) / ( ( _historical_data - _historical_data_avg ) ** 2 ).sum(historic_time.name)\n\n_historic_time_length = len( historic_time.values )\n_independent_vars_length = len( independent_variables_chosen.values )\n\n_adj_r_squared = 1 - ( ( ( 1 - _r_squared ) * ( _historic_time_length - 1 ) ) / ( _historic_time_length - _independent_vars_length - 1 ) )\n\nresult = xr.concat( [_r_squared, _adj_r_squared, cdm_arima_model_results.LogLikelihood, cdm_arima_model_results.AkaikeInformationCriteria, cdm_arima_model_results.BayesInformationCriteria], dim = regression_results )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_reg_res", "moduleId": "arima_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Regression Results", "units": null, "w": "184", "x": 306, "y": 108, "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.concat( [cdm_ols_linear_reg_model_reg_res, cdm_ols_quad_reg_model_reg_res, cdm_ols_cubic_reg_model_reg_res, cdm_arima_model_reg_res], dim = regression_models )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_comp", "moduleId": "models_comparison_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results Comparison", "units": null, "w": "184", "x": 311, "y": 136, "z": 1}, {"color": null, "definition": "result = concat_index( 'Observed Data', regression_models )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_models_observed_data", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Models + Observed Data", "units": null, "w": "100", "x": "244", "y": "123", "z": 1}, {"color": "#4CBCFF", "definition": "_results_for_r_sqr = xr.where( (cdm_models_reg_results_comp < 0) | (cdm_models_reg_results_comp > 1), 0, cdm_models_reg_results_comp )\n\nresult = xr.where( ( to_dataarray(regression_results) == 'R-Squared' ) | ( to_dataarray(regression_results) == 'Adjusted R-Squared' ), _results_for_r_sqr.max(regression_models.name), cdm_models_reg_results_comp.min(regression_models.name) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_max_min", "moduleId": "models_comparison_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results Max (Min)", "units": null, "w": "184", "x": 311, "y": 184, "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Models Comparison", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "174", "identifier": "node131", "moduleId": "models_comparison_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "690", "x": 61, "y": 101, "z": -1}, {"color": "#9999ff", "definition": "result = subset( to_dataarray(independent_variables) != 'Population' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "gdp_and_temperature", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GDP and Temperature", "units": null, "w": "100", "x": "345", "y": "61", "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index( subscript( cdm_hist_proj_independent_variables, independent_variables, 'Population' ), historic_projected_totaltime, historic_time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_population", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Population", "units": null, "w": "184", "x": 42, "y": 480, "z": 1}, {"color": "#4CBCFF", "definition": "result = result = change_index( change_index( cdm_hist_proj_independent_variables, independent_variables, gdp_and_temperature ), historic_projected_totaltime, historic_time )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_hist_gdp_temperature", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GDP and Temperature", "units": null, "w": "184", "x": 42, "y": 528, "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_ols_linear_reg_model_results.AdjRSquared", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_linear_reg_model_adj_rsqr", "moduleId": "ols_linear_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression Model Adjusted R-Squared", "units": null, "w": "184", "x": 275, "y": 101, "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_ols_quad_reg_model_results.AdjRSquared", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_quad_reg_model_adj_rsqr", "moduleId": "ols_quadratic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression Model Adjusted R-Squared", "units": null, "w": "184", "x": 302, "y": 149, "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( cdm_arima_model_reg_res, regression_results, 'Adjusted R-Squared' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_arima_model_adj_rsqr", "moduleId": "arima_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ARIMA Model Adjusted R-Squared", "units": null, "w": "184", "x": 306, "y": 154, "z": 1}, {"color": "#4CBCFF", "definition": "result = cdm_ols_cubic_reg_model_results.AdjRSquared", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_ols_cubic_reg_model_adj_rsqr", "moduleId": "ols_cubic_regression_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression Model Adjusted R-Squared", "units": null, "w": "184", "x": 290, "y": 170, "z": 1}, {"color": "#4CFFA6", "definition": "result = cdm_choice_sales_channel", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4a166db2bbbd4520b8fab9a5f6b4f036_copy", "moduleId": "inputs_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "cdm_choice_sales_channel", "picture": null, "title": "Sales Channel", "units": null, "w": "224", "x": 46, "y": 432, "z": 1}, {"color": "#4cffa6", "definition": "result = choice( sales_channels,2, False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_choice_sales_channel", "moduleId": "inputs_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Channel", "units": null, "w": "140", "x": 73, "y": 432, "z": "-2"}, {"color": "#CCCCCC", "definition": "_reg_values = cdm_models_reg_results_max_min.round(2).astype(str)\n\nresult = xr.concat( [_reg_values, cdm_models_reg_results_best_fit_model], dim = regression_comparison_concepts )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_best_fit_value", "moduleId": "models_comparison_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results - Best Fit Value", "units": null, "w": "184", "x": 551, "y": 232, "z": 1}, {"color": "#4CBCFF", "definition": "_max_min_comparison = cdm_models_reg_results_max_min == cdm_models_reg_results_comp\n_cumulated = _max_min_comparison.cumsum( regression_models.name )\n_cumulated = xr.where( _max_min_comparison == True, _cumulated, 0 )\n_models_cube = to_dataarray( regression_models )\n\nresult = ( ( _cumulated == 1 ) * _models_cube ).sum(regression_models.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_models_reg_results_best_fit_model", "moduleId": "models_comparison_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Regression Results - Best Fit Model", "units": null, "w": "184", "x": 311, "y": 232, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Best Fit Value\",\"Best Fit Model\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "regression_comparison_concepts", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regression Comparison Concepts", "units": null, "w": "100", "x": "545", "y": "231", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_sales", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6a4df748c6db4de1ac3f6b8b1bbb0439", "moduleId": "fin_strategic_map_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_sales", "picture": null, "title": "Sales", "units": null, "w": "184", "x": "51", "y": "476", "z": 1}, {"color": "#4CBCFF", "definition": "result = aggregate( fin_sales, time_to_years, time, years )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_sales", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Sales", "units": null, "w": "184", "x": "51", "y": "523", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(years) <= 1, 0, fin_annual_sales / fin_annual_sales_growth_rate_tm1 - 1  )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_sales_growth_rate", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Sales Growth Rate", "units": null, "w": "184", "x": "505", "y": "523", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_annual_sales_growth_rate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_sales_growth_rate_db", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Sales Growth Rate Dashboard", "units": null, "w": "184", "x": "733", "y": "523", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Commercial Demand','+ Target Stock','- Projected Stock','Production Requirement','Capacity','Non Satisfied Production Req.','Planned Production'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "operation_by_line_concepts", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operation by Line Concepts", "units": null, "w": "100", "x": "187", "y": "138", "z": 1}, {"color": "#CCCCCC", "definition": "result = xr.concat( [sop_demand_by_line, sop_stock_goal_by_line, sop_stock_by_line, sop_production_req_by_line, sop_max_prod_capacity + empty_cube_time_scenarios_iterations, sop_production_req_by_line - sop_planned_production_by_line, sop_planned_production_by_line], dim = operation_by_line_concepts )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_operations_report_by_line", "moduleId": "sop_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operations Report by Line", "units": "gallons", "w": "184", "x": "288", "y": "630", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Inputs demand','+ Target stock','- Inputs stock at the end of previous period','-','= Total Inputs Request','Maximum Suppliers Capacity','--','Suppliers Production','+ Inputs stock at the end of previous period','---','= Total Available Inputs','----','Inputs Requirements Supplied','-----','Inputs Shortfall'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "operation_by_input_concepts", "moduleId": "sop_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operation by Input Concepts", "units": null, "w": "100", "x": "290", "y": "138", "z": 1}, {"color": "#CCCCCC", "definition": "_empty = empty_cube_time_scenarios_iterations + create_dataarray( 0., [production_inputs] )\n_suppliers_capacity = xr.where( get_pos(time) == 0, 0, sop_suppliers_capacity ) + _empty\n\nresult = xr.concat( [sop_ingredients_demand, sop_ingredients_demand * sop_ingredients_stock_pc, - sop_projected_init_ingredients_stock, _empty, sop_ingredients_requeriment, _suppliers_capacity, _empty, sop_suppliers_production, sop_projected_init_ingredients_stock, _empty, sop_available_ingredients, _empty, sop_supplied_ingredients, _empty, sop_non_supplied_ingredients], dim = operation_by_input_concepts )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_operations_report_by_prod_input", "moduleId": "sop_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operations Report by Production Input", "units": "gallons", "w": "184", "x": "516", "y": "630", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_ingredients_stock.shift( time = 1 ).fillna(0.)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_projected_init_ingredients_stock", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Projected Initial Ingredients Stock", "units": null, "w": "184", "x": "517", "y": "393", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_ingredients_demand - sop_supplied_ingredients", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_non_supplied_ingredients", "moduleId": "sop_production_planning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Non-Supplied Ingredients", "units": null, "w": "184", "x": "517", "y": "293", "z": 1}, {"color": "#CCCCCC", "definition": "_sales = fin_sales\n_cogs = - fin_supply_cost - fin_manpower_cost\n_opex = - fin_opex\n_dep_int_tax = - fin_depreciation + fin_net_interest_earned_lost - fin_income_tax\n\n_report = xr.concat( [_sales, _cogs, _opex, _dep_int_tax], dim = pl_waterfall_concepts )\n\nresult = _report / 1000000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_pl_waterfall", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Waterfall", "units": "MM$", "w": "184", "x": "524", "y": "1034", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Sales','Cost of Goods Sold','OPEX','Depreciation, Interests and Tax'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "pl_waterfall_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Waterfall Concepts", "units": null, "w": "100", "x": "259", "y": "74", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['EBITDA','Working Capital Variation and Income Tax','Investments','Interests, Loans and Dividends'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "cash_flow_waterfall_concepts", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Waterfall Concepts", "units": null, "w": "100", "x": "159", "y": "268", "z": 1}, {"color": "#CCCCCC", "definition": "_empty = empty_cube_time_scenarios_iterations\n\n_report = xr.concat( [fin_ebitda, fin_working_capital_variation - fin_income_tax, fin_cash_investing_activities + _empty, fin_cash_financing_activities], dim = cash_flow_waterfall_concepts )\n\nresult = _report / 1000000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_flow_waterfall", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Waterfall", "units": "MM$", "w": "184", "x": "496", "y": "550", "z": 1}, {"color": "#4CFFA6", "definition": "result = scenario_for_scorecard", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a968f4e33b3e249319df4dab34ca20ba9_copy", "moduleId": "fin_strategic_map_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "scenario_for_scorecard", "picture": null, "title": "Scenario for Scorecard", "units": null, "w": "264", "x": "54", "y": "79", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "mks_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Share Indexes", "units": null, "w": "146", "x": "237", "y": "79", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "mkp_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Prices Indexes", "units": null, "w": "146", "x": "425", "y": "79", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "pmk_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Potential Market Indexes", "units": null, "w": "146", "x": "56", "y": "79", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_reg_indexes_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Regressions Indexes", "units": null, "w": "184", "x": 40, "y": 398, "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "cpx_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Indexes", "units": null, "w": "146", "x": "56", "y": "159", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "opx_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX Indexes", "units": null, "w": "146", "x": "56", "y": "240", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "sop_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supply & Operation Planning Indexes", "units": null, "w": "146", "x": "237", "y": "159", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "log_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Logistics Indexes", "units": null, "w": "146", "x": "237", "y": "240", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "fin_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Indexes", "units": null, "w": "146", "x": "425", "y": "240", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Indexes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "372", "identifier": "node150", "moduleId": "indexes_mod_copy", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "574", "x": "28", "y": "42", "z": "-2"}, {"color": "#FFFF4B", "definition": "result = mkp_gallons_per_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a282d4f18ded24e63a1bed86a09576d2d", "moduleId": "mkp_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_gallons_per_product", "picture": null, "title": "Gallons per Product", "units": null, "w": "184", "x": "733", "y": "232", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Others", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "132", "identifier": "node151", "moduleId": "ast_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "704", "x": "41", "y": "539", "z": -1}, {"color": "#FFFF4B", "definition": "result = mkp_gallons_per_mcbrand_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa8c66c18a7e84237aa5d190ad13ee1f2", "moduleId": "mkp_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_gallons_per_mcbrand_product", "picture": null, "title": "Gallons per Main Competitor's Brand Product", "units": null, "w": "184", "x": "510", "y": "360", "z": 1}, {"color": "#FFFF4B", "definition": "result = mkp_gallons_per_other_brand_product", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1222d542e03642bf8786a1c926fb1f9e", "moduleId": "mkp_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mkp_gallons_per_other_brand_product", "picture": null, "title": "Gallons per Other Brand Product", "units": null, "w": "184", "x": "510", "y": "484", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ast_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Assumptions Indexes", "units": null, "w": "146", "x": "56", "y": "351", "z": 1}, {"color": "#CCCCCC", "definition": "_min = change_index( opx_drivers_projection, time, projected_time ).min( projected_time.name )\n_max = change_index( opx_drivers_projection, time, projected_time ).max( projected_time.name )\n\nresult = xr.where( get_pos(time) == 0, 0, xr.where( ( _max - _min ) == 0, 1, ( opx_drivers_projection - _min ) / ( _max - _min ) ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_normalized_drivers_projection", "moduleId": "opx_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized Drivers Projection", "units": null, "w": "184", "x": "296", "y": "296", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray( [10], [one_element_copy] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_number_of_iterations", "moduleId": "pmk_indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Number of Iterations", "units": null, "w": "184", "x": "120", "y": "58", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate( fin_pl_report, time_to_years, time, years ).reindex_like( get_pos(pl_concepts) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_pl_report", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual P&L Report", "units": "MM$", "w": "184", "x": "760", "y": "1034", "z": 1}, {"color": "#CCCCCC", "definition": "_vars = change_index( cdm_hist_proj_independent_variables, historic_projected_totaltime, historic_time )\n_min = _vars.min( historic_time.name )\n_max = _vars.max( historic_time.name )\n\nresult = xr.where( get_pos(historic_time) == 0, 0, xr.where( ( _max - _min ) == 0, 0.5, ( _vars - _min ) / ( _max - _min ) ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "cdm_normalized_independent_vars", "moduleId": "inputs_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized Independent Variables", "units": null, "w": "184", "x": 273, "y": 480, "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Company", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "256", "identifier": "node171", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": "41", "y": "75", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "machine_learning_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning", "units": null, "w": "146", "x": 100, "y": 134, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Market Prices", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "558", "identifier": "node4_copy", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "922", "x": "28", "y": "42", "z": -1}, {"color": null, "definition": "result = ml_gp_clients_coords.filter(items=['Latitude','Longitude'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "visitar_gp", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Visit", "units": null, "w": "184", "x": "766", "y": "470", "z": 1}, {"color": null, "definition": "result = ml_knn_clients_coords.filter(items=['Latitude','Longitude'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "visitar_kn", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Visit", "units": null, "w": "184", "x": "287", "y": "470", "z": 1}, {"color": "#4CFFA6", "definition": "result = ml_choice_clients_country_origin", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "ac2b136e7a18d4994a60e3fc615626d31", "moduleId": "ml_machine_learning_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_choice_clients_country_origin", "picture": null, "title": "Clients' Country of Origin", "units": null, "w": "316", "x": "40", "y": "122", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/trip/v1/car/\" + ml_query_string + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    _data = json.loads(url.read().decode())\n    result=_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "get_geocoding", "moduleId": "ml_routing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Geocoding", "units": null, "w": "184", "x": "493", "y": "242", "z": 1}, {"color": null, "definition": "result = pd.Index(['Path'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "line_path", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Line Path", "units": null, "w": "100", "x": "160", "y": "62", "z": 1}, {"color": null, "definition": "result = pd.Index(['Geo Definition'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "map_attributes", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Map Attributes", "units": null, "w": "100", "x": "272", "y": "62", "z": 1}, {"color": null, "definition": "result = cp.index([ str(x) for x in range(2006,2018)])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "periodo_ventas", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Periodo ventas", "units": null, "w": "100", "x": "714", "y": "62", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Machine Learning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "196", "identifier": "node172", "moduleId": "machine_learning_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "522", "x": 28, "y": 42, "z": "-2"}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_data_processing_mod", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data Processing", "units": null, "w": "184", "x": "52", "y": "83", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_reports_mod", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reports", "units": null, "w": "184", "x": "348", "y": "340", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_routing_mod", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Routing", "units": null, "w": "184", "x": "52", "y": "340", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_machine_learning_mod", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning", "units": null, "w": "184", "x": "52", "y": "204", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_applied_ml_simulation_mod", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Applied Machine Learning Simulation", "units": null, "w": "184", "x": "348", "y": "204", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Data Processing", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "234", "identifier": "node173", "moduleId": "ml_data_processing_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "688", "x": "28", "y": "42", "z": "-2"}, {"color": "#FFFF4B", "definition": "result = pd.DataFrame({\r\n    \"Tipo\": [\"PesoCliente\",\"EvolucionVentas\",\"ActivosComerciales\",\"PerformanceVendedores\",\"DiasUltimaVisita\"],\r\n    \"Peso\": [0.2,0.2,0.2,0.2,0.2]})\r\n    \r\n    ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_variable_weights", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Variable Weights", "units": null, "w": "184", "x": "276", "y": "75", "z": 1}, {"color": null, "definition": "df = ml_training_data[ml_training_data['PesoClienteNorm'].notnull()]\n\ndf.loc[:,'PesoClienteNorm'] = df['PesoClienteNorm'] * (ml_variable_weights[(ml_variable_weights['Tipo'].astype('str') == \"PesoCliente\")]).filter(items=['Peso']).values[0]\ndf.loc[:,'EvolucionVentasNorm'] = df['EvolucionVentasNorm'] *  (ml_variable_weights[(ml_variable_weights['Tipo'].astype('str') == \"EvolucionVentas\")]).filter(items=['Peso']).values[0]\ndf.loc[:,'ActivosComercialesNorm'] = df['ActivosComercialesNorm'] * (ml_variable_weights[(ml_variable_weights['Tipo'].astype('str') == \"ActivosComerciales\")]).filter(items=['Peso']).values[0]\ndf.loc[:,'PerformanceVendedoresNorm'] = df['PerformanceVendedoresNorm'] * (ml_variable_weights[(ml_variable_weights['Tipo'].astype('str') == \"PerformanceVendedores\")]).filter(items=['Peso']).values[0]\ndf.loc[:,'DiasUltimaVisitaNorm'] = df['DiasUltimaVisitaNorm'] * (ml_variable_weights[(ml_variable_weights['Tipo'].astype('str') == \"DiasUltimaVisita\")]).filter(items=['Peso']).values[0]\ndf['IPV'] = (df['PesoClienteNorm'] + df['EvolucionVentasNorm'] + df['ActivosComercialesNorm'] + df['PerformanceVendedoresNorm'] + df['DiasUltimaVisitaNorm']) \n\n\nresult = df.sort_values(['IPV'],ascending=0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_param_ipv_calculation", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parametrized IPV Calculation", "units": null, "w": "184", "x": "276", "y": "126", "z": 1}, {"color": null, "definition": "df = ml_param_ipv_calculation.copy()\ndf['OV'] = np.where(df['EvolucionVentasNorm'] > 0,1,0)\nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_ov1000", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OV1000", "units": null, "w": "184", "x": "503", "y": "126", "z": 1}, {"color": null, "definition": "df = ml_param_ipv_calculation.head(ml_sample_size*ml_number_of_days)\ndf['OV'] = np.where(df['EvolucionVentasNorm'] > 0,1,0)\nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_param_ipv_definition", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parametrized IPV Definition", "units": null, "w": "184", "x": "276", "y": "222", "z": 1}, {"color": null, "definition": "result = pd.Index(['Argentina', 'Brasil'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "clients_country_origin", "moduleId": "ml_machine_learning_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients' Country of Origin", "units": null, "w": "172", "x": "112", "y": "123", "z": "-2"}, {"color": null, "definition": "result = choice( clients_country_origin,2)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "ml_choice_clients_country_origin", "moduleId": "ml_machine_learning_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients' Country of Origin", "units": null, "w": "232", "x": "82", "y": "122", "z": "-3"}, {"color": "#A5FF4B", "definition": "_df = pd.read_csv( current_path + \"Machine Learning Inputs/gba_clientes.csv\", sep=',', delimiter=\"\\t\", )\n#_df[\"gba_codi_instalacao\"] = _df[\"gba_codi_instalacao\"].astype(\"U\")\n_df[\"Latitude\"] = _df[\"Latitude\"].str.replace(\",\",\".\").astype(\"float64\")\n_df[\"Longitude\"] = _df[\"Longitude\"].str.replace(\",\",\".\").astype(\"float64\")\n_df = _df[ _df[\"gba_subsegmento\"] != \"MULTICONSUMIDOR\"]\n\n#_dfG = _df[ _df[\"gba_local\"]==\"GUARULHOS\"]\n_dfG = _df[ _df[\"gba_local\"]==\"SAO PAULO\"]\n\n_dfG = _dfG[800:1800]\n\n_dfG = _dfG[[\"Latitude\",\"Longitude\"]].reset_index()\n_dfG[\"index\"] = _dfG.index\n_dfG[\"index\"] = \"00\" + _dfG[\"index\"].astype(str)\n_dfG[\"Cliente\"] = \"Cliente\" + _dfG[\"index\"].str[-3:]\n_dfG = _dfG.drop(columns=\"index\").set_index(\"Cliente\")\n\nresult = _dfG", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_brazil_clients", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Brazil Clients", "units": null, "w": "184", "x": "526", "y": "338", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_param_ipv_definition", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa4ccb2549ddf46779195b52d74e2ea03", "moduleId": "ml_machine_learning_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_param_ipv_definition", "picture": null, "title": "Parametrized IPV Definition", "units": null, "w": "184", "x": "526", "y": "78", "z": 1}, {"color": null, "definition": "result = ml_argentina_clients\nif ml_choice_clients_country_origin == \"Brasil\":\n    result = ml_brazil_clients\n    ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_clients_data", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients Data", "units": null, "w": "184", "x": "526", "y": "419", "z": 1}, {"color": "#A5FF4B", "definition": "import sqlite3\n\nconn = sqlite3.connect(current_path + \"Machine Learning Inputs/DemoQuilmesDB.db\")\n\ndf = pd.read_sql_query(\"Select Cliente,CoordX Longitude,CoordY Latitude From Clientes A\", conn)\n\nresult = df.set_index(\"Cliente\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_argentina_clients", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Argentina Clients", "units": null, "w": "184", "x": "526", "y": "368", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Generic Business Demo", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node174", "moduleId": "generic_business_demo", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "782", "x": "40", "y": "49", "z": -1}, {"color": "#eeeeee", "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "516", "identifier": "node175", "moduleId": "generic_business_demo", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "782", "x": 40, "y": 105, "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Company", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "258", "identifier": "node176", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "900", "x": "39", "y": "72", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Main Competitor", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "122", "identifier": "node177", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "900", "x": "39", "y": "337", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Other Brands", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "122", "identifier": "node178", "moduleId": "mkp_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "900", "x": "39", "y": "467", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "K-Nearest Neighbors Classifier", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "344", "identifier": "node179_copy", "moduleId": "ml_machine_learning_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "456", "x": "40", "y": "176", "z": "-2"}, {"color": null, "definition": "from sklearn import neighbors\nclf = neighbors.KNeighborsClassifier(n_neighbors=15, weights='distance')\n\nclf.fit(ml_x_data, ml_y_data)\n\nresult = clf", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_k_nearest_neighbors_classifier", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "K-Nearest Neighbors Classifier", "units": null, "w": "184", "x": "287", "y": "213", "z": 1}, {"color": "#FFF2CC", "definition": "pd = ml_param_ipv_definition.filter(items=['PesoClienteNorm','EvolucionVentasNorm','ActivosComercialesNorm','PerformanceVendedoresNorm','DiasUltimaVisitaNorm'])\nresult = pd.values\n\n\"\"\"\n_df = definir_ov_parametrizado.reset_index()\nresult = _df[['PesoClienteNorm','EvolucionVentasNorm','ActivosComercialesNorm','PerformanceVendedoresNorm','DiasUltimaVisitaNorm']].values\n\"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_x_data", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "X Data", "units": null, "w": "184", "x": "393", "y": "125", "z": 1}, {"color": "#FFF2CC", "definition": "pd = ml_param_ipv_definition.filter(items=['OV'])\nresult = pd.values\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_y_data", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Y Data", "units": null, "w": "184", "x": "644", "y": "125", "z": 1}, {"color": null, "definition": "from sklearn.gaussian_process import GaussianProcessClassifier\n\nclf = GaussianProcessClassifier(max_iter_predict=20,warm_start=True)\n \nclf.fit(ml_x_data, ml_y_data)\n\nresult = clf\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gaussian_process_classifier", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gaussian Process Classifier", "units": null, "w": "184", "x": "766", "y": "213", "z": 1}, {"color": null, "definition": "result =  ml_k_nearest_neighbors_classifier.predict(ml_sample_data.values)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_predictor", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Predictor", "units": null, "w": "184", "x": "287", "y": "264", "z": 1}, {"color": null, "definition": "df = ml_param_ipv_calculation.copy()\n\n\nresult = df[ml_sample_size*ml_number_of_days:].filter(items=['PesoClienteNorm','EvolucionVentasNorm','ActivosComercialesNorm','PerformanceVendedoresNorm','DiasUltimaVisitaNorm'])\n\n\"\"\"\nresult = df[tamano_de_la_muestra*nrodias: tamano_de_la_muestra*nrodias + tamano_de_la_muestra ].filter(items=['PesoClienteNorm','EvolucionVentasNorm','ActivosComercialesNorm','PerformanceVendedoresNorm','DiasUltimaVisitaNorm'])\n\n\"\"\"\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_sample_data", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sample Data", "units": null, "w": "184", "x": "526", "y": "262", "z": 1}, {"color": null, "definition": "result = ml_gaussian_process_classifier.predict(ml_sample_data.values)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_predictor", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Predictor", "units": null, "w": "184", "x": "766", "y": "264", "z": 1}, {"color": null, "definition": "result = ml_gaussian_process_classifier.predict_proba( ml_sample_data.values )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_probabilities_predictor", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probabilities Predictor", "units": null, "w": "184", "x": "991", "y": "264", "z": 1}, {"color": null, "definition": "df = ml_sample_data[ml_sample_data['PesoClienteNorm'].notnull()]\ndf['OV_EstimadoGP'] = ml_gp_predictor\nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_results", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Results", "units": null, "w": "184", "x": "766", "y": "316", "z": 1}, {"color": null, "definition": "df = ml_sample_data[ml_sample_data['PesoClienteNorm'].notnull()]\n\ndf['OV_EstimadoKN'] = ml_knn_predictor\n\nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_results", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Results", "units": null, "w": "184", "x": "287", "y": "316", "z": 1}, {"color": null, "definition": "result = ml_knn_results.join(ml_ov1000,lsuffix=\"Left\",rsuffix=\"R\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_actual_vs_estimate", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Actual vs Estimate", "units": null, "w": "184", "x": "58", "y": "316", "z": 1}, {"color": null, "definition": "_df = ml_gp_results.join(ml_ov1000,lsuffix=\"Left\",rsuffix=\"R\") \n_df[\"OV_Sup\"] = 1\nresult =  _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_actual_vs_estimate", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Actual vs Estimate", "units": null, "w": "184", "x": "991", "y": "316", "z": 1}, {"color": null, "definition": "df = ml_knn_results[(ml_knn_results['OV_EstimadoKN'] == 1)]\nresult = df.head(10)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_top10_clients", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Top 10 Clientes", "units": null, "w": "184", "x": "287", "y": "368", "z": 1}, {"color": null, "definition": "df = ml_gp_results[(ml_gp_results['OV_EstimadoGP'] == 1)]\nresult = df.head(10)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_top10_clients", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Top 10 Clients", "units": null, "w": "184", "x": "766", "y": "368", "z": 1}, {"color": null, "definition": "result = ml_knn_top10_clients.join(ml_clients_data)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_clients_coords", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Clients Coords", "units": null, "w": "184", "x": "287", "y": "419", "z": 1}, {"color": null, "definition": "result = ml_gp_top10_clients.join(ml_clients_data)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_clients_coords", "moduleId": "ml_machine_learning_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Clients Coords", "units": null, "w": "184", "x": "766", "y": "419", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Gaussian Process Classifier", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "344", "identifier": "node180", "moduleId": "ml_machine_learning_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "456", "x": "744", "y": "176", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = ml_param_ipv_calculation", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "af648c6406f774c87b29bae30f2bda163", "moduleId": "ml_machine_learning_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_param_ipv_calculation", "picture": null, "title": "Parametrized IPV Calculation", "units": null, "w": "184", "x": "526", "y": "217", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_ov1000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9877c85b7dcb4db5ac91ee69333bd981", "moduleId": "ml_machine_learning_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_ov1000", "picture": null, "title": "OV1000", "units": null, "w": "184", "x": "58", "y": "78", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Machine Learning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "488", "identifier": "node182", "moduleId": "ml_machine_learning_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1184", "x": "28", "y": "42", "z": "-4"}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Applied Machine Learning Simulation", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "322", "identifier": "node183", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "690", "x": "28", "y": "42", "z": "-2"}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Performance", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "134", "identifier": "node184", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "668", "x": "39", "y": "78", "z": "-2"}, {"color": "#FFFF4B", "definition": "result = 49", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_number_of_days", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Number of Days", "units": null, "w": "184", "x": "49", "y": "176", "z": 1}, {"color": "#FFFF4B", "definition": "result = 20", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_sample_size", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sample Size", "units": null, "w": "184", "x": "49", "y": "222", "z": 1}, {"color": "#CCCCCC", "definition": "result = 1-((ml_gp_actual_vs_estimate[\"OV\"]-ml_gp_actual_vs_estimate[\"OV_EstimadoGP\"]).abs().sum()/(len(ml_param_ipv_calculation)-ml_number_of_days*ml_sample_size))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_ml_performance", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Machine Learning Performance", "units": null, "w": "184", "x": "501", "y": "162", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_gp_actual_vs_estimate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7891fd75f0b547d58d83cd8e8c3ca996", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_gp_actual_vs_estimate", "picture": null, "title": "GP Actual vs Estimate", "units": null, "w": "184", "x": "501", "y": "113", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_knn_actual_vs_estimate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1fa683b3e8264af5986574dd734709fd", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_knn_actual_vs_estimate", "picture": null, "title": "KNN Actual vs Estimate", "units": null, "w": "184", "x": "281", "y": "113", "z": 1}, {"color": "#CCCCCC", "definition": "result = 1-((ml_knn_actual_vs_estimate[\"OV\"]-ml_knn_actual_vs_estimate[\"OV_EstimadoKN\"]).abs().sum()/(len(ml_param_ipv_calculation)-ml_number_of_days*ml_sample_size))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_ml_performance", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Machine Learning Performance", "units": null, "w": "184", "x": "281", "y": "162", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Iterations", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "134", "identifier": "node185", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "668", "x": "39", "y": "218", "z": "-2"}, {"color": "#CB98FF", "definition": "_ov_estimado = []\n_ov_sup = []\n_clientesPorIteracion=[]\n_totalIterations=0\n_maxIterations = min(ml_max_number_of_iterations, int(len(ml_ov1000)/ml_sample_size)-1)\n\nlastAccuracy = 0\nwhile _totalIterations<_maxIterations: # and lastAccuracy<maximaperformnce:\n    ml_number_of_days.node.definition = \"result = \" + str(_totalIterations+1)\n    lastAccuracy = ml_gp_ml_performance\n    _ov_estimado.append(lastAccuracy)\n    _clientesPorIteracion.append( (_totalIterations+1)*ml_sample_size)\n    _totalIterations+=1\n\n    \n_df = pd.DataFrame({\n    \"Dia\": list(range(1,_totalIterations+1)),\n    \"Cant. clientes\": _clientesPorIteracion,\n    \"Performance\": _ov_estimado\n    })    \n    \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_gp_iterations_result", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GP Iterations Result", "units": null, "w": "184", "x": "501", "y": "298", "z": 1}, {"color": "#FFFF4B", "definition": "result = 50", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_max_number_of_iterations", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Maximum Number of Iterations", "units": null, "w": "184", "x": "61", "y": "251", "z": 1}, {"color": "#FFFF4B", "definition": "result = 0.9", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_max_performance", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Maximum Performance", "units": null, "w": "184", "x": "61", "y": "298", "z": 1}, {"color": "#CB98FF", "definition": "_arr = []\n_clientesPorIteracion=[]\n_totalIterations=0\n_maxIterations = min(ml_max_number_of_iterations, int(len(ml_ov1000)/ml_sample_size)-1)\n\nlastAccuracy = 0\nwhile _totalIterations<_maxIterations and lastAccuracy<ml_max_performance:\n    ml_number_of_days.node.definition = \"result = \" + str(_totalIterations+1)\n    lastAccuracy = ml_knn_ml_performance\n    _arr.append(lastAccuracy)\n    _clientesPorIteracion.append( (_totalIterations+1)*ml_sample_size)\n    _totalIterations+=1\n\n    \n_df = pd.DataFrame({\n    \"Dia\": list(range(1,_totalIterations+1)),\n    \"Cant. clientes\": _clientesPorIteracion,\n    \"Performance\": _arr\n    })    \n    \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_knn_iterations_result", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "KNN Iterations Result", "units": null, "w": "184", "x": "281", "y": "298", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_ov1000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9d1a7c5fcd9a4201b8b8f7c076b589b6", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_ov1000", "picture": null, "title": "OV1000", "units": null, "w": "184", "x": "391", "y": "251", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_indexes_mod", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Indexes", "units": null, "w": "184", "x": "52", "y": "421", "z": 1}, {"color": "#FFFF4B", "definition": "result = 10", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_start", "moduleId": "ml_routing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Start", "units": null, "w": "184", "x": "43", "y": "144", "z": 1}, {"color": null, "definition": "result = choice( number_of_clients_to_visit,4)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "ml_choice_number_clients_to_visit", "moduleId": "ml_routing_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Number of Clients to Visit", "units": null, "w": "214", "x": "49", "y": "81", "z": 1}, {"color": null, "definition": "result = pd.Index([10,15,20,25,30])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "number_of_clients_to_visit", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Number of Clients to Visit", "units": null, "w": "100", "x": "37", "y": "62", "z": 1}, {"color": "#4CFFA6", "definition": "result = ml_choice_number_clients_to_visit", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a36cbe93cc28c4d259da1211bf4da7a90", "moduleId": "ml_routing_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_choice_number_clients_to_visit", "picture": null, "title": "Number of Clients to Visit", "units": null, "w": "266", "x": "49", "y": "81", "z": 1}, {"color": null, "definition": "_df_clients_data = ml_clients_data.rename( columns = {'Cliente':'Client'} )\n_df = ml_ov_clients_list.set_index(\"Client\")\n_df = _df.join(_df_clients_data)\n\nresult= _df[_df[\"OV\"]==1][ ml_start-1 : ml_start + ml_choice_number_clients_to_visit - 1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_clients_to_visit_df", "moduleId": "ml_routing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients to Visit DF", "units": null, "w": "184", "x": "267", "y": "193", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_ov1000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa5200aa357824c3090870f6b7008b0ca", "moduleId": "ml_reports_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_ov1000", "picture": null, "title": "OV1000", "units": null, "w": "184", "x": "61", "y": "113", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_ov_clients_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7933525eef40425299c5e67a077672c7", "moduleId": "ml_routing_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_ov_clients_list", "picture": null, "title": "OV Clients List", "units": null, "w": "184", "x": "43", "y": "193", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in ml_clients_to_visit_df[[\"Longitude\",\"Latitude\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_query_string", "moduleId": "ml_routing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "184", "x": "493", "y": "193", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/route/v1/car/\" + ml_query_string + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    _data = json.loads(url.read().decode())\n    result=_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_get_routes", "moduleId": "ml_routing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Routes", "units": null, "w": "184", "x": "493", "y": "296", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Routing", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "306", "identifier": "node186", "moduleId": "ml_routing_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "900", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "_arr = []\nif not get_geocoding[\"trips\"] is None  and len(get_geocoding[\"trips\"]) > 0:\n    _route = get_geocoding[\"trips\"][0]\n    if _route[\"geometry\"] and _route[\"geometry\"][\"coordinates\"]:\n        _arr = _route[\"geometry\"][\"coordinates\"]\n\nresult = []\nif not _arr is None:\n    for _item in _arr:\n        result.append(list(reversed(_item)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_parse_result", "moduleId": "ml_routing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parse Result", "units": null, "w": "184", "x": "720", "y": "242", "z": 1}, {"color": "#FFFF4B", "definition": "result = ml_number_of_days", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a08ac22ed0807409fb6fe7d285ba5a471", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_number_of_days", "picture": null, "title": "Number of Days", "units": null, "w": "184", "x": "61", "y": "113", "z": 1}, {"color": "#FFFF4B", "definition": "result = ml_sample_size", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a9f1fa999f79c4379901a17e38e664f80", "moduleId": "ml_applied_ml_simulation_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_sample_size", "picture": null, "title": "Sample Size", "units": null, "w": "184", "x": "61", "y": "162", "z": 1}, {"color": "#A5FF4B", "definition": "import sqlite3\n\nconn = sqlite3.connect(current_path + \"Machine Learning Inputs/DemoQuilmesDB.db\")\n\ndf = pd.read_sql_query(\"Select Cliente,PesoClienteNorm,EvolucionVentasNorm,ActivosComercialesNorm,PerformanceVendedoresNorm,DiasUltimaVisitaNorm,VisitaReal, PesoCliente,EvolucionVentas,ActivosComerciales,PerformanceVendedores,DiasUltimaVisita  From BaseEntrenamientoNorm Limit 1000\", conn)\n\nresult = df.set_index(\"Cliente\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_training_data", "moduleId": "ml_data_processing_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Training Data", "units": null, "w": "184", "x": "49", "y": "126", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Reports", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "658", "identifier": "node188", "moduleId": "ml_reports_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "484", "x": "28", "y": "42", "z": "-2"}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Machine Learning and Visits", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "186", "identifier": "node189", "moduleId": "ml_reports_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "40", "y": "76", "z": "-2"}, {"color": "#CCCCCC", "definition": "_df = ml_ov1000[[\"PesoCliente\",\"EvolucionVentas\",\"ActivosComerciales\",\"PerformanceVendedores\",\"DiasUltimaVisita\",\"IPV\"]]\n_df = _df.reset_index().rename( columns = {\"Cliente\":\"Client\",\"PesoCliente\":\"ClientWeight\",\"EvolucionVentas\":\"SalesEvolution\",\"ActivosComerciales\":\"CommercialAssets\",\"PerformanceVendedores\":\"SalesmanPerformance\",\"DiasUltimaVisita\":\"DaysFromLastVisit\"})\n\nresult =_df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_clients_list", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients List", "units": null, "w": "184", "x": "287", "y": "113", "z": 1}, {"color": "#CCCCCC", "definition": "_df = ml_ov1000[[\"EvolucionVentas\",\"DiasUltimaVisita\",\"IPV\",\"OV\"]]\n_df = _df.reset_index().rename( columns = {\"Cliente\":\"Client\",\"EvolucionVentas\":\"SalesEvolution\",\"DiasUltimaVisita\":\"DaysFromLastVisit\"})\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_ov_clients_list", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OV Clients List", "units": null, "w": "184", "x": "287", "y": "161", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_gp_iterations_result", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab5a102e2fe7f434ea85834193defb86b", "moduleId": "ml_reports_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_gp_iterations_result", "picture": null, "title": "GP Iterations Result", "units": null, "w": "184", "x": "61", "y": "210", "z": 1}, {"color": "#CCCCCC", "definition": "#Cant. clientes  Dia  Performance\nresult = ml_gp_iterations_result[[\"Dia\",\"Performance\"]].rename( columns = {'Dia':'Day'} )\nresult.set_index([\"Day\"],inplace=True)", "description": "  M\u00e9todo de Machine Learning aplicado:&nbsp;&nbsp;Gaussian Process Classifier    ", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_daily_performance", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Daily Performance", "units": null, "w": "184", "x": "287", "y": "210", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Routes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "322", "identifier": "node190", "moduleId": "ml_reports_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "40", "y": "269", "z": "-2"}, {"color": "#CCCCCC", "definition": "import json\n\n_json = {\n    \"type\":\"polyline\",\n    \"latlngs\": ml_parse_result\n    }\n\n#result = xr.DataArray([ json.dumps(_json)], [line_path,map_attributes])\nresult = cp.cube([line_path_cp,map_attributes_cp],[ json.dumps(_json)])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_draw_paths", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Draw Paths", "units": null, "w": "184", "x": "287", "y": "296", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_parse_result", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad37f8dde52b548159663b3a1c92cc1cd", "moduleId": "ml_reports_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_parse_result", "picture": null, "title": "Parse Result", "units": null, "w": "184", "x": "61", "y": "296", "z": 1}, {"color": "#CCCCCC", "definition": "_arr = []\nif not ml_get_routes[\"routes\"] is None  and len(ml_get_routes[\"routes\"]) > 0:\n    _route = ml_get_routes[\"routes\"][0]\n    if _route[\"legs\"] and len(_route[\"legs\"])>0:\n        _arr = _route[\"legs\"]\n\n_secs = []\nif not _arr is None:\n    for _item in _arr:\n        _secs.append( _item[\"duration\"])\n        \nresult = sum(_secs)/60/60\n        \n        ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_transportation_time", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Transportation Time", "units": null, "w": "184", "x": "287", "y": "344", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_get_routes", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a306cb67fb0da4851954a8c1eac1ce04e", "moduleId": "ml_reports_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_get_routes", "picture": null, "title": "Get Routes", "units": null, "w": "184", "x": "61", "y": "344", "z": 1}, {"color": "#CCCCCC", "definition": "result = (ml_choice_number_clients_to_visit * 15) / 60", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_visiting_time", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Visiting Time", "units": null, "w": "184", "x": "287", "y": "392", "z": 1}, {"color": "#CCCCCC", "definition": "result = ml_transportation_time + ml_visiting_time", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_total_time", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Time", "units": null, "w": "184", "x": "287", "y": "442", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_clients_to_visit_df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a86b2773d01b84256ba10a9f934d7a6d5", "moduleId": "ml_reports_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_clients_to_visit_df", "picture": null, "title": "Clients to Visit DF", "units": null, "w": "184", "x": "61", "y": "491", "z": 1}, {"color": null, "definition": "result = pd.Index(['Latitude', 'Longitude'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "latitude_longitude", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Latitude / Longitude", "units": null, "w": "100", "x": "495", "y": "62", "z": 1}, {"color": null, "definition": "result = concat_index( latitude_longitude, 'Icon' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "latitude_longitude_attributes", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Latitude / Longitude Attributes", "units": null, "w": "100", "x": "606", "y": "62", "z": 1}, {"color": null, "definition": "result = pd.IndexFromPandas( ml_clients_to_visit_df.reset_index(), columnName=\"Client\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "clients", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients", "units": null, "w": "100", "x": "387", "y": "62", "z": 1}, {"color": "#CCCCCC", "definition": "\"\"\"\n_lat_long = ml_clients_to_visit_df[['Longitude','Latitude']].to_xarray().to_array().rename({'Client':clients.name, 'variable':latitude_longitude.name})\n\nresult = change_index( _lat_long, latitude_longitude, latitude_longitude_attributes, defaultValue = 0 )\n\"\"\"\nresult = cp.cubeFromPandas( ml_clients_to_visit_df.reset_index(), [clients_cp], latitude_longitude_attributes_cp, indexColumnHeaders=[\"Client\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_clients_spots", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients Spots", "units": null, "w": "184", "x": "287", "y": "491", "z": 1}, {"color": "#CCCCCC", "definition": "_df = ml_clients_to_visit_df.reset_index()[[\"Client\",\"SalesEvolution\",\"DaysFromLastVisit\"]]\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_clients_list_to_visit", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients List to Visit", "units": null, "w": "184", "x": "287", "y": "541", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Menu Blocks", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "88", "identifier": "node191", "moduleId": "ml_reports_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "460", "x": "40", "y": "599", "z": "-2"}, {"color": null, "definition": "result = \"\"\"\r\n<style type=\"text/css\">\r\n\t.big-menu-header{\r\n\r\n\t}\r\n\t.big-menu-icon{text-align: center;}\r\n\t.big-menu-wrap {\r\n\t width:100%;\r\n\t height: 270px;\r\n\t display:inline-block;\r\n\t margin: 0 auto;\r\n\t}\r\n\t.big-menu-wrap h1 {\r\n\t font-weight: 100;\r\n\t}\r\n\r\n\t.center-all {\r\n\t width: 900px;\r\n\t display: block;\r\n\t margin: 0 auto;\r\n\t}\r\n\r\n\t   .big-menu-box {\r\n\t float: left;\r\n\t position: relative;\r\n\t width: 33%;\r\n\t height:100%;\r\n\t padding-bottom: 33%;\r\n\t   }\r\n\t   .big-menu-boxInner {\r\n\t position: absolute;\r\n\t left:5px;\r\n\t right: 5px;\r\n\t top: 5px;\r\n\t bottom: 5px;\r\n\t overflow: hidden;\r\n\t background-color: #063E91;\r\n\t   }\r\n\r\n\t      .big-menu-boxInner-disable {\r\n\t       background-color: #999;\r\n\t   }\r\n\t   .big-menu-boxInner img {\r\n\t     width: 30%;\r\n\t   }\r\n\t  .big-menu-boxInner h3 {\r\n\t         color: #FFFFFF;\r\n\t   font-size: 1.6em;\r\n\t   font-weight: lighter;\r\n\t   font-style: italic;\r\n\t   }\r\n\r\n\t.big-menu-boxInner h4 {\r\n\t    color: #FFDDC7;\r\n\t    font-size: 1.1em;\r\n\t    font-weight: lighter;\r\n\t   }\r\n\t   .big-menu-boxInner .big-menu-title-box {\r\n\t     position: absolute;\r\n\t     bottom: 0;\r\n\t     left: 0;\r\n\t     right: 0;\r\n\t     margin-bottom: -50px;\r\n\t     background: #000;\r\n\t     background: rgba(0, 0, 0, 0.5);\r\n\t     color: #FFF;\r\n\t     padding: 10px;\r\n\t     text-align: center;\r\n\t     -webkit-transition: all 0.3s ease-out;\r\n\t     -moz-transition: all 0.3s ease-out;\r\n\t     -o-transition: all 0.3s ease-out;\r\n\t     transition: all 0.3s ease-out;\r\n\t   }\r\n\t body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\r\n\t     margin-bottom: 0;\r\n\t   }\r\n\t.big-menu-boxInner {\r\n\t  transition: all .15s ease-in-out;\r\n\t}\r\n\t.big-menu-boxInner:hover {\r\n\t background: #08224E;\r\n\t z-index: 100;\r\n\t transform: scale(1.2,1.2);\r\n\t big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\r\n\t}\r\n\t.big-menu-elem-content{\r\n\t margin-left:5%;\r\n\t margin-right:5%;\r\n\t}\r\n\t.big-menu-icon{\r\n\t  font-size:5em;\r\n\t  color: rgba(255,255,255,.5);\r\n\t top: 0;\r\n\t left: 0;\r\n\t z-index: -1;\r\n\r\n\r\n\t}\r\n\t\r\n\t@media only screen and (max-width : 480px) {\r\n\r\n\t\t.big-menu-box {\r\n\t\t\twidth: 70%;\r\n\t\t\theight: 180px;\r\n\t\t\tpadding-bottom: 80px;\r\n\t\t}\r\n\r\n\t\t.big-menu-icon{font-size:2em;}\r\n\r\n\t\t.center-all {\r\n\t\t\twidth: 480px;\r\n\t\t}\r\n\t}\r\n\t \r\n\t@media only screen and (max-width : 650px) and (min-width : 481px) {\r\n\r\n\t    .big-menu-box {\r\n\t       width: 50%;\r\n\t       padding-bottom: 50%;\r\n\t    }\r\n\r\n\t  \t.center-all {\r\n\t \t\twidth: 460px;\r\n\t\t}\r\n\r\n\t     .big-menu-icon{font-size:2em;}\r\n\r\n\t}\r\n\r\n\t  \r\n\t@media only screen and (max-width : 1050px) and (min-width : 651px) {\r\n\r\n\t    .big-menu-box {\r\n\t       width: 25%;\r\n\t       height: 100%;\r\n\t       padding-bottom: 2%;\r\n\t    }\r\n\t    .big-menu-icon{font-size:3em;}\r\n\r\n\t  \t.center-all {\r\n\t \t\twidth: 640px;\r\n\t\t}\r\n\t}\r\n\r\n\t@media only screen and (max-width : 1290px) and (min-width : 1051px) {\r\n\r\n\t\t.big-menu-box {\r\n\t\t\twidth: 25%;\r\n\t\t\theight: 100%;\r\n\t\t\tpadding-bottom: 10%;\r\n\t\t}\r\n\r\n\t \t.big-menu-icon{font-size:5em;}\r\n\r\n\t \t.center-all {\r\n\t   \t\twidth: 1000px;\r\n\t \t}\r\n\t}\r\n\r\n\t@media only screen and (max-width : 1920px) and (min-width : 1290px) {\r\n\r\n\t\t.big-menu-box {\r\n\t\t\twidth: 25%;\r\n\t\t\theight: 100%;\r\n\t\t\tpadding-bottom: 10%;\r\n\t\t}\r\n\r\n\t\t.big-menu-icon{font-size:5.5em;}\r\n\r\n\t\t.center-all {\r\n\t\t\twidth: 1200px;\r\n\t\t}\r\n\t }\r\n</style>\r\n<!-- Enable media queries for old IE -->\r\n<!--[if lt IE 9]>\r\n<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\r\n<![endif]-->\r\n\r\n\r\n\r\n <div class=\"big-menu-header\">\r\n\t<div class=\"big-menu-wrap\">\r\n\t\t<div class=\"big-menu-header\">\r\n\t\t\t<h1 style = \"color:#5f6670;font-size:60px\">Commercial Management</h1>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"big-menu-box\">\r\n\t\t\t<div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"12560\" data-target=\"_blank\">\r\n\t\t\t\t<div class=\"big-menu-elem-content\"><h3>Visits</h3><h4></h4></div>\r\n\t\t\t\t<div class=\"big-menu-icon\"> <i class=\"fa fa-list-ol fa-3x\"></i></div>\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"big-menu-box\">\r\n\t\t\t<div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"12562\" data-target=\"_blank\">\r\n\t\t\t\t<div class=\"big-menu-elem-content\"><h3>Visits Routing</h3><h4></h4></div>\r\n\t\t\t\t<div class=\"big-menu-icon\"> <i class=\"fa fa-code-fork fa-3x\"></i></div>\r\n\t\t\t\t</span>\r\n\t\t\t</div>  \r\n\t\t</div>\r\n\t\t<div class=\"big-menu-box\">\r\n\t\t\t<div class=\"big-menu-boxInner \"> <span  data-target=\"_blank\">\r\n\t\t\t\t<div class=\"big-menu-elem-content\"><h3>Commentaries Record</h3><h4></h4></div>\r\n\t\t\t\t<div class=\"big-menu-icon\"> <i class=\"fa fa-comments fa-3x\"></i></div>\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"big-menu-box\">\r\n\t\t\t<div class=\"big-menu-boxInner \"> \r\n\t\t\t\t<span  data-target=\"_blank\">\r\n\t\t\t\t<div class=\"big-menu-elem-content\"><h3>Action Plan</h3><h4></h4></div>\r\n\t\t\t\t<div class=\"big-menu-icon\"> <i class=\"fa fa-tasks fa-3x\"></i></div>\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_menu_blocks", "moduleId": "ml_reports_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Menu Blocks", "units": null, "w": "184", "x": "61", "y": "633", "z": "2"}, {"color": "#FFFF4B", "definition": "result = ml_start", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "36", "identifier": "a2f659cb8097448d7bf8a9826b84be154", "moduleId": "ml_routing_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_start", "picture": null, "title": "Start", "units": null, "w": "200", "x": "35", "y": "141", "z": 1}, {"color": "#4CBCFF", "definition": "result = ml_clients_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a2b02b55a78114b9480e118e55f271296", "moduleId": "ml_routing_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "ml_clients_data", "picture": null, "title": "Clients Data", "units": null, "w": "184", "x": "267", "y": "144", "z": 1}, {"color": null, "definition": "result = cp.index(['Latitude','Longitude','Icon'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "latitude_longitude_attributes_cp", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Latitude / Longitude Attributes", "units": null, "w": "100", "x": "606", "y": "121", "z": 1}, {"color": null, "definition": "result = cp.indexFromPandas( ml_clients_to_visit_df.reset_index(), columnName=\"Client\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "clients_cp", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients", "units": null, "w": "100", "x": "387", "y": "121", "z": 1}, {"color": null, "definition": "result = cp.index(['Path'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "line_path_cp", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Line Path", "units": null, "w": "100", "x": "160", "y": "121", "z": 1}, {"color": null, "definition": "result = cp.index(['Geo Definition'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "map_attributes_cp", "moduleId": "ml_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Map Attributes", "units": null, "w": "100", "x": "272", "y": "121", "z": 1}, {"color": "#CCCCCC", "definition": "result = fin_annual_pl_report", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_pl_report_graphics", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual P&L Report (for Graphics)", "units": "MM$", "w": "184", "x": "760", "y": "1080", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Sales Map", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "182", "identifier": "node200", "moduleId": "sop_sales_map_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "678", "x": "28", "y": "42", "z": "-2"}, {"color": "#A5FF4B", "definition": "_connection = excel_connection( current_path + '\\Sales Map Data\\sales_map.xlsx' )\n\nresult = pandas_from_excel( _connection, sheetName = 'sales_map' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_map_data", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Map Data", "units": null, "w": "184", "x": "47", "y": "78", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Other Modules", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "306", "identifier": "node48", "moduleId": "data_mod_copy", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "734", "x": "40", "y": "74", "z": "-3"}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_map_mod", "moduleId": "data_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Map", "units": null, "w": "184", "x": "550", "y": "111", "z": 1}, {"color": "#4CBCFF", "definition": "#result = sop_sales_coords_by_city_pd[['Latitude','Longitude','Sales']].to_xarray().to_array().rename( {'index': sales_map_cities.name, 'variable':sales_map_attributes.name})\n\nresult = sop_sales_coords_by_city_pd.set_index('City').to_xarray().to_array().rename( {'City': sales_map_cities.name, 'variable':sales_map_attributes.name})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_coords_by_city", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Coordinates by City", "units": null, "w": "184", "x": "272", "y": "125", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index( ['Latitude','Longitude','Sales'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sales_map_attributes", "moduleId": "sop_sales_map_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Map Attributes", "units": null, "w": "100", "x": "836", "y": "80", "z": 1}, {"color": "#4CBCFF", "definition": "_df = sop_sales_map_data[['City','Longitude','Latitude','Sales']]\n_df_sales = _df[['City','Sales']]\n_df_sales = _df_sales.groupby('City').sum().reset_index()\n_df_latitude = _df[['City','Latitude']]\n_df_latitude = _df_latitude.groupby( 'City').mean().reset_index()\n_df_longitude = _df[['City','Longitude']]\n_df_longitude = _df_longitude.groupby( 'City').mean().reset_index()\n_df = _df.drop( columns = ['Longitude','Latitude','Sales']).drop_duplicates()\n_df = _df.merge( _df_latitude, on = 'City', how = 'left').merge( _df_longitude, on = 'City', how = 'left').merge( _df_sales, on = 'City', how = 'left')\n_df['Sales'] = _df['Sales'].apply(lambda x: x + np.random.rand()/10000.0)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_coords_by_city_pd", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Coordinates by City (Pandas)", "units": null, "w": "184", "x": "272", "y": "78", "z": 1}, {"color": "#9999ff", "definition": "_cities = sop_sales_coords_by_city_pd['City']\n\nresult = pd.Index( _cities.unique() )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sales_map_cities", "moduleId": "sop_sales_map_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Map Cities", "units": null, "w": "100", "x": "731", "y": "80", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( sop_sales_coords_by_city, sales_map_attributes, 'Sales' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_by_city", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales by City", "units": null, "w": "184", "x": "272", "y": "173", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index( ['Sales'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sales_attribute", "moduleId": "sop_sales_map_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Attribute", "units": null, "w": "100", "x": "937", "y": "80", "z": 1}, {"color": "#9999ff", "definition": "_states = sop_sales_coords_by_state_pd['State']\n\nresult = pd.Index( _states.unique() )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sales_map_states", "moduleId": "sop_sales_map_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Map States", "units": null, "w": "100", "x": "1048", "y": "80", "z": 1}, {"color": "#4CBCFF", "definition": "_df = sop_sales_map_data[['State','Longitude','Latitude','Sales']]\n_df_sales = _df[['State','Sales']]\n_df_sales = _df_sales.groupby('State').sum().reset_index()\n_df_latitude = _df[['State','Latitude']]\n_df_latitude = _df_latitude.groupby( 'State').mean().reset_index()\n_df_longitude = _df[['State','Longitude']]\n_df_longitude = _df_longitude.groupby( 'State').mean().reset_index()\n_df = _df.drop( columns = ['Longitude','Latitude','Sales']).drop_duplicates()\n_df = _df.merge( _df_latitude, on = 'State', how = 'left').merge( _df_longitude, on = 'State', how = 'left').merge( _df_sales, on = 'State', how = 'left')\n_df['Sales'] = _df['Sales'].apply(lambda x: x + np.random.rand()/10000.0)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_coords_by_state_pd", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Coordinates by State (Pandas)", "units": null, "w": "184", "x": "497", "y": "78", "z": 1}, {"color": "#4CBCFF", "definition": "result = sop_sales_coords_by_state_pd.set_index('State').to_xarray().to_array().rename( {'State': sales_map_states.name, 'variable':sales_map_attributes.name})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_coords_by_state", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales Coordinates by State", "units": null, "w": "184", "x": "497", "y": "125", "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( sop_sales_coords_by_state, sales_map_attributes, 'Sales' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sop_sales_by_state", "moduleId": "sop_sales_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales by State", "units": null, "w": "184", "x": "497", "y": "173", "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( 0., [time] )\n        else:\n            result = create_dataarray( 0., [time, scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( 0., [time, iterations] )\n    else:\n        result = create_dataarray( 0., [time, iterations, scenarios] )\nelse:\n    if pmk_per_capita_cons_method == 'Input':\n        if selected_scenario != 'All':\n            result = create_dataarray( 0., [time, inputs_scenarios] )\n        else:\n            result = create_dataarray( 0., [time, scenarios, inputs_scenarios] )\n    elif selected_scenario != 'All':\n        result = create_dataarray( 0., [time, iterations, inputs_scenarios] )\n    else:\n        result = create_dataarray( 0., [time, iterations, scenarios, inputs_scenarios] )\n\n# Hago esto para evitar problemas con dynamic.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "empty_cube_time_scenarios_iterations", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Empty Cube with Time, Scenarios and Iterations", "units": null, "w": "184", "x": "489", "y": "460", "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node3", "moduleId": "data_mod_copy", "nodeClass": "cube", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 912, "y": 232, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(iterations_scorecard,1, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "iteration_for_scorecard", "moduleId": "fin_strategic_map_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Iteration for Scorecard", "units": null, "w": "182", "x": "116", "y": "113", "z": 1}, {"color": "#4CFFA6", "definition": "result = iteration_for_scorecard", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "af9e98690c9a74263b35cdbfee70c6f3a", "moduleId": "fin_strategic_map_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "iteration_for_scorecard", "picture": null, "title": "Iteration for Scorecard", "units": null, "w": "264", "x": "54", "y": "111", "z": 1}, {"color": "#4CBCFF", "definition": "result = pp.dynamic( fin_annual_sales, years, -1, 0 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_sales_growth_rate_tm1", "moduleId": "fin_strategic_map_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Sales (t-1)", "units": null, "w": "184", "x": "279", "y": "523", "z": 1}, {"color": null, "definition": "result = choice( scenarios_scorecard, 1, 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "scenario_for_scorecard", "moduleId": "fin_strategic_map_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Scenario for Scorecard", "units": null, "w": "182", "x": "136", "y": "81", "z": "-2"}, {"color": "#4CBCFF", "definition": "_annual_growth_rate = lookup( opx_employees_annual_growth_rate, time_to_years, totalyears )\n\nresult = (1 + _annual_growth_rate) ** (1 / 12)\n ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_employees_monthly_growth_rate", "moduleId": "opx_drivers_projection_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Employees Monthly Growth Rate", "units": null, "w": "184", "x": "288", "y": "101", "z": 1}, {"color": "#4CBCFF", "definition": "result = max(historic_time.values)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "last_historical_month", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Last Historical Month", "units": null, "w": "184", "x": "489", "y": "413", "z": 1}, {"color": null, "definition": "_cpi = subscript( ast_indices_factor_projection, indices, 'CPI' )\n\nresult = ( mks_market_prices / _cpi ) * ( ast_mkt_prod_to_mkt_segment_alloc == to_dataarray(market_segments) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_market_prices_mkt_segment", "moduleId": "mks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Market Prices by Market Segment", "units": null, "w": "184", "x": "508", "y": "170", "z": 1}, {"color": "#CCCCCC", "definition": "result = fin_balance_sheet_report.sum().item(0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "check_sum_all", "moduleId": "fin_balance_sheet_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Check sum all", "units": null, "w": "184", "x": "764", "y": "646", "z": 1}, {"color": "#4CBCFF", "definition": "_array_time = to_dataarray(time)\n\nresult = apply_fn( _array_time, lambda x: x[:4] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_years", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Years", "units": null, "w": "184", "x": "60", "y": "321", "z": 1}, {"color": "#4CBCFF", "definition": "result = time_to_years.astype(int)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "time_to_years_numeric", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time to Years (numeric)", "units": null, "w": "184", "x": "60", "y": "366", "z": 1}, {"color": "#CCCCCC", "definition": "_regressions = cdm_models_reg_results_best_fit_value\n_machine_learning_1 = ml_clients_list\n_machine_learning_2 = ml_ov_clients_list\n_machine_learning_3 = ml_draw_paths\n_machine_learning_4 = ml_clients_spots\n_machine_learning_5 = ml_clients_list_to_visit\n_cash_flow = fin_cash_flow_report\n_scorecard = fin_profit_scorecard\n_control = ctr_financial_ratios_lam\n_credit_risk_ml = new_loans_suggested_credit_amount\n\nresult = 'OK'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "run_whole_model", "moduleId": "data_mod_copy", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Run Whole Model", "units": null, "w": "184", "x": "308", "y": "260", "z": 1}, {"color": "#4CFFA6", "definition": "result = initial_modeling_year", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa8205d25ce7846beb10efc91e9c90820", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "initial_modeling_year", "picture": null, "title": "Initial Modeling Year", "units": null, "w": "250", "x": "346", "y": "81", "z": 1}, {"color": "#4CFFA6", "definition": "result = time_horizon", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7e2b2014c9794fd382d35e31142f17bc", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "time_horizon", "picture": null, "title": "Time Horizon", "units": null, "w": "250", "x": "346", "y": "126", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, mks_init_ad_spending_other_brands, pp.dynamic( mks_estim_ad_spending_other_brands, time, -1 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_estim_ad_spending_other_brands", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estimated Advertising Spending - Other Brands", "units": null, "w": "184", "x": "289", "y": "337", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( get_pos(time) == 0, mks_init_ad_spending_mcbrand, pp.dynamic( mks_estim_ad_spending_mcbrand, time, -1 ) * ( 1 + ast_monthly_cpi ) )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mks_estim_ad_spending_mcbrand", "moduleId": "mks_ad_spending_brand_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estimated Advertising Spending - Main Competitor's Brand", "units": null, "w": "184", "x": "289", "y": "248", "z": 1}, {"color": "#4CFFA6", "definition": "result = pmk_per_capita_cons_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a74e81e27c70c42fbb488ced1c27a97f8_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "pmk_per_capita_cons_method", "picture": null, "title": "Per Capita Consumption Methodology", "units": null, "w": "463", "x": 169, "y": 580, "z": 1}, {"color": "#4CFFA6", "definition": "result = selected_scenario", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a968f4e33b3e249319df4dab34ca20ba9_copy_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "selected_scenario", "picture": null, "title": "Selected Scenario", "units": null, "w": "463", "x": 169, "y": 490, "z": 1}, {"color": "#4CFFA6", "definition": "result = new_product_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1b6e47231c2643be99fdf055069f0f54_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "new_product_date", "picture": null, "title": "New Product Date", "units": null, "w": "463", "x": 169, "y": 520, "z": 1}, {"color": "#4CFFA6", "definition": "result = capacity_increase_date", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1cc3b7381380406f89731dc7cd752edb_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "capacity_increase_date", "picture": null, "title": "Capacity Increase Date", "units": null, "w": "463", "x": 169, "y": 550, "z": 1}, {"color": "#4CFFA6", "definition": "result = scenario_for_scorecard", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a968f4e33b3e249319df4dab34ca20ba9_copy_copy_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "scenario_for_scorecard", "picture": null, "title": "Scenario for Scorecard", "units": null, "w": "463", "x": 169, "y": 610, "z": 1}, {"color": "#4CFFA6", "definition": "result = iteration_for_scorecard", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "af9e98690c9a74263b35cdbfee70c6f3a_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "iteration_for_scorecard", "picture": null, "title": "Iteration for Scorecard", "units": null, "w": "463", "x": 169, "y": 640, "z": 1}, {"color": "#4CFFA6", "definition": "result = initial_modeling_year", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa8205d25ce7846beb10efc91e9c90820_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "initial_modeling_year", "picture": null, "title": "Initial Modeling Year", "units": null, "w": "463", "x": 169, "y": 430, "z": 1}, {"color": "#4CFFA6", "definition": "result = time_horizon", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7e2b2014c9794fd382d35e31142f17bc_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "time_horizon", "picture": null, "title": "Time Horizon", "units": null, "w": "463", "x": 169, "y": 460, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Data", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "800", "identifier": "node68_copy", "moduleId": "data_mod_copy", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "758", "x": 28, "y": 42, "z": "-6"}, {"color": "#cccccc", "definition": "result = 0", "description": "Switches", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "441", "identifier": "node48_copy", "moduleId": "data_mod_copy", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "734", "x": 40, "y": 388, "z": "-3"}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_reserves_ret_earnings_mod", "moduleId": "fin_balance_sheet_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reserves and Retained Earnings", "units": null, "w": "184", "x": "538", "y": "460", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_transfered_to_general_reserves", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae0caf52367044b71982a0bbd974c4d8f_copy_copy", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_transfered_to_general_reserves", "picture": null, "title": "Transfered to General Reserves", "units": null, "w": "184", "x": "51", "y": "83", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_dividends_paid", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8a1b47a3299143c1816a54cc1e4326f8_copy_copy", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_dividends_paid", "picture": null, "title": "Dividends Paid", "units": null, "w": "184", "x": "51", "y": "133", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Reserves and Retained Earnings", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "144", "identifier": "node93_copy", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "686", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "result =  fin_transfered_to_general_reserves\n\n# Para separar nodos del c\u00edrculo del dynamic que generaban problemas cuando hab\u00eda broadcasting de otras dimensiones (como iterations y/o scenarios)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_reserves_aux", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reserves Aux", "units": null, "w": "184", "x": "277", "y": "83", "z": 1}, {"color": null, "definition": "result = fin_net_income - fin_dividends_paid - fin_transfered_to_general_reserves\n\n# Para separar nodos del c\u00edrculo del dynamic que generaban problemas cuando hab\u00eda broadcasting de otras dimensiones (como iterations y/o scenarios)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_retained_earnings_aux", "moduleId": "fin_reserves_ret_earnings_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Retained Earnings Aux", "units": null, "w": "184", "x": "277", "y": "133", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_reserves", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a726dcf8ef712491e860dfbb1129e3763", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_reserves", "picture": null, "title": "Reserves", "units": null, "w": "184", "x": "764", "y": "460", "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_retained_earnings", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8b8269b4a9634e91885cf115c088bbf5", "moduleId": "fin_balance_sheet_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_retained_earnings", "picture": null, "title": "Retained Earnings", "units": null, "w": "184", "x": "764", "y": "508", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_time_rel_indexes_variables_mod", "moduleId": "data_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Time Related Indexes and Variables", "units": null, "w": "184", "x": "550", "y": "260", "z": 1}, {"color": null, "definition": "result = concat_index( historic_time, totaltime )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "historic_projected_totaltime", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Historic & Projected Totaltime", "units": null, "w": "100", "x": "54", "y": "243", "z": 1}, {"color": null, "definition": "if selected_scenario != 'All':\n    result = pd.Index(['N/A'])\nelse:\n    result = copy_index(scenarios)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "scenarios_scorecard", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Scenarios for Scorecard", "units": null, "w": "100", "x": "59", "y": "332", "z": 1}, {"color": null, "definition": "if pmk_per_capita_cons_method == 'Input':\n    result = pd.Index(['N/A'])\nelse:\n    result = copy_index(iterations)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "iterations_scorecard", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Iterations for Scorecard", "units": null, "w": "100", "x": "159", "y": "332", "z": 1}, {"color": null, "definition": "_refresh = data_refresh_forms_connection\n\nimport sqlalchemy\n\nresult = sqlalchemy.create_engine( \"mssql+pymssql://user:pass@SERVER/Database\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "38", "identifier": "data_pyplan_forms_connection", "moduleId": "data_mod_copy", "nodeClass": "constant", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan Forms Connection", "units": null, "w": "140", "x": "95", "y": "256", "z": 1}, {"color": "#4CBCFF", "definition": "result = 0.769012475797506", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "data_refresh_forms_connection", "moduleId": "data_mod_copy", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Refresh Forms Connection", "units": null, "w": "104", "x": "112", "y": "210", "z": 1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budgeting_mod", "moduleId": "opx_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budgeting", "units": null, "w": "184", "x": "59", "y": "346", "z": 1}, {"color": "#6FA8DC", "definition": "result = 0", "description": "Budgeting", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "336", "identifier": "node68_copy_copy", "moduleId": "opx_budgeting_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1144", "x": "28", "y": "42", "z": -1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Inputs", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "290", "identifier": "node73_copy", "moduleId": "opx_budgeting_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "226", "x": "40", "y": "74", "z": -1}, {"color": "#A5FF4B", "definition": "_sql_query = \"\"\"\nSELECT \n    T1.cost_center,\n    T0.budget_time_01,\n    T0.budget_time_02,\n    T0.budget_time_03,\n    T0.budget_time_04,\n    T0.budget_time_05,\n    T0.budget_time_06,\n    T0.budget_time_07,\n    T0.budget_time_08,\n    T0.budget_time_09,\n    T0.budget_time_10,\n    T0.budget_time_11,\n    T0.budget_time_12\nFROM CC_Budget T0\nLEFT JOIN\n    CC_CostCenters T1 ON\n        T1.id = T0.id_cost_center\n\"\"\"\n\n_df = pd.read_sql(_sql_query, data_pyplan_forms_connection)\n_da = dataarray_from_pandas(_df, {'cost_center': cost_centers}, help_budget_time, defaultValue = 0., valueColumnsAsDim = True)\n\nresult = change_index(_da, help_budget_time, budget_time, compareMode = 2) ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget", "units": null, "w": "184", "x": "60", "y": "104", "z": 1}, {"color": null, "definition": "result = create_time('2019.01', '2019.12', freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "budget_time", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget Time", "units": null, "w": "100", "x": "39", "y": "220", "z": 1}, {"color": null, "definition": "_year = budget_time[0][:4]\n_year = str(int(_year) - 1)\n\nresult = create_time(_year + '.01', _year + '.12', freq='M', format='%Y.%m' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "py_budget_time", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Previous Year Budget Time", "units": null, "w": "100", "x": "245", "y": "220", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Reports", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "290", "identifier": "node73_copy_copy", "moduleId": "opx_budgeting_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "882", "x": "277", "y": "74", "z": -1}, {"color": "#A5FF4B", "definition": "_sql_query = \"\"\"\nSELECT \n    T1.cost_center,\n    T0.py_budget_time_01,\n    T0.py_budget_time_02,\n    T0.py_budget_time_03,\n    T0.py_budget_time_04,\n    T0.py_budget_time_05,\n    T0.py_budget_time_06,\n    T0.py_budget_time_07,\n    T0.py_budget_time_08,\n    T0.py_budget_time_09,\n    T0.py_budget_time_10,\n    T0.py_budget_time_11,\n    T0.py_budget_time_12\nFROM CC_PreviousYearOPEX T0\nLEFT JOIN\n    CC_CostCenters T1 ON\n        T1.id = T0.id_cost_center\n\"\"\"\n\n_df = pd.read_sql(_sql_query, data_pyplan_forms_connection)\n_da = dataarray_from_pandas(_df, {'cost_center': cost_centers}, help_py_budget_time, defaultValue = 0., valueColumnsAsDim = True)\n\nresult = change_index(_da, help_py_budget_time, py_budget_time, compareMode = 2)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_py_opex", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Previous Year OPEX", "units": null, "w": "184", "x": "60", "y": "145", "z": 1}, {"color": "#9999ff", "definition": "_sql_query = \"\"\"\nSELECT cost_center AS cost_centers\nFROM CC_CostCenters\n\"\"\"\n\nresult = pd.Index(pd.read_sql(_sql_query, data_pyplan_forms_connection)['cost_centers'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "cost_centers", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cost Centers", "units": null, "w": "100", "x": "39", "y": "281", "z": 1}, {"color": null, "definition": "result = pd.Index(['budget_time_01', 'budget_time_02', 'budget_time_03', 'budget_time_04', 'budget_time_05', 'budget_time_06', 'budget_time_07', 'budget_time_08', 'budget_time_09', 'budget_time_10', 'budget_time_11', 'budget_time_12'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "help_budget_time", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Help Budget Time", "units": null, "w": "100", "x": "143", "y": "220", "z": 1}, {"color": null, "definition": "result = pd.Index(['py_budget_time_01', 'py_budget_time_02', 'py_budget_time_03', 'py_budget_time_04', 'py_budget_time_05', 'py_budget_time_06', 'py_budget_time_07', 'py_budget_time_08', 'py_budget_time_09', 'py_budget_time_10', 'py_budget_time_11', 'py_budget_time_12'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "help_py_budget_time", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Help Previous Year Budget Time", "units": null, "w": "100", "x": "347", "y": "220", "z": 1}, {"color": "#A5FF4B", "definition": "_sql_query = \"\"\"\nSELECT \n    T1.cost_center,\n    T0.budget_time_01,\n    T0.budget_time_02,\n    T0.budget_time_03,\n    T0.budget_time_04,\n    T0.budget_time_05,\n    T0.budget_time_06,\n    T0.budget_time_07,\n    T0.budget_time_08,\n    T0.budget_time_09,\n    T0.budget_time_10,\n    T0.budget_time_11,\n    T0.budget_time_12\nFROM CC_Outlook T0\nLEFT JOIN\n    CC_CostCenters T1 ON\n        T1.id = T0.id_cost_center\n\"\"\"\n\n_df = pd.read_sql(_sql_query, data_pyplan_forms_connection)\n_da = dataarray_from_pandas(_df, {'cost_center': cost_centers}, help_budget_time, defaultValue = 0., valueColumnsAsDim = True)\n\nresult = change_index(_da, help_budget_time, budget_time, compareMode = 2)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_outlook", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Outlook", "units": null, "w": "184", "x": "60", "y": "188", "z": 1}, {"color": "#9999ff", "definition": "_sql_query = \"\"\"\nSELECT department AS departments\nFROM CC_Departments\n\"\"\"\n\nresult = pd.Index(pd.read_sql(_sql_query, data_pyplan_forms_connection)['departments'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "departments", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Departments", "units": null, "w": "100", "x": "142", "y": "281", "z": 1}, {"color": "#A5FF4B", "definition": "_sql_query = \"\"\"\nSELECT \n    T0.cost_center,\n    T1.department\nFROM CC_CostCenters T0\nLEFT JOIN\n    CC_Departments T1 ON\n        T1.id = T0.id_department\n\"\"\"\n\n_df = pd.read_sql(_sql_query, data_pyplan_forms_connection)\n\nresult = dataarray_from_pandas(_df, {'cost_center': cost_centers}, 'department', defaultValue = '', valueColumnsAsDim = False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_dpt_to_cc_alloc", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Department to Cost Center Allocation", "units": null, "w": "184", "x": "60", "y": "230", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Budget\",\"Prev Year\",\"Difference\",\"Bgt / PY\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "budget_vs_previous_year", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget vs. Previous Year", "units": null, "w": "100", "x": "39", "y": "343", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_year_total_by_cc, budget_py_opex_outlook_forecast_actual, 'Budget')\n_py_opex = subscript(opx_year_total_by_cc, budget_py_opex_outlook_forecast_actual, 'PY OPEX')\n\n_difference = _budget - _py_opex\n_difference_pc = (_difference / _py_opex).fillna(0.)\n\nresult = xr.concat([_budget, _py_opex, _difference, _difference_pc], dim = budget_vs_previous_year)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_py_yt_by_cc", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. Previous Year - Year Total by CC", "units": null, "w": "184", "x": "518", "y": "188", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_year_total, budget_py_opex_outlook_forecast_actual, 'Budget').values.tolist()\n_py_opex = subscript(opx_year_total, budget_py_opex_outlook_forecast_actual, 'PY OPEX').values.tolist()\n\nif _py_opex != 0.:\n    result = _budget / _py_opex -1\nelse:\n    result = 0.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_py_yt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. Previous Year - Year Total", "units": null, "w": "184", "x": "518", "y": "314", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_year_total_by_dpt, budget_py_opex_outlook_forecast_actual, 'Budget')\n_py_opex = subscript(opx_year_total_by_dpt, budget_py_opex_outlook_forecast_actual, 'PY OPEX')\n\n_difference = _budget - _py_opex\n_difference_pc = (_difference / _py_opex).fillna(0.)\n\nresult = xr.concat([_budget, _py_opex, _difference, _difference_pc], dim = budget_vs_previous_year)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_py_yt_by_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. Previous Year - Year Total by Dept", "units": null, "w": "184", "x": "518", "y": "230", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_year_total_by_cc_dpt, budget_py_opex_outlook_forecast_actual, 'Budget')\n_py_opex = subscript(opx_year_total_by_cc_dpt, budget_py_opex_outlook_forecast_actual, 'PY OPEX')\n\n_difference = _budget - _py_opex\n_difference_pc = (_difference / _py_opex).fillna(0.)\n\nresult = xr.concat([_budget, _py_opex, _difference, _difference_pc], dim = budget_vs_previous_year)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_py_yt_by_cc_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. PY - Year Total by CC and Dept", "units": null, "w": "184", "x": "518", "y": "272", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Budget\",\"Outlook\",\"Difference\",\"Bgt / Outl\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "budget_vs_outlook", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget vs. Outlook", "units": null, "w": "100", "x": "143", "y": "343", "z": 1}, {"color": "#4CBCFF", "definition": "result = opx_budget_py_opex_outlook_forecast_actual.sum(seasons.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_year_total_by_cc", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Year Total by Cost Center", "units": null, "w": "184", "x": "297", "y": "188", "z": 1}, {"color": "#4CBCFF", "definition": "result = opx_year_total_by_cc.sum(cost_centers.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_year_total", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Year Total", "units": null, "w": "184", "x": "297", "y": "314", "z": 1}, {"color": "#4CBCFF", "definition": "result = opx_year_total_by_cc * (to_dataarray(departments) == opx_dpt_to_cc_alloc)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_year_total_by_cc_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Year Total by Cost Center and Department", "units": null, "w": "184", "x": "297", "y": "272", "z": 1}, {"color": "#4CBCFF", "definition": "result = aggregate(opx_year_total_by_cc, opx_dpt_to_cc_alloc, cost_centers, departments)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_year_total_by_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Year Total by Department", "units": null, "w": "184", "x": "297", "y": "230", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_year_total_by_cc, budget_py_opex_outlook_forecast_actual, 'Budget')\n_outlook = subscript(opx_year_total_by_cc, budget_py_opex_outlook_forecast_actual, 'Outlook')\n\n_difference = _budget - _outlook\n_difference_pc = (_difference / _outlook).fillna(0.)\n\nresult = xr.concat([_budget, _outlook, _difference, _difference_pc], dim = budget_vs_outlook)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_outlook_yt_by_cc", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. Outlook - Year Total by CC", "units": null, "w": "184", "x": "737", "y": "188", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_year_total, budget_py_opex_outlook_forecast_actual, 'Budget').values.tolist()\n_outlook = subscript(opx_year_total, budget_py_opex_outlook_forecast_actual, 'Outlook').values.tolist()\n\nif _outlook != 0.:\n    result = _budget / _outlook -1\nelse:\n    result = 0.", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_outlook_yt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. Outlook - Year Total", "units": null, "w": "184", "x": "737", "y": "314", "z": 1}, {"color": "#9999ff", "definition": "result = subset(to_dataarray(budget_time) > last_actual_month)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "opex_projected_months", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX - Projected Months", "units": null, "w": "100", "x": "39", "y": "407", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(budget_time,7, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "last_actual_month", "moduleId": "data_mod_copy", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Last Actual Month", "units": null, "w": "185", "x": 169, "y": 775, "z": 1}, {"color": "#4CFFA6", "definition": "result = last_actual_month", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a505661c7570a4956bb394710e27b0b87", "moduleId": "opx_budgeting_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "last_actual_month", "picture": null, "title": "Last Actual Month", "units": null, "w": "238", "x": "42", "y": "395", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Budget\",\"PY OPEX\",\"Outlook\",\"Forecast\",\"Actual\",\"Last Actual Month\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "budget_py_opex_outlook_forecast_actual", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget / PY OPEX / Outlook / Forecast / Actual", "units": null, "w": "100", "x": "347", "y": "281", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Actual\",\"Budget\",\"Difference\",\"Bgt / Act\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "budget_vs_actual", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget vs. Actual", "units": null, "w": "100", "x": "347", "y": "343", "z": 1}, {"color": "#4CBCFF", "definition": "_budget = change_index(opx_budget, budget_time, seasons, compareMode = 2)\n_py_opex = change_index(opx_py_opex, py_budget_time, seasons, compareMode = 2)\n_outlook = change_index(opx_outlook, budget_time, seasons, compareMode = 2)\n_forecast = change_index(xr.where(to_dataarray(budget_time) > last_actual_month, opx_outlook, 0.), budget_time, seasons, compareMode = 2)\n_actual = change_index(xr.where(to_dataarray(budget_time) <= last_actual_month, opx_outlook, 0.), budget_time, seasons, compareMode = 2)\n_last_actual_month = change_index(xr.where(to_dataarray(budget_time) == last_actual_month, opx_outlook, 0.), budget_time, seasons, compareMode = 2)\n\nresult = xr.concat([_budget, _py_opex, _outlook, _forecast, _actual, _last_actual_month], dim = budget_py_opex_outlook_forecast_actual)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_py_opex_outlook_forecast_actual", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget / PY OPEX / Outlook / Forecast / Actual", "units": null, "w": "184", "x": "297", "y": "145", "z": 1}, {"color": "#9999ff", "definition": "result = subset(to_dataarray(budget_time) <= last_actual_month)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "opex_actual_months", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX - Actual Months", "units": null, "w": "100", "x": "143", "y": "407", "z": 1}, {"color": "#CCCCCC", "definition": "_actual = subscript(opx_year_total_by_dpt, budget_py_opex_outlook_forecast_actual, 'Actual')\n_forecast = subscript(opx_year_total_by_dpt, budget_py_opex_outlook_forecast_actual, 'Forecast')\n_outlook = subscript(opx_year_total_by_dpt, budget_py_opex_outlook_forecast_actual, 'Outlook')\n_budget = subscript(opx_year_total_by_dpt, budget_py_opex_outlook_forecast_actual, 'Budget')\n\n_difference = _outlook - _budget\n_difference_pc = (_difference / _budget).fillna(0.)\n\nresult = xr.concat([_actual, _forecast, _outlook, _budget, _difference, _difference_pc], dim = outlook_vs_budget)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_outlook_vs_budget_yt_by_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Outlook vs. Budget - Year Total by Dept", "units": null, "w": "184", "x": "737", "y": "230", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Actual','Forecast','Outlook','Budget','Difference','Outl / Bgt'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "outlook_vs_budget", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Outlook vs. Budget", "units": null, "w": "100", "x": "245", "y": "343", "z": 1}, {"color": "#9999ff", "definition": "result = subset(\n    change_index(to_dataarray(budget_time) <= last_actual_month, budget_time, seasons, compareMode = 2)\n    )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "opex_actual_seasons", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX - Actual Seasons", "units": null, "w": "100", "x": "245", "y": "407", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Month', 'YTD'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "month_ytd", "moduleId": "opx_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Month / YTD", "units": null, "w": "100", "x": "245", "y": "281", "z": 1}, {"color": "#4CBCFF", "definition": "_actual_months = change_index(opx_budget_py_opex_outlook_forecast_actual, seasons, opex_actual_seasons)\n_budget_actual = change_index(_actual_months, budget_py_opex_outlook_forecast_actual, budget_vs_actual, defaultValue = np.nan)\n_budget_actual_w_dpt = _budget_actual * (to_dataarray(departments) == opx_dpt_to_cc_alloc)\n_budget = subscript(_budget_actual_w_dpt, budget_vs_actual, 'Budget')\n_actual = subscript(_budget_actual_w_dpt, budget_vs_actual, 'Actual')\n\n_report = xr.where(to_dataarray(budget_vs_actual) == 'Difference', _actual - _budget, _budget_actual_w_dpt)\n\n_month = subscript(_report, opex_actual_seasons, last_actual_month[len(last_actual_month)-1:])\n_ytd = subscript(_report.cumsum(opex_actual_seasons.name), opex_actual_seasons, last_actual_month[len(last_actual_month)-1:])\n\nresult = xr.concat([_month, _ytd], dim = month_ytd)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_vs_actual_by_cc_dpt_a", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Budget vs. Actual by CC and Dept Aux", "units": null, "w": "184", "x": "737", "y": "272", "z": 1}, {"color": "#4CFFA6", "definition": "result = last_actual_month", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a505661c7570a4956bb394710e27b0b87_copy", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "last_actual_month", "picture": null, "title": "Last Actual Month", "units": null, "w": "463", "x": 169, "y": 776, "z": 1}, {"color": null, "definition": "_refresh = data_refresh_forms_connection\n\nimport sqlalchemy\n\nresult = sqlalchemy.create_engine( \"mssql+pymssql://user:pass@SERVER/Database\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "38", "identifier": "data_cubepy_connection", "moduleId": "data_mod_copy", "nodeClass": "constant", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cubepy Connection", "units": null, "w": "140", "x": "94", "y": "313", "z": 1}, {"color": "#A5FF4B", "definition": "_sql_query = \"\"\"\nSELECT\n    T1.FullName as 'User',\n    T1.UserLogin as 'UserLogin',\n    T2.Name as 'Task',\n    T0.Title as 'Activity',\n    T0.[Percent] as 'Percent',\n    T3.Name as 'State'\nFROM Tasks T0\n    INNER JOIN Users T1\n        ON T0.UserId = T1.UserId\n    INNER JOIN TaskGroups T2\n        ON T0.TaskGroupId = T2.TaskGroupId\n    INNER JOIN TaskStates T3\n        ON T0.TaskStateId = T3.TaskStateId\nWHERE\n    (T0.CompanyId = 3) AND (T0.Model = 'demo_manufacturing')\n\"\"\"\n\n_df = pd.read_sql(_sql_query, data_cubepy_connection)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_budget_workflow", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budget Workflow", "units": null, "w": "184", "x": "60", "y": "314", "z": 1}, {"color": "#CBCBCB", "definition": "from random import random\n\ndata_refresh_forms_connection.node.definition = 'result = ' + str(random())\n\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "opx_refresh_db_read", "moduleId": "opx_budgeting_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Refresh DB Read", "units": null, "w": "154", "x": "312", "y": "391", "z": 1}, {"color": "#CCCCCC", "definition": "_input = opx_budget_vs_actual_by_cc_dpt_a.sum(cost_centers.name)\n_budget = subscript(_input, budget_vs_actual, 'Budget')\n_actual = subscript(_input, budget_vs_actual, 'Actual')\n_difference = _actual - _budget\n_difference_pc = (_difference / _budget).fillna(0.)\n\nresult = xr.concat([_actual, _budget, _difference, _difference_pc], dim = budget_vs_actual)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_actual_vs_budget_by_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Actual vs. Budget by Dept", "units": null, "w": "184", "x": "955", "y": "230", "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(opx_budget_vs_actual_by_cc_dpt_a, budget_vs_actual, 'Budget')\n_actual = subscript(opx_budget_vs_actual_by_cc_dpt_a, budget_vs_actual, 'Actual')\n_difference = _actual - _budget\n_difference_pc = (_difference / _budget).fillna(0.)\n\nresult = xr.concat([_actual, _budget, _difference, _difference_pc], dim = budget_vs_actual)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opx_actual_vs_budget_by_cc_dpt", "moduleId": "opx_budgeting_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Opex - Actual vs. Budget by CC and Dept", "units": null, "w": "184", "x": "955", "y": "272", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate(fin_cash_flow_report, time_to_years, time, years)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_flow_report_annual", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report (annual)", "units": "MM$", "w": "184", "x": "49", "y": "593", "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index(ast_annual_growth_rate, totalyears, years)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ast_annual_growth_rate_years", "moduleId": "ast_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual Growth Rate (years)", "units": null, "w": "184", "x": "531", "y": "149", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate(fin_pl_waterfall, time_to_years, time, years)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_annual_pl_waterfall", "moduleId": "fin_profit_loss_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Annual P&L Waterfall", "units": "MM$", "w": "184", "x": "524", "y": "1080", "z": 1}, {"color": "#CCCCCC", "definition": "result = aggregate(fin_cash_flow_waterfall, time_to_years, time, years)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_cash_flow_waterfall_annual", "moduleId": "fin_cash_flow_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Waterfall (annual)", "units": "MM$", "w": "184", "x": "496", "y": "593", "z": 1}, {"color": "#9fc5e8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "pyplan_library", "moduleId": "data_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan library", "units": null, "w": "100", "x": 350, "y": 306, "z": 1}, {"color": "#6699ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ctr_mod", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Control", "units": null, "w": "146", "x": 611, "y": 549, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Control", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "830", "identifier": "node172_1", "moduleId": "ctr_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1351", "x": 28, "y": 42, "z": "-2"}, {"color": "#CCCCCC", "definition": "result = fin_pl_report", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "afa7346880f1b4dcbae0b112a4536f621", "moduleId": "ctr_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_pl_report", "picture": null, "title": "P&L Report", "units": null, "w": "184", "x": 49, "y": 82, "z": 1}, {"color": "#CCCCCC", "definition": "result = fin_cash_flow_report", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8eabe065d9664b4f977f54658717f53a", "moduleId": "ctr_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_cash_flow_report", "picture": null, "title": "Cash Flow Report", "units": null, "w": "184", "x": 49, "y": 615, "z": 1}, {"color": "#ffff4b", "definition": "result = xr.DataArray([[0.0, 5753.862743564, 6377.123156891, 6778.376652833, 7276.583307504, 8312.772537826, 9305.945168191, 10535.253396508, 9990.432216275, 8934.68093554, 7977.851964518, 7549.238087088, 7096.017469558, 6704.621735973, 7228.117643549, 7708.516601059, 8613.882065936, 9825.108094805, 10875.418440822, 11954.4293854, 11755.905426315, 9885.534308665, 8941.071449449, 8822.293797215, 8042.991129803, 7700.32475778, 8361.001716292, 9071.1414295, 9536.434686298, 10887.706424904, 12450.540295727, 13615.780695468, 13092.659452509, 11770.936103721, 10446.315007359, 9760.941298178, 9497.792206075], [-0.0, -3690.416900889, -4202.939578177, -4508.298259025, -4922.810773187, -5530.709667122, -6187.413793573, -6925.745550201, -6691.267916874, -5756.893731037, -5367.707197485, -5003.8690646, -4815.44057273, -4345.950839711, -4773.999081133, -5243.887091485, -5507.37988244, -6395.686804537, -7151.451514155, -7971.164868501, -7797.862439261, -6688.788816028, -6040.441385901, -5819.727837823, -5469.957201289, -5212.089702565, -5501.095133404, -6057.538805091, -6431.55897872, -7319.445305623, -8391.753869988, -8885.490879397, -8768.825850556, -7888.060935258, -6832.716977858, -6582.157109041, -6324.191504578], [-0.0, -552.389019737, -538.981457, -535.626390962, -597.172716472, -597.61811486, -744.377771133, -874.81816855, -832.795521542, -614.949199224, -602.245717025, -613.100632089, -555.93977188, -561.403024465, -563.247895697, -604.141409772, -600.143079213, -785.843343059, -864.872958359, -874.117310519, -900.460392065, -772.012958685, -620.288942159, -602.816048056, -606.151277461, -574.341079238, -622.757840446, -634.102687023, -718.210050178, -884.019385332, -886.254840474, -898.465087766, -903.751864194, -903.848077336, -860.37369649, -745.889254631, -628.718023056], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1511.056822937, 1635.202121713, 1734.452002846, 1756.599817846, 2184.444755844, 2374.153603486, 2734.689677757, 2466.368777859, 2562.838005279, 2007.899050008, 1932.2683904, 1724.637124947, 1797.267871796, 1890.870666719, 1860.488099803, 2506.359104283, 2643.57794721, 2859.093968307, 3109.14720638, 3057.582594989, 2424.732533952, 2280.341121389, 2399.749911336, 1966.882651053, 1913.893975977, 2237.148742442, 2379.499937387, 2386.6656574, 2684.241733949, 3172.531585265, 3831.824728305, 3420.081737759, 2979.027091126, 2753.224333011, 2432.894934506, 2544.882678441], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0, -344.805425773, -375.755788386, -420.615091254, -448.365046648, -513.991791625, -571.891153329, -640.806572996, -626.764357218, -533.851126069, -489.061228533, -447.946616666, -429.861684129, -405.879404812, -441.769214033, -479.604634289, -508.194777655, -577.115664436, -669.942999923, -727.59521086, -705.834197105, -622.926853309, -535.785745811, -521.152816167, -498.653771324, -464.263245831, -502.618086914, -538.642394975, -571.178454794, -669.628134059, -753.454496539, -792.716013126, -775.326785972, -685.281269845, -622.570432288, -591.420390333, -570.822305912], [-0.0, -12.550442931, -12.807039656, -13.005938107, -12.806558543, -12.702933964, -12.825236731, -12.936515297, -12.539992473, -12.878466418, -13.161147439, -13.261716602, -13.170428302, -13.347212703, -13.054756616, -12.886964577, -13.295957165, -13.561868383, -13.268194279, -13.598745089, -13.552030599, -13.676306457, -13.771845741, -13.981091492, -13.879195678, -14.170821835, -13.689612828, -14.341385331, -14.130760342, -14.378573625, -14.418176807, -14.243486485, -14.16197052, -14.689916431, -14.392484171, -14.951617894, -14.476356118], [-0.0, -29.425971962, -30.089589174, -30.241439277, -29.457544767, -30.047785911, -30.213320078, -29.071167319, -29.540277194, -30.252797589, -29.5545716, -30.638351614, -30.146502669, -29.450715308, -29.634917677, -30.289250042, -30.778269378, -29.742669751, -30.238489655, -30.084891903, -30.16913351, -30.572597354, -31.034476259, -29.79248317, -30.501920917, -29.777836599, -31.000948542, -30.547950544, -30.652224535, -30.836029417, -30.031409181, -30.192144889, -31.197974136, -30.640981012, -31.025916717, -30.509561716, -31.564506218], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1124.274982272, 1216.549704498, 1270.589534207, 1265.970667887, 1627.702244344, 1759.223893348, 2051.875422145, 1797.524150975, 1985.855615204, 1476.122102435, 1440.421705517, 1251.458509847, 1348.590538973, 1406.411778392, 1337.707250894, 1954.090100085, 2023.157744639, 2145.644284451, 2337.868358529, 2308.027233776, 1757.556776832, 1699.749053578, 1834.823520508, 1423.847763134, 1405.682071712, 1689.840094157, 1795.968206537, 1770.704217729, 1969.398996848, 2374.627502739, 2994.673083805, 2599.395007131, 2248.414923839, 2085.235499835, 1796.013364562, 1928.019510194], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0, -2.21047875, -2.213590594, -2.24558396, -2.26771864, -2.225930883, -2.256490764, -2.239659841, -2.278770245, -2.310041784, -2.283190027, -2.240957477, -2.244430465, -2.204107694, -2.219376643, -2.243472888, -2.266563882, -2.232218773, -2.252519747, -2.214646339, -2.267387154, -2.273837761, -2.287435441, -2.209940777, -2.217359839, -1.577403546, -1.629937076, -1.603706596, -1.622204046, -1.633850354, -1.598826581, -1.622628239, -1.559487451, -1.689910671, -1.710759752, -1.672083184, -1.676424856], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1122.064503522, 1214.336113904, 1268.343950248, 1263.702949247, 1625.476313461, 1756.967402585, 2049.635762304, 1795.24538073, 1983.54557342, 1473.838912408, 1438.180748041, 1249.214079382, 1346.386431279, 1404.192401749, 1335.463778006, 1951.823536203, 2020.925525866, 2143.391764703, 2335.65371219, 2305.759846622, 1755.28293907, 1697.461618138, 1832.613579731, 1421.630403295, 1404.104668166, 1688.21015708, 1794.364499941, 1769.082013683, 1967.765146493, 2373.028676158, 2993.050455566, 2597.83551968, 2246.725013168, 2083.524740083, 1794.341281379, 1926.343085338], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, -6.302110888, 2.910795867, 8.169745411, 12.482271207, 17.408046503, 23.759383008, 30.441197547, 37.859818505, 44.677309942, 50.570502315, 55.302586139, 57.751036494, 47.438707478, 53.617692601, 57.989051985, 61.608135941, 68.072648285, 76.771932341, 85.963655525, 90.559059785, 101.381469069, 105.386936687, 110.788135402, 117.552064775, 102.813090013, 109.929589711, 117.26564725, 121.936369138, 129.872462989, 134.43464694, 149.521754713, 158.263805728, 167.551968055, 172.108286722, 179.866339847, 180.79948212], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1115.762392634, 1217.246909771, 1276.513695659, 1276.185220454, 1642.884359964, 1780.726785592, 2080.076959851, 1833.105199235, 2028.222883361, 1524.409414724, 1493.48333418, 1306.965115876, 1393.825138757, 1457.81009435, 1393.452829991, 2013.431672144, 2088.998174151, 2220.163697044, 2421.617367716, 2396.318906407, 1856.664408139, 1802.848554825, 1943.401715132, 1539.18246807, 1506.917758179, 1798.139746791, 1911.630147191, 1891.018382821, 2097.637609482, 2507.463323098, 3142.572210279, 2756.099325407, 2414.276981223, 2255.633026805, 1974.207621226, 2107.142567457], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0, -390.516837422, -426.03641842, -446.77979348, -446.664827159, -575.009525988, -623.254374957, -728.026935948, -641.586819732, -709.878009176, -533.543295153, -522.719166963, -457.437790556, -487.838798565, -510.233533023, -487.708490497, -704.70108525, -731.149360953, -777.057293965, -847.5660787, -838.711617242, -649.832542849, -630.996994189, -680.190600296, -538.713863824, -527.421215363, -629.348911377, -669.070551517, -661.856433987, -734.173163319, -877.612163084, -1099.900273598, -964.634763893, -844.996943428, -789.471559382, -690.972667429, -737.49989861], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 725.245555212, 791.210491351, 829.733902178, 829.520393295, 1067.874833977, 1157.472410635, 1352.050023903, 1191.518379503, 1318.344874185, 990.86611957, 970.764167217, 849.527325319, 905.986340192, 947.576561328, 905.744339494, 1308.730586893, 1357.848813198, 1443.106403079, 1574.051289015, 1557.607289164, 1206.83186529, 1171.851560636, 1263.211114836, 1000.468604245, 979.496542816, 1168.790835414, 1242.559595674, 1229.161948834, 1363.464446163, 1629.851160014, 2042.671936681, 1791.464561515, 1569.280037795, 1466.161467423, 1283.234953797, 1369.642668847]], [pl_concepts, time])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_report_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Report - Actual", "units": null, "w": "184", "x": 49, "y": 207, "z": 1}, {"color": "#4CFFA6", "definition": "result = last_actual_month", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a505661c7570a4956bb394710e27b0b87_copy_1", "moduleId": "ctr_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "last_actual_month", "picture": null, "title": "Last Actual Month", "units": null, "w": "340", "x": 953, "y": 72, "z": 1}, {"color": "#4CBCFF", "definition": "_pl_actual = xr.concat([ctr_pl_report_act, ctr_pl_report_act_ytd], dim = month_ytd) + empty_cube_time_scenarios_iterations_base_scen\n_pl_budget = xr.concat([ctr_pl_report_base_scenario, ctr_pl_report_bgt_ytd], dim = month_ytd)\n\n_actual = change_index(_pl_actual, time, actual_time)\n_budget = change_index(_pl_budget, time, actual_time)\n_difference = _actual - _budget\n_difference_pc = xr.where(_budget == 0., 0., _difference / _budget)\n\nresult = xr.concat([_actual, _budget, _difference, _difference_pc], dim = actual_budget)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L - Budget vs. Actual", "units": null, "w": "184", "x": 273, "y": 247, "z": 1}, {"color": "#4c83ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ctr_indexes_mod", "moduleId": "indexes_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Control Indexes", "units": null, "w": "146", "x": 425, "y": 313, "z": 1}, {"color": "#9999ff", "definition": "self.set_hierarchy(['actual_quarters', 'actual_semesters', 'actual_years'], ['actual_time_to_quarter', 'actual_time_to_semester', 'actual_time_to_years'])\n\nresult = subset(to_dataarray(time) <= last_actual_month)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_time", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Time", "units": null, "w": "100", "x": 52, "y": 50, "z": 1}, {"color": "#4CBCFF", "definition": "result = time_to_years", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae2baa7f09fae465d8fcaf7480357a0a3", "moduleId": "ctr_indexes_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "time_to_years", "picture": null, "title": "Time to Years", "units": null, "w": "184", "x": 642, "y": 53, "z": 1}, {"color": "#4CBCFF", "definition": "result = time_to_quarter", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a82dc76254aa243cab90e3685ef1ffcd1", "moduleId": "ctr_indexes_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "time_to_quarter", "picture": null, "title": "Time to Quarter", "units": null, "w": "184", "x": 202, "y": 53, "z": 1}, {"color": "#4CBCFF", "definition": "result = time_to_semester", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa24d02567dd54e41bd491e2bc45759ed", "moduleId": "ctr_indexes_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "time_to_semester", "picture": null, "title": "Time to Semester", "units": null, "w": "184", "x": 421, "y": 53, "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index(time_to_years, time, actual_time)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "actual_time_to_years", "moduleId": "ctr_indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Time to Years", "units": null, "w": "184", "x": 642, "y": 99, "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index(time_to_quarter, time, actual_time)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "actual_time_to_quarter", "moduleId": "ctr_indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Time to Quarter", "units": null, "w": "184", "x": 202, "y": 99, "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index(time_to_semester, time, actual_time)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "actual_time_to_semester", "moduleId": "ctr_indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Time to Semester", "units": null, "w": "184", "x": 421, "y": 99, "z": 1}, {"color": null, "definition": "result = copy_index(actual_time_to_years)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_years", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Years", "units": null, "w": "100", "x": 684, "y": 142, "z": 1}, {"color": null, "definition": "result = copy_index(actual_time_to_semester)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_semesters", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Semesters", "units": null, "w": "100", "x": 463, "y": 142, "z": 1}, {"color": null, "definition": "result = copy_index(actual_time_to_quarter)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_quarters", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual Quarters", "units": null, "w": "100", "x": 244, "y": 142, "z": 1}, {"color": "#4CBCFF", "definition": "_concepts = pd.Index(['Sales', 'Supply Cost', 'Manpower Cost', 'Logistics Cost', 'Operating MP Cost', 'MSO Cost', 'Depreciation', 'Net Interest Received/Paid'])\r\n_calc_concepts = ['Gross Margin', 'EBITDA', 'EBIT', 'Profit Before Tax', 'Income Tax', 'Net Income']\r\n\r\n_coefficients = np.random.uniform(0.975, 1.025, [len(time), len(pl_concepts)])\r\n_coefficients = xr.DataArray(_coefficients, [time, pl_concepts])\r\n_coefficients = xr.where(pl_concepts.isin(_concepts), _coefficients, 1.)\r\n\r\nif len(inputs_scenarios) == 1:\r\n    _income_tax_rate = fin_income_tax_rate\r\nelse:\r\n    _income_tax_rate = subscript(fin_income_tax_rate, inputs_scenarios, 'Base Scenario')\r\n\r\n_pl = ctr_pl_report_base_scenario * _coefficients\r\n_gross_margin = subscript(_pl, pl_concepts, 'Sales') + subscript(_pl, pl_concepts, 'Supply Cost') + subscript(_pl, pl_concepts, 'Manpower Cost')\r\n_ebitda = _gross_margin + subscript(_pl, pl_concepts, 'Logistics Cost') + subscript(_pl, pl_concepts, 'Operating MP Cost') + subscript(_pl, pl_concepts, 'MSO Cost')\r\n_ebit = _ebitda + subscript(_pl, pl_concepts, 'Depreciation')\r\n_profit_bef_tax = _ebit + subscript(_pl, pl_concepts, 'Net Interest Received/Paid')\r\n_income_tax = - _profit_bef_tax * _income_tax_rate\r\n_net_income = _profit_bef_tax + _income_tax\r\n\r\n_pl_concepts_array = to_dataarray(pl_concepts)\r\n_pl = xr.where(_pl_concepts_array == 'Gross Margin', _gross_margin, xr.where(_pl_concepts_array == 'EBITDA', _ebitda, xr.where(_pl_concepts_array == 'EBIT', _ebit, xr.where(_pl_concepts_array == 'Profit Before Tax', _profit_bef_tax, xr.where(_pl_concepts_array == 'Income Tax', _income_tax, xr.where(_pl_concepts_array == 'Net Income', _net_income, _pl\r\n))))))\r\n\r\nresult = _pl", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_report_act_calc", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Report - Actual (Calc)", "units": null, "w": "184", "x": 49, "y": 164, "z": 1}, {"color": "#CBCBCB", "definition": "_dims_pl = str(list(ctr_pl_report_act_calc.dims)).replace(\"'\", \"\")\nctr_pl_report_act.node.definition = \"result = xr.DataArray(\" + str(ctr_pl_report_act_calc.round(9).values.tolist()) + \", \" + _dims_pl + \")\"\n\n_dims_cf = str(list(ctr_cash_flow_report_act_calc.dims)).replace(\"'\", \"\")\nctr_cash_flow_report_act.node.definition = \"result = xr.DataArray(\" + str(ctr_cash_flow_report_act_calc.round(9).values.tolist()) + \", \" + _dims_cf + \")\"\n\nresult = \"OK\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "ctr_btn_copy_actual_financial_reports", "moduleId": "ctr_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy Actual Financial Reports", "units": null, "w": "154", "x": 1046, "y": 129, "z": 1}, {"color": "#4CBCFF", "definition": "#['EBITDA','Movement in Working Capital','Income Tax','-','Cash from Operating Activities','--','Cash from Investing Activities','---','Free Cash Flow','----','Net Interest Received/Paid','New Loans','Amortizations','Dividends Paid','-----','Cash from Financing Activities','------','Increase/Decrease in Cash']\r\n_ebitda = subscript(ctr_pl_report_act, pl_concepts, 'EBITDA')\r\n_income_tax = - subscript(ctr_pl_report_act, pl_concepts, 'Income Tax')\r\n_net_interest = subscript(ctr_pl_report_act, pl_concepts, 'Net Interest Received/Paid')\r\n\r\n_concepts = pd.Index(['Movement in Working Capital','Cash from Investing Activities','New Loans','Amortizations','Dividends Paid'])\r\n_calc_concepts = ['Cash from Operating Activities', 'Free Cash Flow', 'Cash from Financing Activities', 'Increase/Decrease in Cash']\r\n\r\n_coefficients = np.random.uniform(0.975, 1.025, [len(time), len(cash_flow_concepts)])\r\n_coefficients = xr.DataArray(_coefficients, [time, cash_flow_concepts])\r\n_coefficients = xr.where(cash_flow_concepts.isin(_concepts), _coefficients, 1.)\r\n\r\n_cf = ctr_cf_report_base_scenario * _coefficients\r\n_cash_op_activ = _ebitda + subscript(_cf, cash_flow_concepts, 'Movement in Working Capital') - _income_tax\r\n_free_cash_flow = _cash_op_activ + subscript(_cf, cash_flow_concepts, 'Cash from Investing Activities')\r\n_cash_fin_activ = _net_interest + subscript(_cf, cash_flow_concepts, 'New Loans') + subscript(_cf, cash_flow_concepts, 'Amortizations') + subscript(_cf, cash_flow_concepts, 'Dividends Paid')\r\n_inc_dec_cash = _free_cash_flow + _cash_fin_activ\r\n\r\n_cash_flow_concepts_array = to_dataarray(cash_flow_concepts)\r\n_cf = xr.where( _cash_flow_concepts_array == 'EBITDA', _ebitda, xr.where(_cash_flow_concepts_array == 'Income Tax', _income_tax, xr.where(_cash_flow_concepts_array == 'Net Interest Received/Paid', _net_interest, xr.where(_cash_flow_concepts_array == 'Cash from Operating Activities', _cash_op_activ, xr.where(_cash_flow_concepts_array == 'Free Cash Flow', _free_cash_flow, xr.where(_cash_flow_concepts_array == 'Cash from Financing Activities', _cash_fin_activ, xr.where(_cash_flow_concepts_array == 'Increase/Decrease in Cash', _inc_dec_cash, _cf\r\n)))))))\r\n\r\nresult = _cf", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_report_act_calc", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report - Actual (Calc)", "units": null, "w": "184", "x": 49, "y": 697, "z": 1}, {"color": "#ffff4b", "definition": "result = xr.DataArray([[0.0, 1124.274982272, 1216.549704498, 1270.589534207, 1265.970667887, 1627.702244344, 1759.223893348, 2051.875422145, 1797.524150975, 1985.855615204, 1476.122102435, 1440.421705517, 1251.458509847, 1348.590538973, 1406.411778392, 1337.707250894, 1954.090100085, 2023.157744639, 2145.644284451, 2337.868358529, 2308.027233776, 1757.556776832, 1699.749053578, 1834.823520508, 1423.847763134, 1405.682071712, 1689.840094157, 1795.968206537, 1770.704217729, 1969.398996848, 2374.627502739, 2994.673083805, 2599.395007131, 2248.414923839, 2085.235499835, 1796.013364562, 1928.019510194], [0.0, 598.825023128, 260.878697391, -11.375949735, 89.030832521, 88.3316237, 154.133195167, 90.093571071, -32.338891785, -112.506727698, -127.944989327, -12.470156371, -71.401627902, -47.966794616, 164.299897352, -17.267363766, 106.410532875, 107.906800292, 189.139631081, 87.821030479, -36.239805951, -131.948153372, -156.911430612, -18.647329392, -89.022711833, -56.747713628, 154.83757857, 16.985803607, 129.538906824, 124.638705483, 198.733943328, 97.350194761, -43.469346884, -132.461113834, -189.186925294, -21.66453646, -103.451643708], [0.0, 390.516837422, 426.03641842, 446.77979348, 446.664827159, 575.009525988, 623.254374957, 728.026935948, 641.586819732, 709.878009176, 533.543295153, 522.719166963, 457.437790556, 487.838798565, 510.233533023, 487.708490497, 704.70108525, 731.149360953, 777.057293965, 847.5660787, 838.711617242, 649.832542849, 630.996994189, 680.190600296, 538.713863824, 527.421215363, 629.348911377, 669.070551517, 661.856433987, 734.173163319, 877.612163084, 1099.900273598, 964.634763893, 844.996943428, 789.471559382, 690.972667429, 737.49989861], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1332.583167978, 1051.391983469, 812.433790992, 908.336673249, 1141.024342056, 1290.102713558, 1413.942057268, 1123.598439458, 1163.47087833, 814.633817955, 905.232382183, 722.619091389, 812.784945792, 1060.478142721, 832.731396631, 1355.79954771, 1399.915183978, 1557.726621567, 1578.123310308, 1433.075810583, 975.776080611, 911.840628777, 1135.98559082, 796.111187477, 821.513142721, 1215.32876135, 1143.883458627, 1238.386690566, 1359.864539012, 1695.749282983, 1992.123004968, 1591.290896354, 1270.956866577, 1106.577015159, 1083.376160673, 1087.067967876], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, -0.124546955, -0.122779805, -0.123433169, -0.122932942, -0.122740267, -0.122061777, -0.123399165, -0.123420108, -0.125884072, -0.122063976, -0.126560014, -0.123957426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.017865922, -0.998615508, -0.978873698, -0.980312844, -1.001526244, -1.02376531, -0.990344204, -1.020807475, -1.015766565, -1.017661369, -1.013213658, -1.003510673, 0.0, 0.0, 0.0, -75.150260214], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1332.583167978, 1051.267436514, 812.311011187, 908.213240079, 1140.901409114, 1289.979973291, 1413.81999549, 1123.475040292, 1163.347458222, 814.507933883, 905.110318207, 722.492531375, 812.660988366, 1060.478142721, 832.731396631, 1355.79954771, 1399.915183978, 1557.726621567, 1578.123310308, 1433.075810583, 974.758214689, 910.84201327, 1135.006717123, 795.130874634, 820.511616477, 1214.304996041, 1142.893114423, 1237.365883091, 1358.848772447, 1694.731621614, 1991.109791311, 1590.287385681, 1270.956866577, 1106.577015159, 1083.376160673, 1011.917707661], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, -6.302110888, 2.910795867, 8.169745411, 12.482271207, 17.408046503, 23.759383008, 30.441197547, 37.859818505, 44.677309942, 50.570502315, 55.302586139, 57.751036494, 47.438707478, 53.617692601, 57.989051985, 61.608135941, 68.072648285, 76.771932341, 85.963655525, 90.559059785, 101.381469069, 105.386936687, 110.788135402, 117.552064775, 102.813090013, 109.929589711, 117.26564725, 121.936369138, 129.872462989, 134.43464694, 149.521754713, 158.263805728, 167.551968055, 172.108286722, 179.866339847, 180.79948212], [99.950050424, 0.0, 0.0, 0.0, 10.138901578, 0.0, 0.0, 0.0, 0.0, 0.492762212, 0.0, 0.0, 0.0, 0.0, 0.765707936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, -0.135257067, -0.137782544, -0.139379209, -0.147701669, -0.150215709, -0.152046623, -0.153716592, -0.161286721, -0.164907606, -0.168219243, -0.171160961, -0.170364011, -0.172288195, -0.179625069, -0.179020852, -0.18833609, -0.234348348, -0.235523064, -0.239238434, -0.24297184, -0.752774031, -0.259752957, -0.269407238, -0.267256233, -0.275434543, -0.281006864, -0.284656526, -0.288059912, -0.299256196, -0.3102991, -0.32328223, -0.57226095, -0.332064532, -0.331624037, -0.344101506, -0.353370982], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3027.525050965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3518.475275498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4037.97734372], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [99.950050424, -6.437367955, 2.773013323, 8.030366202, 22.473471116, 17.257830794, 23.607336385, 30.287480955, 37.698531784, 45.005164547, 50.402283072, 55.131425178, 3085.105723448, 47.266419283, 54.203775468, 57.810031133, 61.419799851, 67.838299937, 76.536409277, 85.724417091, 90.316087945, 100.628695038, 105.12718373, 110.518728164, 3635.76008404, 102.53765547, 109.648582847, 116.980990724, 121.648309226, 129.573206793, 134.12434784, 149.198472483, 157.691544778, 167.219903523, 171.776662685, 179.522238341, 4218.423454858], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [99.950050424, 1326.145800022, 1054.040449837, 820.341377389, 930.686711195, 1158.159239907, 1313.587309676, 1444.107476445, 1161.173572076, 1208.35262277, 864.910216955, 960.241743385, 3807.598254823, 859.92740765, 1114.681918189, 890.541427764, 1417.219347561, 1467.753483914, 1634.263030844, 1663.847727399, 1523.391898528, 1075.386909727, 1015.969196999, 1245.525445286, 4430.890958673, 923.049271947, 1323.953578887, 1259.874105147, 1359.014192317, 1488.42197924, 1828.855969453, 2140.308263793, 1747.97893046, 1438.176770101, 1278.353677844, 1262.898399013, 5230.341162519]], [cash_flow_concepts, time])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_report_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report - Actual", "units": null, "w": "184", "x": 49, "y": 738, "z": 1}, {"color": "#4CBCFF", "definition": "_cf_actual = xr.concat([ctr_cash_flow_report_act, ctr_cash_flow_report_act_ytd], dim = month_ytd) + empty_cube_time_scenarios_iterations_base_scen\n_cf_budget = xr.concat([ctr_cf_report_base_scenario, ctr_cash_flow_report_bgt_ytd], dim = month_ytd)\n\n_actual = change_index(_cf_actual, time, actual_time)\n_budget = change_index(_cf_budget, time, actual_time)\n_difference = _actual - _budget\n_difference_pc = xr.where(_budget == 0., 0., _difference / _budget)\n\nresult = xr.concat([_actual, _budget, _difference, _difference_pc], dim = actual_budget)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow - Budget vs. Actual", "units": null, "w": "184", "x": 273, "y": 777, "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(ctr_pl_bgt_vs_act, [actual_budget, actual_time], ['Budget', last_actual_month])\n_difference = subscript(ctr_pl_bgt_vs_act, [actual_budget, actual_time], ['Difference', last_actual_month])\n\n_net_income_budget = subscript(_budget, pl_concepts, 'Net Income')\n_sales = subscript(_difference, pl_concepts, 'Sales')\n_cogs = subscript(_difference, pl_concepts, 'Supply Cost') + subscript(_difference, pl_concepts, 'Manpower Cost')\n_opex = subscript(_difference, pl_concepts, 'Logistics Cost') + subscript(_difference, pl_concepts, 'Operating MP Cost') + subscript(_difference, pl_concepts, 'MSO Cost')\n_dep_int_tax = subscript(_difference, pl_concepts, 'Depreciation') + subscript(_difference, pl_concepts, 'Net Interest Received/Paid') + subscript(_difference, pl_concepts, 'Income Tax')\n\nresult = xr.concat([_net_income_budget, _sales, _cogs, _opex, _dep_int_tax], dim = pl_waterfall_concepts_control)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_waterfall_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Waterfall - Budget vs. Actual", "units": "MM$", "w": "184", "x": 497, "y": 247, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Budget Net Income','Sales','Cost of Goods Sold','OPEX','Depreciation, Interests and Tax'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "pl_waterfall_concepts_control", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Waterfall Concepts - Control", "units": null, "w": "100", "x": 360, "y": 74, "z": 1}, {"color": "#CCCCCC", "definition": "result = ctr_pl_waterfall_bgt_vs_act.sum(pl_waterfall_concepts_control.name) - subscript(ctr_pl_bgt_vs_act, [pl_concepts, actual_budget, actual_time], ['Net Income', 'Actual', last_actual_month])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_ck_pl_waterfall_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Check P&L Waterfall - Budget vs. Actual", "units": "MM$", "w": "184", "x": 718, "y": 247, "z": 1}, {"color": "#CCCCCC", "definition": "_budget = subscript(ctr_cash_flow_bgt_vs_act, [actual_budget, actual_time], ['Budget', last_actual_month])\n_difference = subscript(ctr_cash_flow_bgt_vs_act, [actual_budget, actual_time], ['Difference', last_actual_month])\n\n_inc_dec_cash_budget = subscript(_budget, cash_flow_concepts, 'Increase/Decrease in Cash')\n_ebitda = subscript(_difference, cash_flow_concepts, 'EBITDA')\n_wc_income_tax = subscript(_difference, cash_flow_concepts, 'Movement in Working Capital') - subscript(_difference, cash_flow_concepts, 'Income Tax')\n_cash_inv_activ = subscript(_difference, cash_flow_concepts, 'Cash from Investing Activities')\n_cash_fin_activ = subscript(_difference, cash_flow_concepts, 'Cash from Financing Activities')\n\nresult = xr.concat([_inc_dec_cash_budget, _ebitda, _wc_income_tax, _cash_inv_activ, _cash_fin_activ], dim = cash_flow_waterfall_concepts_control)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_waterfall_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Waterfall - Budget vs. Actual", "units": "MM$", "w": "184", "x": 497, "y": 777, "z": 1}, {"color": "#CCCCCC", "definition": "result = ctr_cash_flow_waterfall_bgt_vs_act.sum(cash_flow_waterfall_concepts_control.name) - subscript(ctr_cash_flow_bgt_vs_act, [cash_flow_concepts, actual_budget, actual_time], ['Increase/Decrease in Cash', 'Actual', last_actual_month])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_ck_cash_flow_waterfall_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Check Cash Flow Waterfall - Budget vs. Actual", "units": "MM$", "w": "184", "x": 497, "y": 818, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Budget Inc/Dec in Cash','EBITDA','Working Capital Variation and Income Tax','Investments','Interests, Loans and Dividends'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "cash_flow_waterfall_concepts_control", "moduleId": "fin_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Waterfall Concepts Control", "units": null, "w": "100", "x": 259, "y": 268, "z": 1}, {"color": "#4CBCFF", "definition": "result = change_index(subscript(ctr_pl_bgt_vs_act, pl_concepts, 'Sales'), actual_budget, actual_vs_budget)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_sales_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales - Budget vs. Actual", "units": null, "w": "184", "x": 497, "y": 290, "z": 1}, {"color": "#4CBCFF", "definition": "_gross_margin = change_index(subscript(ctr_pl_bgt_vs_act, pl_concepts, 'Gross Margin'), actual_budget, actual_vs_budget)\n\nresult = xr.where(ctr_sales_bgt_vs_act == 0., 0., _gross_margin / ctr_sales_bgt_vs_act)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_gross_margin_ratio_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gross Margin Ratio - Budget vs. Actual", "units": null, "w": "184", "x": 497, "y": 331, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(time_month == 1, ctr_pl_report_base_scenario, pp.dynamic(ctr_pl_report_bgt_ytd, time, -1) + ctr_pl_report_base_scenario)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_report_bgt_ytd", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Report - Budget YTD", "units": null, "w": "184", "x": 273, "y": 123, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(time_month == 1, ctr_pl_report_act, pp.dynamic(ctr_pl_report_act_ytd, time, -1) + ctr_pl_report_act)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_report_act_ytd", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Report - Actual YTD", "units": null, "w": "184", "x": 273, "y": 207, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Actual\",\"Budget\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_vs_budget", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual vs. Budget", "units": null, "w": "100", "x": 354, "y": 239, "z": 1}, {"color": "#cccccc", "definition": "import plotly.graph_objects as go\r\nimport plotly.express as px\r\n\r\n_sales = ctr_sales_bgt_vs_act.round(2).to_dataframe('valor').reset_index()\r\n_sales = _sales[_sales['valor'] != 0.]\r\n_sales = _sales[_sales[month_ytd.name] == 'Month'].drop(columns = month_ytd.name)\r\n_sales_actual = _sales[_sales[actual_vs_budget.name] == 'Actual'].drop(columns = actual_vs_budget.name)\r\n_sales_budget = _sales[_sales[actual_vs_budget.name] == 'Budget'].drop(columns = actual_vs_budget.name)\r\n\r\n_margin = ctr_gross_margin_ratio_bgt_vs_act.to_dataframe('valor').reset_index()\r\n_margin = _margin[_margin['valor'] != 0.]\r\n_margin = _margin[_margin[month_ytd.name] == 'Month'].drop(columns = month_ytd.name)\r\n_margin_ratio_actual = _margin[_margin[actual_vs_budget.name] == 'Actual'].drop(columns = actual_vs_budget.name)\r\n_margin_ratio_budget = _margin[_margin[actual_vs_budget.name] == 'Budget'].drop(columns = actual_vs_budget.name)\r\n\r\n_net_margin = ctr_net_margin_ratio_bgt_vs_act.to_dataframe('valor').reset_index()\r\n_net_margin = _net_margin[_net_margin['valor'] != 0.]\r\n_net_margin = _net_margin[_net_margin[month_ytd.name] == 'Month'].drop(columns = month_ytd.name)\r\n_net_margin_actual = _net_margin[_net_margin[actual_vs_budget.name] == 'Actual'].drop(columns = actual_vs_budget.name)\r\n_net_margin_budget = _net_margin[_net_margin[actual_vs_budget.name] == 'Budget'].drop(columns = actual_vs_budget.name)\r\n\r\n_x = np.char.replace(_sales_actual[actual_time.name].values.astype(str), \".\", \"-\")\r\n\r\n_trace1 = go.Bar(\r\n    x = _x,\r\n    y = _sales_actual['valor'],\r\n    name = 'Sales - Act (MM$)',\r\n    marker = dict(color = ctr_colors['Actual - Light']),\r\n    opacity = 0.8,\r\n    )\r\n\r\n_trace2 = go.Bar(\r\n    x = _x,\r\n    y = _sales_budget['valor'],\r\n    name = 'Sales - Bgt (MM$)',\r\n    marker = dict(color = ctr_colors['Budget - Light']),\r\n    opacity = 0.8,\r\n    )\r\n\r\n_trace3 = go.Scatter(\r\n    x = _x,\r\n    y = _margin_ratio_actual['valor'],\r\n    name = 'Gross Margin - Act',\r\n    yaxis = 'y2',\r\n    marker = dict(color = ctr_colors['Actual - Dark']),\r\n    )\r\n_trace4 = go.Scatter(\r\n    x = _x,\r\n    y = _margin_ratio_budget['valor'],\r\n    name = 'Gross Margin - Bgt',\r\n    yaxis = 'y2',\r\n    marker = dict(color = ctr_colors['Budget - Dark']),\r\n    )\r\n\r\n_trace5 = go.Scatter(\r\n    x = _x,\r\n    y = _net_margin_actual['valor'],\r\n    name = 'Net Profit Margin - Act',\r\n    yaxis = 'y2',\r\n    line = dict(dash = 'dash'),\r\n    marker = dict(color = ctr_colors['Actual - Dark']),\r\n    )\r\n_trace6 = go.Scatter(\r\n    x = _x,\r\n    y = _net_margin_budget['valor'],\r\n    name = 'Net Profit Margin - Bgt',\r\n    yaxis = 'y2',\r\n    line = dict(dash = 'dash'),\r\n    marker = dict(color = ctr_colors['Budget - Dark']),\r\n    )\r\n\r\n_data = [_trace1, _trace2, _trace3, _trace4, _trace5, _trace6]\r\n\r\n_layout = go.Layout(\r\n    paper_bgcolor = 'rgba(0,0,0,0)',\r\n    plot_bgcolor = 'rgba(0,0,0,0)',\r\n    legend = dict(orientation = 'h'),\r\n    xaxis = dict(\r\n        #title = 'Actual Time',\r\n        ticktext = _x,\r\n        tickvals = _x),\r\n    yaxis = dict(\r\n        title = 'Sales (MM$)',\r\n        tickformat = '$,',\r\n        showgrid = True\r\n    ),\r\n    yaxis2 = dict(\r\n        title = 'Margin Ratio',\r\n        tickformat = '%',\r\n        range = [0., 0.3],\r\n        overlaying = 'y',\r\n        side = 'right',\r\n    )\r\n    )\r\n\r\n_fig = go.Figure(_data, layout = _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_sales_margin_ratio_plot_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sales & Margin Ratio Plot - Budget vs. Actual", "units": null, "w": "184", "x": 718, "y": 415, "z": 1}, {"color": "#ffff4b", "definition": "result = {'Actual - Dark': '#4d94ff', 'Actual - Light': '#99c2ff', 'Budget - Dark': '#ff4d4d', 'Budget - Light': '#ff9999'}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_colors", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Colors", "units": null, "w": "184", "x": 718, "y": 373, "z": 1}, {"color": "#CCCCCC", "definition": "result = fin_balance_sheet_report", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a7cc5b47579514326b1fb85544245550f", "moduleId": "ctr_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_balance_sheet_report", "picture": null, "title": "Balance Sheet Report", "units": null, "w": "184", "x": 49, "y": 423, "z": 1}, {"color": "#4CBCFF", "definition": "_net_income = change_index(subscript(ctr_pl_bgt_vs_act, pl_concepts, 'Net Income'), actual_budget, actual_vs_budget)\n\nresult = xr.where(ctr_sales_bgt_vs_act == 0., 0., _net_income / ctr_sales_bgt_vs_act)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_net_margin_ratio_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Profit Margin Ratio - Budget vs. Actual", "units": null, "w": "184", "x": 497, "y": 415, "z": 1}, {"color": "#4CBCFF", "definition": "_ebitda = change_index(subscript(ctr_pl_bgt_vs_act, pl_concepts, 'EBITDA'), actual_budget, actual_vs_budget)\n\nresult = xr.where(ctr_sales_bgt_vs_act == 0., 0., _ebitda / ctr_sales_bgt_vs_act)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_ebitda_margin_ratio_bgt_vs_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "EBITDA Margin Ratio - Budget vs. Actual", "units": null, "w": "184", "x": 497, "y": 373, "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript(ctr_bs_report_base_scenario, balance_sheet_concepts, 'Total Equity')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_equity_bgt", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Equity - Budget", "units": null, "w": "184", "x": 273, "y": 464, "z": 1}, {"color": "#4CBCFF", "definition": "_net_income = change_index(subscript(ctr_pl_bgt_vs_act, pl_concepts, 'Net Income'), actual_budget, actual_vs_budget)\n_equity = change_index(ctr_equity_bgt_month_ytd, time, actual_time)\n\nresult = xr.where(_equity == 0., 0., _net_income / _equity)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_roi_bgt", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROI - Budget vs. Actual", "units": null, "w": "184", "x": 718, "y": 504, "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript(ctr_bs_report_base_scenario, balance_sheet_concepts, 'Total Assets')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_total_assets_bgt", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Assets - Budget", "units": null, "w": "184", "x": 273, "y": 549, "z": 1}, {"color": "#4CBCFF", "definition": "_net_income = change_index(subscript(ctr_pl_bgt_vs_act, pl_concepts, 'Net Income'), actual_budget, actual_vs_budget)\n_total_assets = change_index(ctr_total_assets_bgt_month_ytd, time, actual_time)\n\nresult = xr.where(_total_assets == 0., 0., _net_income / _total_assets)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_roa_bgt", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROA - Budget vs. Actual", "units": null, "w": "184", "x": 718, "y": 590, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(time_month == 1, ctr_equity_bgt, pp.dynamic(ctr_equity_bgt_acum, time, -1) + ctr_equity_bgt)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_equity_bgt_acum", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Equity - Budget Acum", "units": null, "w": "184", "x": 273, "y": 504, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(to_dataarray(month_ytd) == 'Month', ctr_equity_bgt, ctr_equity_bgt_acum / time_month)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_equity_bgt_month_ytd", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Equity - Budget Month / YTD", "units": null, "w": "184", "x": 497, "y": 504, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(time_month == 1, ctr_total_assets_bgt, pp.dynamic(ctr_total_assets_bgt_acum, time, -1) + ctr_total_assets_bgt)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_total_assets_bgt_acum", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Assets - Budget Acum", "units": null, "w": "184", "x": 273, "y": 590, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(to_dataarray(month_ytd) == 'Month', ctr_total_assets_bgt, ctr_total_assets_bgt_acum / time_month)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_total_assets_bgt_month_ytd", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Assets - Budget Month / YTD", "units": null, "w": "184", "x": 497, "y": 590, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Sales (MM$)', 'Gross Margin Ratio', 'EBITDA Margin Ratio', 'Net Profit Margin Ratio', 'ROI', 'ROA'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "financial_ratios", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Ratios", "units": null, "w": "96", "x": 54, "y": 240, "z": 1}, {"color": "#cccccc", "definition": "result = xr.concat([ctr_sales_bgt_vs_act, ctr_gross_margin_ratio_bgt_vs_act, ctr_ebitda_margin_ratio_bgt_vs_act, ctr_net_margin_ratio_bgt_vs_act, ctr_roi_bgt, ctr_roa_bgt], dim = financial_ratios)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_financial_ratios", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Ratios", "units": null, "w": "184", "x": 938, "y": 590, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(time_month == 1, ctr_cf_report_base_scenario, pp.dynamic(ctr_cash_flow_report_bgt_ytd, time, -1) + ctr_cf_report_base_scenario)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_report_bgt_ytd", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report - Budget YTD", "units": null, "w": "184", "x": 273, "y": 656, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where(time_month == 1, ctr_cash_flow_report_act, pp.dynamic(ctr_cash_flow_report_act_ytd, time, -1) + ctr_cash_flow_report_act)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_report_act_ytd", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report - Actual YTD", "units": null, "w": "184", "x": 273, "y": 738, "z": 1}, {"color": "#cccccc", "definition": "result = subscript(ctr_financial_ratios_lam_bgt_act_aux, [actual_vs_budget], ['Actual'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_financial_ratios_lam", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Ratios - Last Actual Month", "units": null, "w": "184", "x": 938, "y": 673, "z": 1}, {"color": "#4cbcff", "definition": "result = subscript(ctr_financial_ratios, [actual_time], [last_actual_month])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_financial_ratios_lam_bgt_act_aux", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Ratios - Last Actual Month - Budget vs. Actual Aux", "units": null, "w": "184", "x": 938, "y": 631, "z": 1}, {"color": "#cccccc", "definition": "_actual = subscript(ctr_financial_ratios_lam_bgt_act_aux, actual_vs_budget, 'Actual')\n_budget = subscript(ctr_financial_ratios_lam_bgt_act_aux, actual_vs_budget, 'Budget')\n_difference = _actual - _budget\n_difference_pc = xr.where(_budget == 0., 0., _difference / _budget)\n_perf = xr.where(_difference > 0., 1., xr.where(_difference < 0., -1, 0))\n\nresult = xr.concat([_actual, _budget, _difference, _difference_pc, _perf], dim = actual_budget_perf)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_financial_ratios_lam_bgt_act", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Financial Ratios - Last Actual Month - Budget vs. Actual", "units": null, "w": "184", "x": 1154, "y": 631, "z": 1}, {"color": "#cccccc", "definition": "_report = subscript(ctr_pl_bgt_vs_act, actual_time, last_actual_month)\n_difference = subscript(_report, actual_budget, 'Difference')\n_pl_cost_concepts = ['Supply Cost','Manpower Cost','Logistics Cost','Operating MP Cost','MSO Cost','Depreciation','Income Tax']\n\n_perf = xr.where(pl_concepts.str.find('-') == 0., 2, xr.where(pl_concepts.isin(_pl_cost_concepts), xr.where(_difference > 0., -1., xr.where(_difference < 0., 1., 0.)), xr.where(_difference > 0., 1., xr.where(_difference < 0., -1., 0.))))\n\nresult = change_index(_report, actual_budget, actual_budget_perf, defaultValue = _perf)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_bgt_vs_act_lam", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L - Budget vs. Actual - Last Actual Month", "units": null, "w": "184", "x": 273, "y": 290, "z": 1}, {"color": "#cccccc", "definition": "_report = subscript(ctr_cash_flow_bgt_vs_act, actual_time, last_actual_month)\n_difference = subscript(_report, actual_budget, 'Difference')\n\n_perf = xr.where(cash_flow_concepts.str.find('-') == 0., 2, xr.where(_difference > 0., 1., xr.where(_difference < 0., -1., 0.)))\n\nresult = change_index(_report, actual_budget, actual_budget_perf, defaultValue = _perf)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cash_flow_bgt_vs_act_lam", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow - Budget vs. Actual - Last Actual Month", "units": null, "w": "184", "x": 273, "y": 818, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Actual\",\"Budget\",\"Difference\",\"Act / Bgt\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_budget", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual vs. Budget", "units": null, "w": "100", "x": 152, "y": 239, "z": 1}, {"color": "#9999ff", "definition": "result = concat_index(actual_budget, \"Perf\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "actual_budget_perf", "moduleId": "ctr_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Actual vs. Budget (Perf)", "units": null, "w": "100", "x": 253, "y": 239, "z": 1}, {"color": "#6699ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_risk_mod", "moduleId": "machine_learning_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credit Risk", "units": null, "w": "184", "x": 328, "y": 91, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Credit Risk Analysis and Prediction", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "490", "identifier": "node1_copy_copy_copy", "moduleId": "credit_risk_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "554", "x": "30", "y": "39", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Data", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy", "moduleId": "credit_risk_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "46", "y": "77", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_exploration_analysis_mod", "moduleId": "credit_risk_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data Exploration and Analysis", "units": null, "w": "184", "x": "351", "y": "129", "z": 1}, {"color": "#CCCCCC", "definition": "\n# Exploring data\n_description = data.describe()\nprint(f\"Description:\\n {_description}\\n\")\n\n# Unique values for each field\n_unique_values = data.nunique()\nprint(f\"Unique values:\\n {_unique_values}\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_info", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data info", "units": null, "w": "184", "x": "71", "y": "153", "z": 1}, {"color": "#CCCCCC", "definition": "_fig = ff.create_distplot(\r\n    [bad_credits['Age'], good_credits['Age'], data['Age']],\r\n    ['Bad Credit','Good Credit','Overall'],\r\n    bin_size = [2, 2, 2],\r\n    show_rug = False,\r\n    colors = [bad_credits_color, good_credits_color, '#A4C2F4']\r\n)\r\n\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "age_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Age", "units": null, "w": "184", "x": "333", "y": "298", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Risk Distribution (Count)", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "260", "identifier": "node1_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "488", "x": "299", "y": "216", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Risk Distribution by Credit Amount", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "260", "identifier": "node1_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "488", "x": "299", "y": "488", "z": -1}, {"color": "#CCCCCC", "definition": "_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Housing'],\r\n            \"y\": good_credits['Credit amount'],\r\n            \"legendgroup\": 'Good Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Good Credit',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Housing'],\r\n            \"y\": bad_credits['Credit amount'],\r\n            \"legendgroup\": 'Bad Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bad Credit',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        \"legend\": {'orientation': 'h'}\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_housing_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Housing", "units": null, "w": "184", "x": "333", "y": "572", "z": 1}, {"color": "#4CBCFF", "definition": "# Slice dataframe\nresult = data[data[\"Risk\"] == 'good']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "good_credits", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Good Credits", "units": null, "w": "184", "x": "333", "y": "110", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Good / Bad Credits", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "238", "x": "299", "y": "77", "z": -1}, {"color": "#4CBCFF", "definition": "# Slice dataframe\nresult = data[data[\"Risk\"] == 'bad']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bad_credits", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Bad Credits", "units": null, "w": "184", "x": "333", "y": "153", "z": 1}, {"color": "#CCCCCC", "definition": "# Data aggregation\nresult = data[['Housing', 'Age', 'Age category', 'Sex', 'Job category', 'Purpose', 'Checking account', 'Risk', 'value']].groupby(by = ['Housing', 'Age', 'Age category', 'Sex', 'Job category', 'Purpose', 'Checking account', 'Risk']).agg('count')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "risk_distribution_count", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution (count)", "units": null, "w": "184", "x": "333", "y": "255", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Box(\r\n    x = good_credits[\"Sex\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Sex\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_sex_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Sex", "units": null, "w": "184", "x": "333", "y": "615", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Box(\n    y = good_credits['Credit amount'],\n    x = good_credits['Age category'],\n    name = 'Good credit',\n    marker = dict(color = good_credits_color)\n)\n\n_trace1 = go.Box(\n    y = bad_credits['Credit amount'],\n    x = bad_credits['Age category'],\n    name = 'Bad credit',\n    marker = dict(color = bad_credits_color)\n)\n    \n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    xaxis = dict(categoryorder = \"array\", categoryarray = ['Student', 'Young', 'Adult', 'Senior']),\n    boxmode = 'group',\n    legend = dict(orientation = 'h')\n)\n\n_fig = go.Figure(_data, layout = _layout)\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Age", "units": null, "w": "184", "x": "333", "y": "529", "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_job_categories = np.sort(data['Job category'].unique()).tolist()\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Job category\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits['Job category'],\r\n    y = bad_credits['Credit amount'],\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n    \r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_job_categories\r\n    ),\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_job_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Job", "units": null, "w": "184", "x": "333", "y": "658", "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_job_categories = np.sort(data['Job category'].unique()).tolist()\r\n\r\n_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Job category'],\r\n            \"y\": good_credits['Age'],\r\n            \"legendgroup\": 'Good Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Good Credit',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Job category'],\r\n            \"y\": bad_credits['Age'],\r\n            \"legendgroup\": 'Bad Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bad Credit',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"xaxis\": {\r\n            # Order X-axis alphabetically\r\n            \"categoryorder\": \"array\",\r\n            \"categoryarray\": _sorted_job_categories\r\n        },\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        \"legend\": {'orientation': 'h'},\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "age_job_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Age and Job", "units": null, "w": "184", "x": "333", "y": "341", "z": 1}, {"color": "#CCCCCC", "definition": "_bad = np.log(bad_credits['Credit amount'])\r\n_good = np.log(good_credits['Credit amount'])\r\n_hist_data = [_bad, _good]\r\n\r\n_group_labels = ['Bad credit', 'Good credit']\r\n\r\n_fig = ff.create_distplot(_hist_data, _group_labels, bin_size = [.2, .2], show_rug = False, colors = [bad_credits_color, good_credits_color])\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_risk_distribution_log_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount (log)", "units": null, "w": "184", "x": "333", "y": "701", "z": 1}, {"color": "#CCCCCC", "definition": "_hist_data = [bad_credits['Credit amount'], good_credits['Credit amount']]\r\n\r\n_group_labels = ['Bad credit', 'Good credit']\r\n\r\n_fig = ff.create_distplot(_hist_data, _group_labels, bin_size = [250, 250], show_rug = False, colors = [bad_credits_color, good_credits_color])\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount", "units": null, "w": "184", "x": "579", "y": "529", "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_saving_accounts_categories = ['little', 'moderate', 'quite rich', 'rich']\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Saving accounts\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Saving accounts\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_saving_accounts_categories\r\n    ),\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_savings_account_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Savings Account", "units": null, "w": "184", "x": 579, "y": 615, "z": 1}, {"color": "#CCCCCC", "definition": "# To sort x axis\r\n_sorted_saving_accounts_categories = ['little', 'moderate', 'quite rich', 'rich']\r\n\r\n_trace0 = go.Box(\r\n    x = good_credits[\"Saving accounts\"],\r\n    y = good_credits[\"Age\"],\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Saving accounts\"],\r\n    y = bad_credits[\"Age\"],\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    xaxis = dict(\r\n        # Order X-axis alphabetically\r\n        categoryorder = \"array\",\r\n        categoryarray = _sorted_saving_accounts_categories\r\n    ),\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "savings_account_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Age and Savings Account", "units": null, "w": "184", "x": "333", "y": "384", "z": 1}, {"color": "#CCCCCC", "definition": "_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Purpose'],\r\n            \"y\": good_credits['Age'],\r\n            \"legendgroup\": 'Good Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Good Credit',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Purpose'],\r\n            \"y\": bad_credits['Age'],\r\n            \"legendgroup\": 'Bad Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bad Credit',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": True\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        \"legend\": {'orientation': 'h'}\r\n    }\r\n}\r\n\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "purpose_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Age and Purpose", "units": null, "w": "184", "x": "333", "y": "428", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Box(\r\n    x = good_credits[\"Purpose\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Purpose\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_purpose_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Purpose", "units": null, "w": "184", "x": 579, "y": 658, "z": 1}, {"color": "#CCCCCC", "definition": "_fig = ff.create_distplot(\r\n    [bad_credits['Duration'], good_credits['Duration']],\r\n    ['Bad Credit','Good Credit'],\r\n    bin_size = [3, 1],\r\n    show_rug = False,\r\n    colors = [bad_credits_color, good_credits_color]\r\n)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "duration_risk_distribution_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Loan Duration", "units": null, "w": "184", "x": "579", "y": "255", "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Box(\r\n    x = good_credits[\"Checking account\"],\r\n    y = good_credits[\"Credit amount\"],\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Box(\r\n    x = bad_credits[\"Checking account\"],\r\n    y = bad_credits[\"Credit amount\"],\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_layout = go.Layout(\r\n    boxmode = 'group',\r\n    legend = dict(orientation = 'h')\r\n)\r\n\r\n_fig = go.Figure(_data, _layout)\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_distribution_by_checking_account_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Checking Account", "units": null, "w": "184", "x": 579, "y": 703, "z": 1}, {"color": "#CCCCCC", "definition": "_fig = {\r\n    \"data\": [\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": good_credits['Checking account'],\r\n            \"y\": good_credits['Age'],\r\n            \"legendgroup\": 'Good Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Good Credit',\r\n            \"side\": 'negative',\r\n            \"box\": {\r\n                \"visible\": False\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": good_credits_color\r\n            }\r\n        },\r\n        {\r\n            \"type\": 'violin',\r\n            \"x\": bad_credits['Checking account'],\r\n            \"y\": bad_credits['Age'],\r\n            \"legendgroup\": 'Bad Credit',\r\n            \"scalegroup\": 'No',\r\n            \"name\": 'Bad Credit',\r\n            \"side\": 'positive',\r\n            \"box\": {\r\n                \"visible\": False\r\n            },\r\n            \"meanline\": {\r\n                \"visible\": True\r\n            },\r\n            \"line\": {\r\n                \"color\": bad_credits_color\r\n            }\r\n        }\r\n    ],\r\n    \"layout\" : {\r\n        \"yaxis\": {\r\n            \"zeroline\": False,\r\n        },\r\n        \"violingap\": 0,\r\n        \"violinmode\": \"overlay\",\r\n        \"legend\": {'orientation': 'h'}\r\n    }\r\n}\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "checking_account_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Checking Account", "units": null, "w": "184", "x": 579, "y": 341, "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Scatter(\r\n    x = good_credits[\"Credit amount\"],\r\n    y = good_credits[\"Duration\"],\r\n    mode = 'markers',\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Scatter(\r\n    x = bad_credits[\"Credit amount\"],\r\n    y = bad_credits[\"Duration\"],\r\n    mode = 'markers',\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_fig = go.Figure(_data)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_by_duration_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Duration", "units": null, "w": "184", "x": 579, "y": 428, "z": 1}, {"color": "#CCCCCC", "definition": "_trace0 = go.Scatter(\r\n    x = good_credits[\"Credit amount\"],\r\n    y = good_credits[\"Age\"],\r\n    mode = 'markers',\r\n    name = 'Good credit',\r\n    marker = dict(color = good_credits_color)\r\n)\r\n\r\n_trace1 = go.Scatter(\r\n    x = bad_credits[\"Credit amount\"],\r\n    y = bad_credits[\"Age\"],\r\n    mode = 'markers',\r\n    name = 'Bad credit',\r\n    marker = dict(color = bad_credits_color)\r\n)\r\n\r\n_data = [_trace0, _trace1]\r\n\r\n_fig = go.Figure(_data)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_by_age_plotly", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount and Age", "units": null, "w": "184", "x": 579, "y": 384, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Data Exploration and Analysis", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "724", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "772", "x": "30", "y": "39", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8ae54b33b3314147bd6f491e12db9a2f", "moduleId": "data_exploration_analysis_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "data", "picture": null, "title": "Data (with new columns and loans)", "units": null, "w": "184", "x": "71", "y": "110", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Correlations", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "238", "x": "550", "y": "77", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Data", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_exploration_analysis_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "238", "x": "46", "y": "77", "z": -1}, {"color": "#FFFF4B", "definition": "# Hex color. Impacts on plotly graphics\nresult = '#93C47D'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "good_credits_color", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Good Credits Color", "units": null, "w": "184", "x": "71", "y": "255", "z": 1}, {"color": "#FFFF4B", "definition": "# Hex color. Impacts on plotly graphics\nresult = '#EA9999'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bad_credits_color", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Bad Credits Color", "units": null, "w": "184", "x": "71", "y": "298", "z": 1}, {"color": "#4CBCFF", "definition": "result = normalized_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae9b0ea43baca4608b1381fd51a02e56e", "moduleId": "data_exploration_analysis_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "normalized_data", "picture": null, "title": "Normalized Data", "units": null, "w": "184", "x": "579", "y": "110", "z": 1}, {"color": "#CCCCCC", "definition": "# Get correlation\r\n_correlation = normalized_data.corr()\r\n# Get columns\r\n_cols = _correlation.columns.tolist()\r\n#convert to array\r\n_correlation_array  = np.array(_correlation)\r\n\r\n# Plot correlations\r\n_trace = go.Heatmap(z = _correlation_array,\r\n                   x = _cols,\r\n                   y = _cols,\r\n                   colorscale = 'YlOrRd',\r\n                   colorbar   = dict(title = 'Pearson Correlation coefficient',\r\n                                     titleside = 'right'\r\n                                    ) ,\r\n                  )\r\n\r\n_layout = go.Layout(dict(autosize = False,\r\n                        yaxis   = dict(tickfont = dict(size = 9)),\r\n                        xaxis   = dict(tickfont = dict(size = 9))\r\n                       )\r\n                  )\r\n_data = [_trace]\r\n_fig = go.Figure(_data, layout = _layout)\r\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.1, 0.95]})\r\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.1, 0.95]})\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "correlations", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Correlations", "units": null, "w": "184", "x": "579", "y": "153", "z": 1}, {"color": "#CCCCCC", "definition": "_hist_data = [bad_credits['Credit amount'], good_credits['Credit amount']]\r\n\r\n_group_labels = ['Bad credit', 'Good credit']\r\n\r\n_fig = ff.create_distplot(_hist_data, _group_labels, bin_size = [250, 250], show_rug = False, colors = [bad_credits_color, good_credits_color])\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_risk_distribution_plotly_1", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Credit Amount", "units": null, "w": "184", "x": 579, "y": 572, "z": 1}, {"color": "#CCCCCC", "definition": "_fig = ff.create_distplot(\r\n    [bad_credits['Duration'], good_credits['Duration']],\r\n    ['Bad Credit','Good Credit'],\r\n    bin_size = [3, 1],\r\n    show_rug = False,\r\n    colors = [bad_credits_color, good_credits_color]\r\n)\r\n_fig['layout'].update(legend = dict(orientation = 'h'))\r\n\r\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "duration_risk_distribution_plotly_1", "moduleId": "data_exploration_analysis_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk Distribution by Loan Duration", "units": null, "w": "184", "x": 579, "y": 298, "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Data Exploration and Analysis", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "316", "y": "77", "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Machine Learning - Training and Test", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "46", "y": "217", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_training_and_test_mod", "moduleId": "credit_risk_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning - Training and Test", "units": null, "w": "184", "x": "79", "y": "274", "z": 1}, {"color": "#4CBCFF", "definition": "# Split data. Keeps all columns but 'Risk_bad' (target)\nresult = normalized_data.drop('Risk_bad', 1).values", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "x_variable", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "X Variable", "units": null, "w": "184", "x": "349", "y": "114", "z": 1}, {"color": "#4CBCFF", "definition": "# Split data. Keeps 'Risk_bad' column (target)\nresult = normalized_data['Risk_bad'].values", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "y_variable", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Y Variable", "units": null, "w": "184", "x": "349", "y": "158", "z": 1}, {"color": "#4CBCFF", "definition": "from sklearn.model_selection import train_test_split\n\n# Convert test size to float\n_test_size = test_size_input.values.tolist()[0]\n\n# Split X and Y into train and test version\n_x_train, _x_test, _y_train, _y_test = train_test_split(x_variable, y_variable, test_size = _test_size, random_state = fixed_random_state)\n\n# Create dictionary with the four tables\nresult = {'x_train': _x_train, 'x_test': _x_test, 'y_train': _y_train, 'y_test': _y_test}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "train_test_array", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Train / Test Array", "units": null, "w": "184", "x": "566", "y": "158", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'x_train' key\n#result = train_test_array['x_train']\nresult = train_arrays_smote['os_smote_x']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "x_train", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "X Train", "units": null, "w": "184", "x": "566", "y": "199", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'y_train' key\n#result = train_test_array['y_train']\nresult = train_arrays_smote['os_smote_y']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "y_train", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Y Train", "units": null, "w": "184", "x": "566", "y": "240", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Machine Learning - Training and Test", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "560", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1026", "x": 30, "y": 39, "z": -1}, {"color": "#cccccc", "definition": "result = 0", "description": "Normalized Data", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "298", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "254", "x": "46", "y": "77", "z": -1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING MODELS\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Drop columns that will not be used\n_data = data.copy().drop(columns = ['value', 'Job category'])\n\n# Create dummies for each categorical column\nfor i in categorical_columns:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = (True if i != 'Risk' else False), prefix = i), left_index = True, right_index = True)\n\n# Drop original categorical columns from dataframe and Risk_good dummy (Risk_bad is the only needed)\n_data = _data.drop(columns = categorical_columns)\n_data = _data.drop(columns = 'Risk_good')\n_final_columns = _data.columns.values\n\n# Normalize numerical columns (returns numpy array)\n_scaler = MinMaxScaler(feature_range = (0,1)).fit(_data)\n_data_normalized = _scaler.transform(_data)\n\n# Create dataframe from numpy array\nresult = pd.DataFrame(_data_normalized, columns = _final_columns)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_data", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized Data", "units": null, "w": "184", "x": "80", "y": "158", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'x_test' key\nresult = train_test_array['x_test']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "x_test", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "X Test", "units": null, "w": "184", "x": "566", "y": "282", "z": 1}, {"color": "#4CBCFF", "definition": "# Get values of the 'y_test' key\nresult = train_test_array['y_test']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "y_test", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Y Test", "units": null, "w": "184", "x": "566", "y": "324", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "X and Y Training and Test Datasets", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "298", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "727", "x": 313, "y": 77, "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "random_forest_method_mod", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Random Forest Method", "units": null, "w": "184", "x": 565, "y": 426, "z": 1}, {"color": "#CB98FF", "definition": "from sklearn.ensemble import RandomForestClassifier\r\n\r\n# Create classifier\r\n_model = RandomForestClassifier(n_estimators = parameters_rfm['n_estimators'], max_features = parameters_rfm['max_features'], max_depth = parameters_rfm['max_depth'], random_state = fixed_random_state)\r\n\r\n# Fit model\r\nresult = _model.fit(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "random_forest_method", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Random Forest Method", "units": null, "w": "184", "x": 83, "y": 494, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import accuracy_score\n\nresult = accuracy_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 579, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import classification_report\n\nresult = classification_report(y_test, model_prediction_rfm, target_names = ['good', 'bad'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "classification_report_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Classification Report - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 704, "z": 1}, {"color": "#CCCCCC", "definition": "result = 0", "description": "Random Forest Method", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "704", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "686", "x": 47, "y": 65, "z": -1}, {"color": "#4CBCFF", "definition": "result = random_forest_method.predict(x_test)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "model_prediction_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Model Prediction - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 538, "z": 1}, {"color": "#CCCCCC", "definition": "result = random_forest_method.score(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Score - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 620, "z": 1}, {"color": "#CCCCCC", "definition": "_columns = normalized_data.columns[normalized_data.columns != 'Risk_bad']\n_importances = random_forest_method.feature_importances_\n\n# Create indexed dataframe with features and their importances\n_df = pd.DataFrame({'feature': _columns, 'importance': _importances})\n\n# Sort dataframe by feature importance\n_df = _df.sort_values(by = 'importance', ascending = False)\n_df['Rank'] = _df['importance'].rank(ascending = False).astype(int).astype(str)\n_df['Rank'] = _df['Rank'].apply(lambda x: '0' + x if len(x) == 1 else x)\n_df['feature'] = _df['Rank'] + '. ' + _df['feature']\n_df = _df.drop(columns = 'Rank').set_index('feature')\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "feature_importance_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Feature Importance - Random Forest Method", "units": null, "w": "184", "x": 299, "y": 704, "z": 1}, {"color": "#4CBCFF", "definition": "result = random_forest_method.predict_proba(x_test)[:,1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "probability_prediction_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probability Prediction - Random Forest Method", "units": null, "w": "184", "x": 299, "y": 494, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve\n\n_fpr, _tpr, thresholds = roc_curve(y_test, probability_prediction_rfm)\n\n_trace0 = go.Scatter(\n    x = [0, 1],\n    y = [0, 1],\n    name = 'Random'\n    )\n_trace1 = go.Scatter(\n    x = _fpr,\n    y = _tpr,\n    name = 'ROC Curve'\n    )\n\n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    yaxis = dict(title = 'True Positive Rate'),\n    xaxis = dict(title = 'False Positive Rate'),\n    )\n\n_fig = go.Figure(_data, _layout)\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.05, 0.95]})\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.05, 0.95]})\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_curve_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROC Curve - Random Forest Method", "units": null, "w": "184", "x": 299, "y": 538, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import precision_score\n\nresult = precision_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precision_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precision Score - Random Forest Method", "units": null, "w": "184", "x": 299, "y": 579, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import recall_score\n\nresult = recall_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "recall_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Recall - Random Forest Method", "units": null, "w": "184", "x": 299, "y": 620, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import f1_score\n\nresult = f1_score(y_test, model_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "f1_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "F1 Score - Random Forest Method", "units": null, "w": "184", "x": 299, "y": 662, "z": 1}, {"color": "#4CBCFF", "definition": "# Transform parameters input into dictionary\n_da = xr.where(grid_search_cv_params_grid_rfm == 'None', None, xr.where(grid_search_cv_params_grid_rfm == '', np.nan, grid_search_cv_params_grid_rfm))\n\n_list = []\n_params_dict = {}\n\nfor param in rf_parameters:\n    _param = subscript(_da, rf_parameters, param)\n    _has_none = (_param == None).sum().values.tolist()\n    _list = _param.dropna(ten_lines.name).values.astype(int).tolist()\n    if _has_none > 0:\n        _list.append(None)\n    _params_dict[param] = _list\n\n# Import libraries\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create default model\n_model = RandomForestClassifier(random_state = fixed_random_state)\n\n# Grid search\n_grid_search = GridSearchCV(estimator = _model, cv = 5, param_grid = _params_dict, scoring = metrics_switcher[metric_for_feature_engineering])\n_grid_search.fit(x_train, y_train)\n\nresult = _grid_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 351, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Model and Metrics", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "342", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "658", "x": 60, "y": 414, "z": -1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Hyperparameter Tuning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "304", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "random_forest_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "657", "x": 60, "y": 100, "z": -1}, {"color": "#CB98FF", "definition": "_best_params_dict = grid_search_cv_rfm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'rf_parameters': _keys}, dims = ('rf_parameters',))\n\nresult = set_domain(_da, {'rf_parameters': rf_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_params_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV Best Parameters - RFM", "units": null, "w": "184", "x": 299, "y": 310, "z": 1}, {"color": "#CB98FF", "definition": "_best_params_dict = randomized_search_cv_rfm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'rf_parameters': _keys}, dims = ('rf_parameters',))\n\nresult = set_domain(_da, {'rf_parameters': rf_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_params_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV Best Parameters - RFM", "units": null, "w": "184", "x": 299, "y": 228, "z": 1}, {"color": "#CB98FF", "definition": "result = grid_search_cv_rfm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV Best Score - RFM", "units": null, "w": "184", "x": 299, "y": 351, "z": 1}, {"color": "#CB98FF", "definition": "result = randomized_search_cv_rfm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_score_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV Best Score - RFM", "units": null, "w": "184", "x": 299, "y": 269, "z": 1}, {"color": "#FFFF4B", "definition": "result = {'max_depth': 7, 'max_features': None, 'n_estimators': 80}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parameters_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Random Forest Parameters", "units": null, "w": "184", "x": 83, "y": 451, "z": 1}, {"color": "#CBCBCB", "definition": "parameters_rfm.node.definition = 'result = ' + str(grid_search_cv_rfm.best_params_ )\n\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "paste_grid_search_cv_best_params_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Paste Grid Search CV Best Parameters - RFM", "units": null, "w": "154", "x": 506, "y": 326, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['80','90','95','98','100','120','','','',''], ['14','16','18','19','20','21','23','None','',''], ['5','7','11','15','20','25','None','','','']],[rf_parameters, ten_lines]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_params_grid_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV Parameters Grid - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 310, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node1_copy", "moduleId": "data_mod_copy", "nodeClass": "cube", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 776, "y": 181, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node1", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 974, "y": 169, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node2_copy", "moduleId": "data_mod_copy", "nodeClass": "cube", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 713, "y": 181, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node2", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1039, "y": 210, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node7_copy", "moduleId": "cdm_regressions_mod", "nodeClass": "cube", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1095, "y": 482, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node7", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1031, "y": 251, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node8", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1126, "y": 251, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node9", "moduleId": "random_forest_method_mod", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 1183, "y": 251, "z": 1}, {"color": "#4CBCFF", "definition": "# Import uniform for C parameter\nfrom scipy.stats import randint as sp_randint\n\n_params_dict = {\n    'n_estimators': sp_randint(5, 125),\n    'max_features': sp_randint(1, 26),\n    'max_depth': [3, 6, 9, 12, 15, 18, None]\n}\n\n# Import libraries\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create default model\n_model = RandomForestClassifier(random_state = fixed_random_state)\n\n# Random search\n_random_search = RandomizedSearchCV(estimator = _model, param_distributions = _params_dict, n_iter = 100, cv = 3, verbose = 2, random_state = fixed_random_state, n_jobs = -1, scoring = metrics_switcher[metric_for_feature_engineering])\n_random_search.fit(x_train, y_train)\n\nresult = _random_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 269, "z": 1}, {"color": "#4CFFA6", "definition": "result = metric_for_feature_engineering", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a75888c3c23044c5fa4441d72b6987250", "moduleId": "random_forest_method_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "metric_for_feature_engineering", "picture": null, "title": "Metric for Hyperparamter Tuning", "units": null, "w": "380", "x": 88, "y": 129, "z": 1}, {"color": "#4CBCFF", "definition": "result = metrics_switcher", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8f5eeaba164d42da9a9e7d4a2f86b5e2", "moduleId": "random_forest_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "metrics_switcher", "picture": null, "title": "Metrics Switcher", "units": null, "w": "184", "x": 83, "y": 178, "z": 1}, {"color": "#CCCCCC", "definition": "_values = list(parameters_rfm.values())\n_keys = list(parameters_rfm.keys())\n_da = xr.DataArray(_values, coords = {'rf_parameters': _keys}, dims = ('rf_parameters',))\n\nresult = set_domain(_da, {'rf_parameters': rf_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "current_parameters_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Current Parameters - RFM", "units": null, "w": "184", "x": 299, "y": 451, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import roc_auc_score\n\nresult = roc_auc_score(y_test, probability_prediction_rfm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_auc_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROC AUC - Random Forest Method", "units": null, "w": "184", "x": 510, "y": 538, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import confusion_matrix\n\n_cm = confusion_matrix(y_test, model_prediction_rfm)\n\n# Create DataArray from confusion matrix, replacing 0 and 1 index by 'Good' and 'Bad'\nresult = xr.DataArray(_cm, coords = {'Actual': ['Actual - Good', 'Actual - Bad'], 'Predicted': ['Predicted - Good', 'Predicted - Bad']}, dims = ['Actual', 'Predicted'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "confusion_matrix_rfm", "moduleId": "random_forest_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Confusion Matrix - Random Forest Method", "units": null, "w": "184", "x": 83, "y": 662, "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Machine Learning Methods", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "193", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "727", "x": 313, "y": 388, "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "logistic_regression_method_mod", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Logistic Regression Method", "units": null, "w": "184", "x": 565, "y": 476, "z": 1}, {"color": "#CB98FF", "definition": "from sklearn.linear_model import LogisticRegression\r\n\r\n# Create model\r\n_model = LogisticRegression(random_state = fixed_random_state, solver = 'liblinear', penalty = parameters_lrm['penalty'], C = parameters_lrm['C'])\r\n\r\n# Fit model\r\nresult = _model.fit(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "logistic_regression_method", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 499, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import accuracy_score\n\nresult = accuracy_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 585, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import confusion_matrix\n\n_cm = confusion_matrix(y_test, model_prediction_lrm)\n\n# Create DataArray from confusion matrix, replacing 0 and 1 index by 'Good' and 'Bad'\nresult = xr.DataArray(_cm, coords = {'Actual': ['Actual - Good', 'Actual - Bad'], 'Predicted': ['Predicted - Good', 'Predicted - Bad']}, dims = ['Actual', 'Predicted'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "confusion_matrix_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Confusion Matrix - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 668, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import classification_report\n\nresult = classification_report(y_test, model_prediction_lrm, target_names = ['good', 'bad'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "classification_report_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Classification Report - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 709, "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method.predict_proba(x_test)[:,1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "probability_prediction_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probability Prediction - Logistic Regression Method", "units": null, "w": "184", "x": 299, "y": 541, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve\n\n_fpr, _tpr, thresholds = roc_curve(y_test, probability_prediction_lrm)\n\n_trace0 = go.Scatter(\n    x = [0, 1],\n    y = [0, 1],\n    name = 'Random'\n    )\n_trace1 = go.Scatter(\n    x = _fpr,\n    y = _tpr,\n    name = 'ROC Curve'\n    )\n\n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    yaxis = dict(title = 'True Positive Rate'),\n    xaxis = dict(title = 'False Positive Rate'),\n    )\n\n_fig = go.Figure(_data, _layout)\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.05, 0.95]})\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.05, 0.95]})\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_curve_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROC Curve - Logistic Regression Method", "units": null, "w": "184", "x": 299, "y": 585, "z": 1}, {"color": "#CCCCCC", "definition": "result = logistic_regression_method.score(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Score - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 626, "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method.predict(x_test)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "model_prediction_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Model Prediction - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 541, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import precision_score\n\nresult = precision_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precision_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precision Score - Logistic Regression Method", "units": null, "w": "184", "x": 299, "y": 626, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import recall_score\n\nresult = recall_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "recall_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Recall - Logistic Regression Method", "units": null, "w": "184", "x": 299, "y": 668, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Model and Metrics", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "343", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "655", "x": 60, "y": 419, "z": -1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import f1_score\n\nresult = f1_score(y_test, model_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "f1_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "F1 Score - Logistic Regression Method", "units": null, "w": "184", "x": 299, "y": 709, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Hyperparameter Tuning", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "304", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "655", "x": 60, "y": 106, "z": -1}, {"color": "#CCCCCC", "definition": "result = 0", "description": "Logistic Regression Method", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "707", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "683", "x": 47, "y": 69, "z": "-2"}, {"color": "#4CFFA6", "definition": "result = metric_for_feature_engineering", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a75888c3c23044c5fa4441d72b6987250_copy_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "metric_for_feature_engineering", "picture": null, "title": "Metric for Hyperparamter Tuning", "units": null, "w": "365", "x": 87, "y": 136, "z": 1}, {"color": "#4CBCFF", "definition": "result = metrics_switcher", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8f5eeaba164d42da9a9e7d4a2f86b5e2_copy", "moduleId": "logistic_regression_method_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "metrics_switcher", "picture": null, "title": "Metrics Switcher", "units": null, "w": "184", "x": 83, "y": 184, "z": 1}, {"color": "#4CBCFF", "definition": "# Import uniform for C parameter\nfrom scipy.stats import uniform\n_params_dict = {'penalty': ['l1', 'l2'], 'C': uniform(loc = 0, scale = 15)}\n\n\n# Import libraries\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\n# Create default model\n_model = LogisticRegression(random_state = fixed_random_state, solver = 'liblinear')\n\n# Random search\n_random_search = RandomizedSearchCV(estimator = _model, param_distributions = _params_dict, n_iter = 100, cv = 3, verbose = 2, random_state = fixed_random_state, n_jobs = -1, scoring = metrics_switcher[metric_for_feature_engineering])\n_random_search.fit(x_train, y_train)\n\nresult = _random_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 275, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['l1','l2','','','','','','','',''], ['0.01','0.025','0.1','0.5','0.75','1','2','3','5','10']],[lr_parameters, ten_lines]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_params_grid_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV Parameters Grid - LRM", "units": null, "w": "184", "x": 83, "y": 316, "z": 1}, {"color": "#4CBCFF", "definition": "# Transform parameters input into dictionary\n_da = xr.where(grid_search_cv_params_grid_lrm == '', np.nan, grid_search_cv_params_grid_lrm)\n\n_list = []\n_params_dict = {}\n\nfor param in lr_parameters:\n    _param = subscript(_da, lr_parameters, param).dropna(ten_lines.name).values\n    _list = _param.astype(float).tolist() if param == 'C' else _param.tolist()\n    _params_dict[param] = _list\n\n# Import libraries\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\n# Create default model\n_model = LogisticRegression(random_state = fixed_random_state, solver = 'liblinear')\n\n# Grid search\n_grid_search = GridSearchCV(estimator = _model, cv = 5, param_grid = _params_dict, scoring = metrics_switcher[metric_for_feature_engineering])\n_grid_search.fit(x_train, y_train)\n\nresult = _grid_search", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV - Logistic Regression Method", "units": null, "w": "184", "x": 83, "y": 357, "z": 1}, {"color": "#CB98FF", "definition": "_best_params_dict = randomized_search_cv_lrm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'lr_parameters': _keys}, dims = ('lr_parameters',))\n\nresult = set_domain(_da, {'lr_parameters': lr_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_params_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV Best Parameters - LRM", "units": null, "w": "184", "x": 299, "y": 234, "z": 1}, {"color": "#CB98FF", "definition": "result = randomized_search_cv_lrm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "randomized_search_cv_best_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Randomized Search CV Best Score - LRM", "units": null, "w": "184", "x": 299, "y": 275, "z": 1}, {"color": "#CB98FF", "definition": "_best_params_dict = grid_search_cv_lrm.best_params_\n_values = list(_best_params_dict.values())\n_keys = list(_best_params_dict.keys())\n_da = xr.DataArray(_values, coords = {'lr_parameters': _keys}, dims = ('lr_parameters',))\n\nresult = set_domain(_da, {'lr_parameters': lr_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_params_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV Best Parameters - LRM", "units": null, "w": "184", "x": 299, "y": 316, "z": 1}, {"color": "#CB98FF", "definition": "result = grid_search_cv_lrm.best_score_ ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "grid_search_cv_best_score_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Grid Search CV Best Score - LRM", "units": null, "w": "184", "x": 299, "y": 357, "z": 1}, {"color": "#CBCBCB", "definition": "parameters_lrm.node.definition = 'result = ' + str(grid_search_cv_lrm.best_params_ )\n\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "paste_grid_search_cv_best_params_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Paste Grid Search CV Best Parameters - LRM", "units": null, "w": "154", "x": 506, "y": 332, "z": 1}, {"color": "#FFFF4B", "definition": "result = {'C': 0.1, 'penalty': 'l1'}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parameters_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Logistic Regression Parameters", "units": null, "w": "184", "x": 83, "y": 457, "z": 1}, {"color": "#CCCCCC", "definition": "_values = list(parameters_lrm.values())\n_keys = list(parameters_lrm.keys())\n_da = xr.DataArray(_values, coords = {'lr_parameters': _keys}, dims = ('lr_parameters',))\n\nresult = set_domain(_da, {'lr_parameters': lr_parameters})", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "current_parameters_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Current Parameters - LRM", "units": null, "w": "184", "x": 299, "y": 457, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import roc_auc_score\n\nresult = roc_auc_score(y_test, probability_prediction_lrm)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_auc_lrm", "moduleId": "logistic_regression_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROC AUC - Logistic Regression Method", "units": null, "w": "184", "x": 510, "y": 585, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "gaussian_naive_bayes_method_mod", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gaussian Naive Bayes Method", "units": null, "w": "184", "x": 565, "y": 526, "z": 1}, {"color": "#CB98FF", "definition": "from sklearn.naive_bayes import GaussianNB\r\n\r\n# Create classifier\r\n_model = GaussianNB()\r\n\r\n# Fit model\r\nresult = _model.fit(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "gaussian_naive_bayes_method", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Gaussian Naive Bayes Method", "units": null, "w": "184", "x": 67, "y": 101, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Gaussian Naive Bayes Method", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "295", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "660", "x": 47, "y": 65, "z": -1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method.predict(x_test)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "model_prediction_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Model Prediction - Gaussian NB Method", "units": null, "w": "184", "x": 67, "y": 144, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import accuracy_score\n\nresult = accuracy_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy - Gaussian NB Method", "units": null, "w": "184", "x": 67, "y": 188, "z": 1}, {"color": "#CCCCCC", "definition": "result = gaussian_naive_bayes_method.score(x_train, y_train)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Score - Gaussian NB Method", "units": null, "w": "184", "x": 67, "y": 229, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import confusion_matrix\n\n_cm = confusion_matrix(y_test, model_prediction_gnb)\n\n# Create DataArray from confusion matrix, replacing 0 and 1 index by 'Good' and 'Bad'\nresult = xr.DataArray(_cm, coords = {'Actual': ['Actual - Good', 'Actual - Bad'], 'Predicted': ['Predicted - Good', 'Predicted - Bad']}, dims = ['Actual', 'Predicted'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "confusion_matrix_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Confusion Matrix - Gaussian NB Method", "units": null, "w": "184", "x": 67, "y": 271, "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method.predict_proba(x_test)[:,1]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "probability_prediction_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probability Prediction - Gaussian NB Method", "units": null, "w": "184", "x": 281, "y": 144, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve\n\n_fpr, _tpr, thresholds = roc_curve(y_test, probability_prediction_gnb)\n\n_trace0 = go.Scatter(\n    x = [0, 1],\n    y = [0, 1],\n    name = 'Random'\n    )\n_trace1 = go.Scatter(\n    x = _fpr,\n    y = _tpr,\n    name = 'ROC Curve'\n    )\n\n_data = [_trace0, _trace1]\n\n_layout = go.Layout(\n    yaxis = dict(title = 'True Positive Rate'),\n    xaxis = dict(title = 'False Positive Rate'),\n    )\n\n_fig = go.Figure(_data, _layout)\n_fig.layout.xaxis.update({'anchor': 'x', 'domain': [.05, 0.95]})\n_fig.layout.yaxis.update({'anchor': 'y', 'domain': [.05, 0.95]})\n\nresult = plot(_fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_curve_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROC Curve - Gaussian NB Method", "units": null, "w": "184", "x": 281, "y": 188, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import precision_score\n\nresult = precision_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precision_score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precision Score - Gaussian NB Method", "units": null, "w": "184", "x": 281, "y": 229, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import recall_score\n\nresult = recall_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "recall_score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Recall - Gaussian NB Method", "units": null, "w": "184", "x": 281, "y": 271, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import classification_report\n\nresult = classification_report(y_test, model_prediction_gnb, target_names = ['good', 'bad'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "classification_report_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Classification Report - Gaussian NB Method", "units": null, "w": "184", "x": 67, "y": 312, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import f1_score\n\nresult = f1_score(y_test, model_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "f1_score_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "F1 Score - Logistic Regression Method", "units": null, "w": "184", "x": 281, "y": 312, "z": 1}, {"color": "#CCCCCC", "definition": "from sklearn.metrics import roc_auc_score\n\nresult = roc_auc_score(y_test, probability_prediction_gnb)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "roc_auc_gnb", "moduleId": "gaussian_naive_bayes_method_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROC AUC - Gaussian NB Method", "units": null, "w": "184", "x": 496, "y": 188, "z": 1}, {"color": "#CCCCCC", "definition": "# Sets of metrics by Machine Learning method\n_rf = [accuracy_rfm, precision_score_rfm, recall_score_rfm, f1_score_rfm, score_rfm]\n_lr = [accuracy_lrm, precision_score_lrm, recall_score_lrm, f1_score_lrm, score_lrm]\n_gnb = [accuracy_gnb, precision_score_gnb, recall_score_gnb, f1_score_gnb, score_gnb]\n\n# Create DataArray indexed by Machine Learning method and Metric\nresult = xr.DataArray([_rf, _lr, _gnb], [machine_learning_methods, metrics])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "metrics_by_ml_method", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Metrics by Machine Learning Method", "units": null, "w": "184", "x": 813, "y": 476, "z": 1}, {"color": "#4CBCFF", "definition": "result = data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a1ae6cce61cc24c92b948f577d079a754", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "data", "picture": null, "title": "Data (with new columns and loans)", "units": null, "w": "184", "x": "80", "y": "114", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([0.20], [one_element])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "test_size_input", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Test Size", "units": null, "w": "184", "x": "566", "y": "114", "z": 1}, {"color": "#4CBCFF", "definition": "from imblearn.over_sampling import SMOTE\n\n# Create instance\n_os = SMOTE(random_state = fixed_random_state)\n\n# Fit\n_os_smote_x, _os_smote_y = _os.fit_sample(train_test_array['x_train'], train_test_array['y_train'])\n\n# Create dictionary with the two tables\nresult = {'os_smote_x': _os_smote_x, 'os_smote_y': _os_smote_y}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "train_arrays_smote", "moduleId": "machine_learning_training_and_test_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Train Array Synthetic Minority Oversampling TEchnique (SMOTE)", "units": null, "w": "184", "x": 349, "y": 202, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "predictions_mod", "moduleId": "credit_risk_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Predictions", "units": null, "w": "184", "x": "351", "y": "274", "z": 1}, {"color": "#4CBCFF", "definition": "# Numpy array with new loans\n_complete_loans = complete_new_loans.values\n\n# Keep complete loans only from New Loans dataframe\n_df = new_loans.to_dataframe('values').reset_index()\n_filter = _df[new_loans_index.name].isin(_complete_loans)\n_df = _df[_filter]\n\n# Checks if there is any complete loan\nif len(_complete_loans) != 0:\n    # Move loan_parameters column to several columns (spreadsheet-style pivot table)\n    _df = _df.pivot(index = 'new_loans_index', columns = 'loan_parameters', values = 'values')\n    # Convert numerical attributes to int (originally stored as strings)\n    _df['Age'] = _df['Age'].astype(int)\n    _df['Credit amount'] = _df['Credit amount'].astype(int)\n    _df['Duration'] = _df['Duration (months)'].astype(int)\n    # Drop Duration (months) column (it is not a original column)\n    _df = _df.drop(columns = 'Duration (months)')\n    \n    # Create Age category column\n    _age_interval = (17, 25, 35, 60, 120)\n    _age_categories = ['Student', 'Young', 'Adult', 'Senior']\n    _df['Age category'] = pd.cut(_df['Age'], _age_interval, labels = _age_categories)\n    \n    # Add Job column (input is Job category)\n    _job_categories = {'Job category': ['0- unskilled and non-resident', '1- unskilled and resident', '2- skilled', '3- highly skilled'], 'Job': [0, 1, 2, 3]}\n    _job_categories_df = pd.DataFrame(_job_categories)\n    _df = _df.merge(_job_categories_df, on = 'Job category', how = 'left').drop(columns = 'Job category')\n    \n    result = _df\nelse:\n    result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_pre_processing", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans - Pre-processing", "units": null, "w": "184", "x": "302", "y": "299", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([['40','female','2- skilled','own','moderate','moderate','2500','12',  'business'], ['23','male','1- unskilled and resident','rent','little','no info',  '3500','18','car'], ['20','female','1- unskilled and resident','rent','little','no info',  '5000','12','education'], ['35','male','2- skilled','own','little','little','3000','6',  'domestic appliances'], ['47','female','2- skilled','own','rich','moderate','5000','21',  'business'], ['64','female','1- unskilled and resident','own','moderate','moderate',  '2000','6','repairs'], ['57','male','2- skilled','own','quite rich','moderate','3000','12',  'vacation/others'], ['22','female','0- unskilled and non-resident','rent','little','little',  '5000','36','education'], ['39','female','1- unskilled and resident','own','little','little',  '1500','12','domestic appliances'], ['','','','','','','','','']],[new_loans_index,loan_parameters]).astype(\"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans", "units": null, "w": "184", "x": "80", "y": "299", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Predictions", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "328", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": 45, "y": 261, "z": "-2"}, {"color": "#4CBCFF", "definition": "result = random_forest_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "acd3b2d839c6748f6a1969c751a07e21e", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "random_forest_method", "picture": null, "title": "Random Forest Method", "units": null, "w": "184", "x": "80", "y": "105", "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a2c565a1880bf4e89b76e7d9ee06beaee", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "logistic_regression_method", "picture": null, "title": "Logistic Regression Method", "units": null, "w": "184", "x": "80", "y": "148", "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Predictions", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "711", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "927", "x": 30, "y": 39, "z": "-3"}, {"color": "#cccccc", "definition": "result = 0", "description": "Models", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "178", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": "45", "y": "69", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = normalized_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a5fbed3cfb13145e194667b636692ef07", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "normalized_data", "picture": null, "title": "Normalized Data", "units": null, "w": "184", "x": "79", "y": "343", "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "New Loans Feedback", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "132", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "896", "x": 45, "y": 602, "z": "-2"}, {"color": "#FFFF4B", "definition": "result = create_dataarray(\"\", [new_loans_index], dtype = \"O\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_feedback", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Feedback", "units": null, "w": "184", "x": 79, "y": 641, "z": 1}, {"color": "#4CBCFF", "definition": "_columns = original_data.columns.values\n\n# Checks if there is any complete loan\nif len(complete_new_loans) != 0:\n    _df = new_loans_pre_processing.copy()\n    \n    # Append Risk column to New Loans - Pre-processing dataframe\n    _new_loans_risk = change_index(new_loans_feedback, new_loans_index, complete_new_loans).values\n    _df['Risk'] = _new_loans_risk\n    \n    # Replace 'no info' values with NaN\n    _df['Saving accounts'] = np.where(_df['Saving accounts'] == 'no info', np.nan, _df['Saving accounts'])\n    _df['Checking account'] = np.where(_df['Checking account'] == 'no info', np.nan, _df['Checking account'])\n    \n    # Keep loans that have feedback\n    _df = _df[_df['Risk'] != '']\n    \n    # Reorder columns by the original data columns (makes it easier to concat afterwards)\n    result = _df[_columns]\nelse:\n    result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_to_add", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans to Add", "units": null, "w": "184", "x": 302, "y": 641, "z": 1}, {"color": "#CBCBCB", "definition": "# Checks if there is any complete loan\nif len(new_loans_to_add) == 0:\n    result = 0\nelse:\n    import os\n    from random import random\n    \n    _file_path = current_path + '/Machine Learning Inputs/new_loans.csv'\n    # Paste random number into the reload node definition (it refreshes New Loans CSV read)\n    reload_new_loans.node.definition = 'result = ' + str(random())\n    \n    if not os.path.isfile(_file_path):\n        # If file does not exist, create file with headers\n        result = new_loans_to_add.to_csv(_file_path, sep = ',', na_rep = 'NA', header = True, mode = 'w')\n    else:\n        # If file exists, add new rows without the headers\n        result = new_loans_to_add.to_csv(_file_path, sep = ',', na_rep = 'NA', header = False, mode = 'a')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "add_new_loans_to_csv", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Add New Loans to CSV", "units": null, "w": "154", "x": 535, "y": 625, "z": 1}, {"color": "#CB98FF", "definition": "# Checks if there is any complete loan\nif len(complete_new_loans) == 0:\n    result = 0\nelse:\n    # Create DataArray indexed by Machine Learning Method\n    result = xr.concat([new_loans_predictions_rfm.to_xarray(), new_loans_predictions_lrm.to_xarray(), new_loans_predictions_gnb.to_xarray()], dim = machine_learning_methods)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Predictions", "units": null, "w": "184", "x": "734", "y": "343", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = random_forest_method.predict(normalized_new_loans_data.values)\n\n# Create dataframe with predictions index by Complete New Loans\n_df = pd.DataFrame(_predict, complete_new_loans)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nresult = _df.replace(tuple([0, 1]), tuple(['good', 'bad']))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions_rfm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Predictions - RFM", "units": null, "w": "184", "x": "520", "y": "299", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = logistic_regression_method.predict(normalized_new_loans_data.values)\n\n# Create dataframe with predictions index by Complete New Loans\n_df = pd.DataFrame(_predict, complete_new_loans)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nresult = _df.replace(tuple([0, 1]), tuple(['good', 'bad']))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions_lrm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Predictions - LRM", "units": null, "w": "184", "x": "520", "y": "343", "z": 1}, {"color": "#CBCBCB", "definition": "# Resets input nodes definition\n\nnew_loans.node.definition = 'result = create_dataarray(\"\", [new_loans_index, loan_parameters], dtype = \"O\")'\nnew_loans_feedback.node.definition = 'result = create_dataarray(\"\", [new_loans_index], dtype = \"O\")'\n\n# To avoid error\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "reset_new_loans", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reset New Loans Inputs", "units": null, "w": "154", "x": 749, "y": 625, "z": 1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING PREDICTION\n\n_data = new_loans_pre_processing.copy()\n\n# Categorical columns\n_categorical_columns = [i for i in _data.columns if i not in numerical_columns]\n\n# Create dummies for each categorical column\nfor i in _categorical_columns:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = False, prefix = i), left_index = True, right_index = True)\n\n# Fill rest of categorical columns with 0\n_normalized_columns = normalized_data.columns\n_normalized_columns_exc = [i for i in _normalized_columns if i not in _data.columns]\nfor i in _normalized_columns_exc:\n    _data[i] = 0\n\n# Drop Risk_bad column\n_data = _data[_normalized_columns].drop(columns = 'Risk_bad')\n\n# Normalize numerical columns\nfor i in numerical_columns:\n    _original_data_i = data[i]\n    _min = _original_data_i.min()\n    _max = _original_data_i.max()\n    _scale = 1 / (_max - _min)\n    _normalized_values = _scale * _data[i] - _min * _scale\n    _data[i] = _normalized_values\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_new_loans_data", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized New Loans Data", "units": null, "w": "184", "x": "302", "y": "343", "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ae5a80b7287fb40179953f656bc2e30a2", "moduleId": "predictions_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "gaussian_naive_bayes_method", "picture": null, "title": "Gaussian Naive Bayes Method", "units": null, "w": "184", "x": "79", "y": "191", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = gaussian_naive_bayes_method.predict(normalized_new_loans_data.values)\n\n# Create dataframe with predictions index by Complete New Loans\n_df = pd.DataFrame(_predict, complete_new_loans)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nresult = _df.replace(tuple([0, 1]), tuple(['good', 'bad']))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_predictions_gnb", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Predictions - GNB", "units": null, "w": "184", "x": "520", "y": "388", "z": 1}, {"color": "#CBCBCB", "definition": "import os\n\n_file_path = current_path + '/Machine Learning Inputs/new_loans.csv'\n\nif not os.path.isfile(_file_path):\n    result = 0\nelse:\n    # If file exists, delete it and aste random number into the reload node definition (it refreshes New Loans CSV read)\n    from random import random\n    \n    reload_new_loans.node.definition = 'result = ' + str(random())\n    \n    result = os.remove(_file_path)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "delete_new_loans_from_csv", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Delete New Loans From CSV", "units": null, "w": "154", "x": 535, "y": 675, "z": 1}, {"color": "#CBCBCB", "definition": "# Resets New Loans Feedback node definition\n\nnew_loans_feedback.node.definition = 'result = create_dataarray(\"\", [new_loans_index], dtype = \"O\")'\n\n# To avoid error\nresult = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "reset_new_loans_feedback", "moduleId": "predictions_mod", "nodeClass": "button", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reset New Loans Feedback", "units": null, "w": "154", "x": 749, "y": 675, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "predictions_for_palestra_mod", "moduleId": "predictions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Predictions for Palestra", "units": null, "w": "184", "x": 78, "y": 769, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(age_p,2, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "age_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Age", "units": null, "w": "162", "x": "77", "y": "80", "z": 1}, {"color": "#4CFFA6", "definition": "result = age_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "age_choice", "picture": null, "title": "Age", "units": null, "w": "276", "x": "58", "y": "77", "z": 1}, {"color": "#4CFFA6", "definition": "result = sex_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "sex_choice", "picture": null, "title": "Sex", "units": null, "w": "276", "x": "58", "y": "111", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(sex_p,2, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sex_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sex", "units": null, "w": "162", "x": "77", "y": "114", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = job_category_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "job_category_choice", "picture": null, "title": "Job Category", "units": null, "w": "276", "x": "58", "y": "145", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(job_category_p,1, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "job_category_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Job Category", "units": null, "w": "162", "x": "77", "y": "148", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = checking_account_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "checking_account_choice", "picture": null, "title": "Checking Account", "units": null, "w": "276", "x": "351", "y": "77", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(checking_account_p,3, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "checking_account_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Checking Account", "units": null, "w": "162", "x": "370", "y": "80", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = duration_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "duration_choice", "picture": null, "title": "Duration", "units": null, "w": "276", "x": "351", "y": "111", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(duration_p,4, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "duration_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duration", "units": null, "w": "162", "x": "370", "y": "114", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = credit_amount_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a8fd72d1ded1f40e1b6d93b09b0bcf826_copy_copy_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "credit_amount_choice", "picture": null, "title": "Credit Amount", "units": null, "w": "276", "x": "351", "y": "145", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(credit_amount_p,5, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_amount_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credit Amount", "units": null, "w": "162", "x": "370", "y": "148", "z": "-2"}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Predictions for Palestra", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "432", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "predictions_for_palestra_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "916", "x": "30", "y": "39", "z": "-3"}, {"color": "#4CBCFF", "definition": "# Checks if new loan is incomplete\n_is_incomplete = np.any(new_loan_array == '')\n\nif _is_incomplete:\n    result = 0\nelse:\n    # Create dataframe\n    _df = pd.DataFrame({'Age': int(age_choice), 'Sex': sex_choice, 'Job category': job_category_transf, 'Housing': housing_default, 'Saving accounts': saving_accounts_default, 'Checking account': checking_account_choice, 'Credit amount': int(credit_amount_choice), 'Duration': int(duration_choice), 'Purpose': purpose_choice}, index = ['Loan'])\n    \n    # Create Age category column\n    _age_interval = (17, 25, 35, 60, 120)\n    _age_categories = ['Student', 'Young', 'Adult', 'Senior']\n    _df['Age category'] = pd.cut(_df['Age'], _age_interval, labels = _age_categories)\n    \n    # Add Job column (input is Job category)\n    _job_categories = {'Job category': ['0- unskilled and non-resident', '1- unskilled and resident', '2- skilled', '3- highly skilled'], 'Job': [0, 1, 2, 3]}\n    _job_categories_df = pd.DataFrame(_job_categories)\n    _df = _df.merge(_job_categories_df, on = 'Job category', how = 'left').drop(columns = 'Job category')\n    \n    result = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_pre_processing", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan - Pre-processing", "units": null, "w": "184", "x": "64", "y": "283", "z": 1}, {"color": "#4CBCFF", "definition": "# DATA PRE-PROCESSING FOR MACHINE LEARNING PREDICTION\n\n_data = new_loan_pre_processing.copy()\n\n# Categorical columns\n_categorical_columns = [i for i in _data.columns if i not in numerical_columns]\n\n# Create dummies for each categorical column\nfor i in _categorical_columns:\n    _data = _data.merge(pd.get_dummies(_data[i], drop_first = False, prefix = i), left_index = True, right_index = True)\n\n# Fill rest of categorical columns with 0\n_normalized_columns = normalized_data.columns\n_normalized_columns_exc = [i for i in _normalized_columns if i not in _data.columns]\nfor i in _normalized_columns_exc:\n    _data[i] = 0\n\n# Drop Risk_bad column\n_data = _data[_normalized_columns].drop(columns = 'Risk_bad')\n\n# Normalize numerical columns\nfor i in numerical_columns:\n    _original_data_i = data[i]\n    _min = _original_data_i.min()\n    _max = _original_data_i.max()\n    _scale = 1 / (_max - _min)\n    _normalized_values = _scale * _data[i] - _min * _scale\n    _data[i] = _normalized_values\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "normalized_new_loan_data", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Normalized New Loan Data", "units": null, "w": "184", "x": "282", "y": "283", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = random_forest_method.predict(normalized_new_loan_data.values)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nif _predict == 0:\n    result = 'good'\nelse:\n    result = 'bad'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_prediction_rfm", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Prediction - RFM", "units": null, "w": "184", "x": "282", "y": "327", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = logistic_regression_method.predict(normalized_new_loan_data.values)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nif _predict == 0:\n    result = 'good'\nelse:\n    result = 'bad'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_prediction_lrm", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Prediction - LRM", "units": null, "w": "184", "x": "282", "y": "372", "z": 1}, {"color": "#4CBCFF", "definition": "_predict = gaussian_naive_bayes_method.predict(normalized_new_loan_data.values)[0]\n\n# Replace 0 and 1 values by 'good' and 'bad'\nif _predict == 0:\n    result = 'good'\nelse:\n    result = 'bad'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_prediction_gnb", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Prediction - GNB", "units": null, "w": "184", "x": "282", "y": "417", "z": 1}, {"color": "#CB98FF", "definition": "# Checks if new loan is incomplete\n_is_incomplete = np.any(new_loan_array == '')\n\nif _is_incomplete:\n    result = pd.DataFrame({'RF': '-', 'LR': '-', 'GNB': '-'}, index = ['Score'])\nelse:\n    # Create DataArray indexed by Machine Learning Method\n    result = pd.DataFrame({'RF': new_loan_prediction_rfm, 'LR': new_loan_prediction_lrm, 'GNB': new_loan_prediction_gnb}, index = ['Score'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_predictions", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Predictions", "units": null, "w": "184", "x": "502", "y": "372", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(purpose_p,2, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "purpose_choice", "moduleId": "predictions_for_palestra_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Purpose", "units": null, "w": "162", "x": "662", "y": "148", "z": "-2"}, {"color": "#4CFFA6", "definition": "result = purpose_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "a501ac82a248042bd9bd45c1258d9023b", "moduleId": "predictions_for_palestra_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "purpose_choice", "picture": null, "title": "Purpose", "units": null, "w": "276", "x": "643", "y": "145", "z": 1}, {"color": "#4CBCFF", "definition": "result = random_forest_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad6441de53d6c49939ceba4a2c65b463a", "moduleId": "predictions_for_palestra_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "random_forest_method", "picture": null, "title": "Random Forest Method", "units": null, "w": "184", "x": "64", "y": "327", "z": 1}, {"color": "#4CBCFF", "definition": "result = logistic_regression_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ad9f9591211e844209b2fe75ec01be29d", "moduleId": "predictions_for_palestra_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "logistic_regression_method", "picture": null, "title": "Logistic Regression Method", "units": null, "w": "184", "x": "64", "y": "372", "z": 1}, {"color": "#4CBCFF", "definition": "result = gaussian_naive_bayes_method", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "abe60194ed1834730a6fecb8193bb9f0b", "moduleId": "predictions_for_palestra_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "gaussian_naive_bayes_method", "picture": null, "title": "Gaussian Naive Bayes Method", "units": null, "w": "184", "x": "64", "y": "417", "z": 1}, {"color": "#4CBCFF", "definition": "# Numpy array with new loan\nresult = np.array([age_choice, sex_choice, job_category_transf, housing_default, saving_accounts_default, checking_account_choice, credit_amount_choice, duration_choice, purpose_choice])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loan_array", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loan Array", "units": null, "w": "184", "x": "64", "y": "239", "z": 1}, {"color": "#FFFF4B", "definition": "result = checking_account_choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "saving_accounts_default", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Saving Accounts (default)", "units": null, "w": "184", "x": "689", "y": "79", "z": 1}, {"color": "#FFFF4B", "definition": "if checking_account_choice == 'rich':\n    result = 'own'\nelse:\n    result = 'rent'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "housing_default", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Housing (default)", "units": null, "w": "184", "x": "689", "y": "113", "z": 1}, {"color": "#FFFF4B", "definition": "if job_category_choice == 'unskilled':\n    result = '1- unskilled and resident'\nelse:\n    result = '2- skilled'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "job_category_transf", "moduleId": "predictions_for_palestra_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Job Category (transformation)", "units": null, "w": "184", "x": "64", "y": "196", "z": 1}, {"color": "#4CBCFF", "definition": "_suggested_credit_amount = 0\n_suggested_credit_amount_list = []\n\n_orig_credit_amount = new_loans_pre_processing['Credit amount']\n_orig_credit_amount = xr.DataArray(_orig_credit_amount, [complete_new_loans])\n\n_original_predicts = random_forest_method.predict(normalized_new_loans_data.values)\n\n_original_data_i = data['Credit amount']\n_min = _original_data_i.min()\n_max = _original_data_i.max()\n_scale = 1 / (_max - _min)\n\n_lower_amounts = (to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * to_dataarray(credit_amount).astype(int)\n\n_i_loan_pos = 0\nfor loan in complete_new_loans:\n    _original_predict = _original_predicts[_i_loan_pos]\n    \n    if _original_predict == 0.:\n        _actual_credit_amount = subscript(_orig_credit_amount, complete_new_loans, loan).astype(int).values.tolist()\n        _suggested_credit_amount_list.append(_actual_credit_amount)\n        pass\n    else:\n        _normalized_original_values = normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n        _normalized_new_values = _normalized_original_values.copy()\n        \n        _lower_amounts_list = subset(subscript(_lower_amounts, complete_new_loans, loan)).astype(int).values\n        # Sort in descending order\n        _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n        \n        if len(_lower_amounts_list) == 0:\n            _suggested_credit_amount_list.append('N/A')\n        else:\n            for i in range(0, len(_lower_amounts_list)):\n                _credit_amount_to_test = _lower_amounts_list[i]\n                _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                _normalized_new_values['Credit amount'] = _normalized_values\n                _predict = random_forest_method.predict(_normalized_new_values.values)[0]\n                \n                # Exit loop when succesful\n                if _predict == 0.:\n                    _suggested_credit_amount = _credit_amount_to_test\n                    _suggested_credit_amount_list.append(_suggested_credit_amount)\n                    break\n                elif i == len(_lower_amounts_list)-1:\n                    _suggested_credit_amount_list.append('N/A')\n        \n    _i_loan_pos = _i_loan_pos + 1\n\nresult = _suggested_credit_amount_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount_rfm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Suggested Credit Amount - RFM", "units": null, "w": "184", "x": 520, "y": 445, "z": 1}, {"color": "#4CBCFF", "definition": "_suggested_credit_amount = 0\n_suggested_credit_amount_list = []\n\n_orig_credit_amount = new_loans_pre_processing['Credit amount']\n_orig_credit_amount = xr.DataArray(_orig_credit_amount, [complete_new_loans])\n\n_original_predicts = logistic_regression_method.predict(normalized_new_loans_data.values)\n\n_original_data_i = data['Credit amount']\n_min = _original_data_i.min()\n_max = _original_data_i.max()\n_scale = 1 / (_max - _min)\n\n_lower_amounts = (to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * to_dataarray(credit_amount).astype(int)\n\n_i_loan_pos = 0\nfor loan in complete_new_loans:\n    _original_predict = _original_predicts[_i_loan_pos]\n    \n    if _original_predict == 0.:\n        _actual_credit_amount = subscript(_orig_credit_amount, complete_new_loans, loan).astype(int).values.tolist()\n        _suggested_credit_amount_list.append(_actual_credit_amount)\n        pass\n    else:\n        _normalized_original_values = normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n        _normalized_new_values = _normalized_original_values.copy()\n        \n        _lower_amounts_list = subset(subscript(_lower_amounts, complete_new_loans, loan)).astype(int).values\n        # Sort in descending order\n        _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n        \n        if len(_lower_amounts_list) == 0:\n            _suggested_credit_amount_list.append('N/A')\n        else:\n            for i in range(0, len(_lower_amounts_list)):\n                _credit_amount_to_test = _lower_amounts_list[i]\n                _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                _normalized_new_values['Credit amount'] = _normalized_values\n                _predict = logistic_regression_method.predict(_normalized_new_values.values)[0]\n                \n                # Exit loop when succesful\n                if _predict == 0.:\n                    _suggested_credit_amount = _credit_amount_to_test\n                    _suggested_credit_amount_list.append(_suggested_credit_amount)\n                    break\n                elif i == len(_lower_amounts_list)-1:\n                    _suggested_credit_amount_list.append('N/A')\n            \n    _i_loan_pos = _i_loan_pos + 1\n\nresult = _suggested_credit_amount_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount_lrm", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Suggested Credit Amount - LRM", "units": null, "w": "184", "x": 520, "y": 489, "z": 1}, {"color": "#4CBCFF", "definition": "_suggested_credit_amount = 0\n_suggested_credit_amount_list = []\n\n_orig_credit_amount = new_loans_pre_processing['Credit amount']\n_orig_credit_amount = xr.DataArray(_orig_credit_amount, [complete_new_loans])\n\n_original_predicts = gaussian_naive_bayes_method.predict(normalized_new_loans_data.values)\n\n_original_data_i = data['Credit amount']\n_min = _original_data_i.min()\n_max = _original_data_i.max()\n_scale = 1 / (_max - _min)\n\n_lower_amounts = (to_dataarray(credit_amount).astype(int) < _orig_credit_amount) * to_dataarray(credit_amount).astype(int)\n\n_i_loan_pos = 0\nfor loan in complete_new_loans:\n    _original_predict = _original_predicts[_i_loan_pos]\n    \n    if _original_predict == 0.:\n        _actual_credit_amount = subscript(_orig_credit_amount, complete_new_loans, loan).astype(int).values.tolist()\n        _suggested_credit_amount_list.append(_actual_credit_amount)\n        pass\n    else:\n        _normalized_original_values = normalized_new_loans_data[_i_loan_pos:_i_loan_pos+1]\n        _normalized_new_values = _normalized_original_values.copy()\n        \n        _lower_amounts_list = subset(subscript(_lower_amounts, complete_new_loans, loan)).astype(int).values\n        # Sort in descending order\n        _lower_amounts_list = np.sort(_lower_amounts_list)[::-1]\n        \n        if len(_lower_amounts_list) == 0:\n            _suggested_credit_amount_list.append('N/A')\n        else:\n            for i in range(0, len(_lower_amounts_list)):\n                _credit_amount_to_test = _lower_amounts_list[i]\n                _normalized_values = _scale * _credit_amount_to_test - _min * _scale\n                _normalized_new_values['Credit amount'] = _normalized_values\n                _predict = gaussian_naive_bayes_method.predict(_normalized_new_values.values)[0]\n                \n                # Exit loop when succesful\n                if _predict == 0.:\n                    _suggested_credit_amount = _credit_amount_to_test\n                    _suggested_credit_amount_list.append(_suggested_credit_amount)\n                    break\n                elif i == len(_lower_amounts_list)-1:\n                    _suggested_credit_amount_list.append('N/A')\n    \n    _i_loan_pos = _i_loan_pos + 1\n\nresult = _suggested_credit_amount_list", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount_gnb", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Suggested Credit Amount - GNB", "units": null, "w": "184", "x": 520, "y": 534, "z": 1}, {"color": "#CB98FF", "definition": "# Checks if there is any complete loan\nif len(complete_new_loans) == 0:\n    result = 0\nelse:\n    # Create DataArray indexed by Machine Learning Method\n    result = xr.concat([\n        xr.DataArray(new_loans_suggested_credit_amount_rfm, [complete_new_loans]),\n        xr.DataArray(new_loans_suggested_credit_amount_lrm, [complete_new_loans]),\n        xr.DataArray(new_loans_suggested_credit_amount_gnb, [complete_new_loans])\n        ], dim = machine_learning_methods)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amounts", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Suggested Credit Amounts", "units": null, "w": "184", "x": 734, "y": 489, "z": 1}, {"color": "#CB98FF", "definition": "_max = 99999\n_aux = apply_fn(new_loans_suggested_credit_amounts, lambda x: _max if x == 'N/A' else int(x))\n_minimum = _aux.min(machine_learning_methods.name)\n\nresult = xr.where(_minimum == _max, 'N/A', _minimum.astype(str))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_loans_suggested_credit_amount", "moduleId": "predictions_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans Suggested Credit Amount", "units": null, "w": "184", "x": 734, "y": 534, "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Predictions", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "126", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "256", "x": "316", "y": "217", "z": -1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "data_mod_copy", "moduleId": "generic_business_demo", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data", "units": null, "w": "146", "x": "264", "y": "685", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_mod", "moduleId": "credit_risk_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data", "units": null, "w": "184", "x": "79", "y": "129", "z": 1}, {"color": "#4CBCFF", "definition": "# Variable to refresh calculations when the 'Add New Loans to CSV' or 'Delete New Loans From CSV' buttons are executed\n_reload = reload_new_loans\n\nimport os\n\n_file_path = current_path + '/Files/new_loans.csv'\n\n# Check if CSV file exists\nif not os.path.isfile(_file_path):\n    _data = original_data.copy()\nelse:\n    if consider_new_loans == 'Yes':\n        # Concatenate original loans with new loans\n        _data = pd.concat([original_data, new_data])\n    else:\n        # Take original loans only\n        _data = original_data.copy()\n\n# Add value column. Helps counting\n_data['value'] = 1.\n\n# Add Age category column\n_interval = (17, 25, 35, 60, 120)\n_age_categories = ['Student', 'Young', 'Adult', 'Senior']\n_data['Age category'] = pd.cut(_data['Age'], _interval, labels = _age_categories)\n\n# Add Job category column (description from the numerical Job column)\n_job_categories = {\n    'Job': [0, 1, 2, 3],\n    'Job category': ['0- unskilled and non-resident', '1- unskilled and resident', '2- skilled', '3- highly skilled']\n}\n_job_categories_df = pd.DataFrame(_job_categories)\n_data = _data.merge(_job_categories_df, on = 'Job', how = 'left')\n\n_data['Saving accounts'] = _data['Saving accounts'].fillna('no info')\n_data['Checking account'] = _data['Checking account'].fillna('no info')\n\"\"\"\n# FILL NULL VALUES OF SAVING ACCOUNTS AND CHECKING ACCOUNTS WITH MODE\n# Columns related to wealth\n_related_cols = ['Job', 'Age category']\n_savings_cols = _related_cols + ['Saving accounts']\n_checking_cols = _related_cols + ['Checking account']\n\n# Fill Saving accounts null values with mode by Job and Age category\n_filtered_savings_data = _data[_data['Saving accounts'].notnull()]\n_savings_mode = _filtered_savings_data[_savings_cols].groupby(_related_cols).agg(lambda x: x.value_counts().index[0]).reset_index().rename(columns = {'Saving accounts': 'Saving accounts mode'})\n_data = _data.merge(_savings_mode, on = _related_cols, how = 'left')\n_data['Saving accounts'] = np.where(_data['Saving accounts'].isnull(), _data['Saving accounts mode'], _data['Saving accounts'])\n_data = _data.drop(columns = 'Saving accounts mode')\n\n# Fill Checking account null values with mode by Job and Age category\n_filtered_checking_data = _data[_data['Checking account'].notnull()]\n_checking_mode = _filtered_checking_data[_checking_cols].groupby(_related_cols).agg(lambda x: x.value_counts().index[0]).reset_index().rename(columns = {'Checking account': 'Checking account mode'})\n_data = _data.merge(_checking_mode, on = _related_cols, how = 'left')\n_data['Checking account'] = np.where(_data['Checking account'].isnull(), _data['Checking account mode'], _data['Checking account'])\n_data = _data.drop(columns = 'Checking account mode')\n\"\"\"\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data (with new columns and loans)", "units": null, "w": "184", "x": 278, "y": 191, "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Data", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "249", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "data_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "489", "x": 30, "y": 39, "z": -1}, {"color": "#A5FF4B", "definition": "# Read data from CSV without index column\nresult = pd.read_csv(current_path + '/Machine Learning Inputs/german_credit_data.csv', index_col = 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "original_data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Original Data", "units": null, "w": "184", "x": "56", "y": "104", "z": 1}, {"color": "#A5FF4B", "definition": "# Variable to refresh calculations when the 'Add New Loans to CSV' or 'Delete New Loans From CSV' buttons are executed\n_reload = reload_new_loans\n\nimport os\n\n_file_path = current_path + '/Machine Learning Inputs/new_loans.csv'\n\n# Check if CSV file exists\nif os.path.isfile(_file_path):\n    result = pd.read_csv(_file_path, index_col = 0)\nelse:\n    result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "new_data", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Data", "units": null, "w": "184", "x": "56", "y": "191", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(yes_no,1, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "consider_new_loans", "moduleId": "data_mod", "nodeClass": "decision", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Consider New Loans?", "units": null, "w": "184", "x": "278", "y": "54", "z": 1}, {"color": "#FFFF4B", "definition": "result = 0.18931050387506443", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "reload_new_loans", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reload New Loans", "units": null, "w": "130", "x": "82", "y": "149", "z": 1}, {"color": "#cccccc", "definition": "_data = data\n\n# Get column values information\n_unique_values = _data.nunique()\n_data_types = _data.dtypes.astype(str).values.tolist()\n_null_values = _data.isnull().sum()\n_empty_values = ((_data == '') | (_data == ' ')).sum()\n\n# Create dataframe\n_df = pd.DataFrame({\n    'Unique values': _unique_values,\n    'Data type': _data_types, \n    'Null values': _null_values, \n    'Empty values': _empty_values\n    }\n)\n\n# Bad and good loans count and percentage\n_observations = ((_data['Risk'] == 'good') | (_data['Risk'] == 'bad')).sum()\n_good_loans = (_data['Risk'] == 'good').sum()\n_bad_loans = (_data['Risk'] == 'bad').sum()\n_good_loans_pc = _good_loans / (_good_loans + _bad_loans)\n_bad_loans_pc = _bad_loans / (_good_loans + _bad_loans)\n\n_bad_good_loans = pd.DataFrame({\n    'Unique values': [_good_loans, _good_loans_pc, _bad_loans, _bad_loans_pc, _observations],\n    'Data type': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Null values': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Empty values': ['NA', 'NA', 'NA', 'NA', 'NA']\n    },\n    index = ['Good loans', 'Good loans %','Bad loans', 'Bad loans %', 'Number of observations']\n)\n\n# Concat dataframes\nresult = pd.concat([_df, _bad_good_loans])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_overview_post_manip", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data Overview (Post Manipulation", "units": null, "w": "184", "x": 278, "y": 235, "z": 1}, {"color": "#cccccc", "definition": "_data = original_data\n\n# Get column values information\n_unique_values = _data.nunique()\n_data_types = _data.dtypes.astype(str).values.tolist()\n_null_values = _data.isnull().sum()\n_empty_values = ((_data == '') | (_data == ' ')).sum()\n\n# Create dataframe\n_df = pd.DataFrame({\n    'Unique values': _unique_values,\n    'Data type': _data_types, \n    'Null values': _null_values, \n    'Empty values': _empty_values\n    }\n)\n\n# Bad and good loans count and percentage\n_observations = ((_data['Risk'] == 'good') | (_data['Risk'] == 'bad')).sum()\n_good_loans = (_data['Risk'] == 'good').sum()\n_bad_loans = (_data['Risk'] == 'bad').sum()\n_good_loans_pc = _good_loans / (_good_loans + _bad_loans)\n_bad_loans_pc = _bad_loans / (_good_loans + _bad_loans)\n\n_bad_good_loans = pd.DataFrame({\n    'Unique values': [_good_loans, _good_loans_pc, _bad_loans, _bad_loans_pc, _observations],\n    'Data type': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Null values': ['NA', 'NA', 'NA', 'NA', 'NA'],\n    'Empty values': ['NA', 'NA', 'NA', 'NA', 'NA']\n    },\n    index = ['Good loans', 'Good loans %','Bad loans', 'Bad loans %', 'Number of observations']\n)\n\n# Concat dataframes\nresult = pd.concat([_df, _bad_good_loans])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_overview", "moduleId": "data_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data Overview", "units": null, "w": "184", "x": 278, "y": 104, "z": 1}, {"color": "#4cffa6", "definition": "result = consider_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "35", "identifier": "aada9bf6588d7464ab98ef3d0df9b3e2f", "moduleId": "data_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "consider_new_loans", "picture": null, "title": "Consider New Loans?", "units": null, "w": "272", "x": 234, "y": 52, "z": 1}, {"color": "#cccccc", "definition": "result = 0", "description": "Control Panel", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "160", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "credit_risk_mod", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "526", "x": "44", "y": "356", "z": -1}, {"color": "#4C83FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "indexes_mod_copy", "moduleId": "data_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indexes", "units": null, "w": "184", "x": "550", "y": "184", "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "indexes_mod", "moduleId": "credit_risk_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indexes", "units": null, "w": "184", "x": "78", "y": "632", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Age', 'Sex', 'Job category', 'Housing', 'Saving accounts', 'Checking account', 'Credit amount', 'Duration (months)', 'Purpose'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "loan_parameters", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Loan Parameters", "units": null, "w": "100", "x": "62", "y": "149", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Sex'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sex", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sex", "units": null, "w": "100", "x": "62", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Job category'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "job_category", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Job Category", "units": null, "w": "100", "x": "162", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Housing'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "housing", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Housing", "units": null, "w": "100", "x": "262", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Purpose'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "purpose", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Purpose", "units": null, "w": "100", "x": "362", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "_number_of_loans = 10\n_loans = [('Loan 0' + str(x)) if (x<10) else ('Loan ' + str(x)) for x in range(1, (_number_of_loans + 1))]\n\nresult = pd.Index(_loans)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "new_loans_index", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "New Loans", "units": null, "w": "100", "x": "162", "y": "149", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(19, 75, _step=1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "age", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Age", "units": null, "w": "100", "x": "461", "y": "290", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(500, 15000, _step = 500)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "credit_amount", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credit Amount", "units": null, "w": "100", "x": "62", "y": "348", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(6, 72, _step = 3)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "duration", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duration", "units": null, "w": "100", "x": "162", "y": "348", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(\n    np.sort(\n    data['Risk'].unique()\n    )\n)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "risk", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Risk", "units": null, "w": "100", "x": "461", "y": "348", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Yes\",\"No\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "yes_no_copy", "moduleId": "cdm_reg_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Yes / No", "units": null, "w": "100", "x": "245", "y": "61", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Yes', 'No'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "yes_no", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Yes / No", "units": null, "w": "100", "x": "62", "y": "89", "z": 1}, {"color": "#EEEEEE", "definition": "result = 0", "description": "Indexes", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "667", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "indexes_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "647", "x": 40, "y": 49, "z": -1}, {"color": "#9999ff", "definition": "result = subset((new_loans == '').sum(loan_parameters.name) == 0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "complete_new_loans", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Complete New Loans", "units": null, "w": "100", "x": 261, "y": 149, "z": 1}, {"color": null, "definition": "result = pd.Index( ['1'] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "one_element_copy", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "One Element", "units": null, "w": "100", "x": "156", "y": "179", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Item'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "one_element", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "One Element", "units": null, "w": "100", "x": "162", "y": "89", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['RF','LR','GNB'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "machine_learning_methods", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Methods", "units": null, "w": "100", "x": "261", "y": "89", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Accuracy', 'Precision', 'Recall', 'F1 Score', 'Score'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "metrics", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Metrics", "units": null, "w": "100", "x": "362", "y": "89", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Credit amount', 'Duration', 'Age'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "numerical_columns", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Numerical Columns", "units": null, "w": "100", "x": "461", "y": "89", "z": 1}, {"color": "#9999ff", "definition": "_columns = [i for i in data.columns if i not in numerical_columns]\n_columns.remove('value')\n_columns.remove('Job category')\n\nresult = pd.Index(_columns)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "categorical_columns", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Categorical Columns", "units": null, "w": "100", "x": "560", "y": "89", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['little', 'moderate', 'quite rich', 'rich', 'no info'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "saving_accounts", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Saving Accounts", "units": null, "w": "100", "x": "261", "y": "348", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['little', 'moderate', 'rich', 'no info'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "checking_account", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Checking Account", "units": null, "w": "100", "x": "362", "y": "348", "z": 1}, {"color": "#CCCCCC", "definition": "result = 0", "description": "Indexes for Palestra", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "152", "identifier": "node1_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "moduleId": "indexes_mod", "nodeClass": "text", "nodeFont": "Arial Black,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "626", "x": "50", "y": "415", "z": -1}, {"color": "#9999ff", "definition": "result = sequence_index(500, 2500, _step = 500)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "credit_amount_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credit Amount", "units": null, "w": "100", "x": "560", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(6, 18, _step = 3)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "duration_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duration", "units": null, "w": "100", "x": "461", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = ['little', 'moderate', 'rich']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "checking_account_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Checking Account", "units": null, "w": "100", "x": "362", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = ['unskilled', 'skilled']", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "job_category_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Job Category", "units": null, "w": "100", "x": "261", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = copy_index(sex)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "sex_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sex", "units": null, "w": "100", "x": "162", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(20, 45, _step = 5)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "age_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Age", "units": null, "w": "100", "x": "62", "y": "446", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('', housing)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "housing_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Housing", "units": null, "w": "100", "x": "62", "y": "503", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('', saving_accounts)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "saving_accounts_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Saving Accounts", "units": null, "w": "100", "x": "162", "y": "503", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('', purpose)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "purpose_p", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Purpose", "units": null, "w": "100", "x": "261", "y": "503", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['n_estimators', 'max_features', 'max_depth'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "rf_parameters", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "RF Parameters", "units": null, "w": "100", "x": "261", "y": "209", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(1, 10, _step = 1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "ten_lines", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "10 Lines", "units": null, "w": "100", "x": "62", "y": "209", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index(1, 25, _step = 1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "twenty_five_lines", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "25 Lines", "units": null, "w": "100", "x": "162", "y": "209", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(metrics,3, False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "metric_for_feature_engineering", "moduleId": "indexes_mod", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Metric for Hyperparamter Tuning", "units": null, "w": "216", "x": "108", "y": "593", "z": "-2"}, {"color": "#4CBCFF", "definition": "result = {\n    'Accuracy': 'accuracy',\n    'Precision': 'precision',\n    'Recall': 'recall',\n    'F1 Score': 'f1',\n    'Score': None\n}", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "metrics_switcher", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Metrics Switcher", "units": null, "w": "184", "x": 466, "y": 594, "z": 1}, {"color": "#4CFFA6", "definition": "result = metric_for_feature_engineering", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "35", "identifier": "a9bb94c6c5a8b498ca937535f54ef5943", "moduleId": "indexes_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "metric_for_feature_engineering", "picture": null, "title": "Metric for Hyperparamter Tuning", "units": null, "w": "370", "x": 62, "y": 591, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['penalty', 'C'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "lr_parameters", "moduleId": "indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "LR Parameters", "units": null, "w": "100", "x": "362", "y": "209", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 50%;\n      height: 50%;\n      padding-bottom: 40%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:0%;\nmargin-right:0%;\nmargin-bottom:5%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Credit Risk Analysis and Prediction Demo</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"228\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Data Exploration and Analysis</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"143\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Machine Learning and Predictions</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-gear fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "menu_blocks", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Menu Blocks", "units": null, "w": "184", "x": 466, "y": 631, "z": 1}, {"color": "#ffff4b", "definition": "result = 42", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fixed_random_state", "moduleId": "indexes_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fixed Random State", "units": null, "w": "184", "x": 466, "y": 668, "z": 1}, {"color": "#CBCBCB", "definition": "result = reset_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "a698a766ffafb4abc95849a9ba6c7f3ad", "moduleId": "credit_risk_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "reset_new_loans", "picture": null, "title": "Reset New Loans Inputs", "units": null, "w": "154", "x": "399", "y": "448", "z": 1}, {"color": "#CBCBCB", "definition": "result = add_new_loans_to_csv", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "a2540e80a21f04e90a0ed955e859a08f6", "moduleId": "credit_risk_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "add_new_loans_to_csv", "picture": null, "title": "Add New Loans to CSV", "units": null, "w": "154", "x": "60", "y": "448", "z": 1}, {"color": "#CBCBCB", "definition": "result = delete_new_loans_from_csv", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "40", "identifier": "a0f360031a45d404cbe36298eb640a3f7", "moduleId": "credit_risk_mod", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "delete_new_loans_from_csv", "picture": null, "title": "Delete New Loans From CSV", "units": null, "w": "154", "x": "230", "y": "448", "z": 1}, {"color": "#4cffa6", "definition": "result = consider_new_loans", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "35", "identifier": "aada9bf6588d7464ab98ef3d0df9b3e2f_1", "moduleId": "credit_risk_mod", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "consider_new_loans", "picture": null, "title": "Consider New Loans?", "units": null, "w": "272", "x": 171, "y": 390, "z": 1}, {"color": "#6699ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "supplier_route_optimization_mod", "moduleId": "machine_learning_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Supplier Route Optimization", "units": null, "w": "184", "x": 46, "y": 91, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Supplier Route Optimization", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "354", "identifier": "node172_2", "moduleId": "supplier_route_optimization_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "534", "x": "28", "y": "42", "z": "-2"}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_menus_blocks_mod", "moduleId": "data_mod_copy", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Menus Blocks", "units": null, "w": "184", "x": "308", "y": "184", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h11 {\n\t   font-size: 3.5em;\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 30%;\n      height: 30%;\n      padding-bottom: 20%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:1.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h11 style = \"color:#5f6670;\">Generic Business Demo</h11>\n  </div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2633\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3><h4>Analyze Data & Trends</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div>\n<div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2631\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3><h4>ML Algorithms</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner\"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2632\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Budgeting</h3><h4>Collaborative Planning</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2636\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3><h4>Sales Forecast, Data Driven Planning and more</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2679\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Scenarios</h3><h4>Dynamic Simulations</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div>\n    <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2680\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Control</h3><h4>Actual vs. Budget Performance</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-check-square-o fa-4x\"></i></div></div></div>\n\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "main_menu_blocks_by_capabilities", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Menu Blocks - By Capabilities", "units": null, "w": "184", "x": "52", "y": "135", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h11 {\n\t   font-size: 3.5em;\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 20%;\n      height: 20%;\n      padding-bottom: 20%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h11 style = \"color:#5f6670;\">Modules</h11>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"325\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Commercial</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-usd fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"326\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Operations</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-industry fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"327\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>OPEX</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"328\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>CAPEX</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-pie-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"329\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Finance</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-book fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "main_menu_blocks_by_modules", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Menu Blocks - By Modules", "units": null, "w": "184", "x": "294", "y": "135", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 20%;\n      height: 20%;\n      padding-bottom: 20%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:1.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Business Planning</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2669\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Commercial</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-usd fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2672\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Operations</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-industry fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2673\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>OPEX</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2674\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>CAPEX</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-pie-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2678\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Finance</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-book fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "business_planning_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Business Planning Blocks", "units": null, "w": "184", "x": "52", "y": "276", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Data Analytics</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2645\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Commercial</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-usd fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Operations</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-industry fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Finance</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-book fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_analytics_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data Analytics Blocks", "units": null, "w": "184", "x": "52", "y": "183", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Machine Learning</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"323\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Commercial</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-usd fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Operations</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-industry fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Finance</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-book fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Blocks", "units": null, "w": "184", "x": "52", "y": "323", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 25%;\n      height: 25%;\n      padding-bottom: 25%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Supplier Route Optimization</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2651\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Visits</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-list-ol fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2653\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Routing</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-code-fork fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Commentaries Record</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-comments fa-4x\"></i></div></div></div><div class=\"big-menu-box\">\n  <div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Action Plan</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-tasks fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_blocks_commercial", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Blocks - Commercial", "units": null, "w": "184", "x": "52", "y": "370", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Commercial Management</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1576\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1551\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"323\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "commercial_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Commercial Blocks", "units": null, "w": "184", "x": "294", "y": "183", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Operations</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1554\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "operations_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Operations Blocks", "units": null, "w": "184", "x": "294", "y": "230", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 25%;\n      height: 25%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">OPEX</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Budgeting</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1555\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "opex_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OPEX Blocks", "units": null, "w": "184", "x": "294", "y": "276", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">CAPEX</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1556\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "capex_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CAPEX Blocks", "units": null, "w": "184", "x": "294", "y": "323", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Finance Analysis</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1560\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "finance_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Finance Blocks", "units": null, "w": "184", "x": "294", "y": "370", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-size: 4em;\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 50%;\n      height: 50%;\n      padding-bottom: 10%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 6em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Explore. Analyze. Execute.</h1>\n  </div><div class=\"big-menu-box\">\n  </div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "main_menu_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Menu Blocks", "units": null, "w": "184", "x": "170", "y": "79", "z": 1}, {"color": "#CFE2F3", "definition": "result = 0", "description": "Menus Blocks", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "540", "identifier": "node300", "moduleId": "data_menus_blocks_mod", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "477", "x": 28, "y": 42, "z": "-2"}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 33%;\n      padding-bottom: 30%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Budgeting</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"8750\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Build Annual Budget</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"8744\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Budget Analysis</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-search fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"8753\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Budget Control</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-check-square fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "budgetting_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budgeting Blocks", "units": null, "w": "184", "x": "52", "y": "230", "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 50%;\n      height: 50%;\n      padding-bottom: 40%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2m;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:0%;\nmargin-right:0%;\nmargin-bottom:5%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Credit Risk Analysis and Prediction</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2658\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Data Exploration and Analysis</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2656\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Machine Learning and Predictions</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-gear fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "credit_risk_menu_blocks", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credit Risk Menu Blocks", "units": null, "w": "184", "x": 52, "y": 478, "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 33%;\n      height: 50%;\n      padding-bottom: 40%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:0%;\nmargin-right:0%;\nmargin-bottom:5%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Machine Learning Models</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2635\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Supplier Route Optimization</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-code-fork fa-4x\"></i></div></div>\n   \n   </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2660\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Last Mile Optimization </h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-truck fa-4x\"></i></div></div></div>\n   \n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2638\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Credit Risk</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-university fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_blocks_2_examples", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Blocks (2 examples)", "units": null, "w": "184", "x": 52, "y": 433, "z": 1}, {"color": "#9999ff", "definition": "result = concat_index('Base Scenario', 'Scenario ' + sequence_index(2, 10, _step = 1))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "inputs_scenarios_tot", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs Scenarios (Total)", "units": null, "w": "96", "x": 55, "y": 250, "z": 1}, {"color": "#9999ff", "definition": "result = subset(pmk_inputs_with_scenarios.sum(inputs.name) + pmk_inputs_with_scenarios_1.sum(inputs_scenario_ml.name))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "inputs_scenarios", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs Scenarios", "units": null, "w": "96", "x": 158, "y": 250, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "inputs_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs", "units": null, "w": "145", "x": 66, "y": 225, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ols_linear_regression_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Linear Regression", "units": null, "w": "145", "x": 240, "y": 186, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ols_quadratic_regression_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Quadratic Regression", "units": null, "w": "145", "x": 240, "y": 265, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "ols_cubic_regression_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OLS Cubic Regression", "units": null, "w": "145", "x": 473, "y": 186, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "arima_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Arima", "units": null, "w": "145", "x": 473, "y": 265, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "42", "identifier": "models_comparison_mod", "moduleId": "cdm_regressions_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Models Comparison", "units": null, "w": "145", "x": 653, "y": 225, "z": 1}, {"color": "#ffff4b", "definition": "result = xr.DataArray([[0.95,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [80.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[inputs,inputs_scenarios_tot])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_inputs_with_scenarios", "moduleId": "data_mod_copy", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Per Capita Consumption & Elasticity", "units": null, "w": "184", "x": 550, "y": 316, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Consumption Income Elasticity', 'Annual Per Capita Consumption'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "inputs", "moduleId": "pmk_indexes_mod", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs", "units": null, "w": "96", "x": 264, "y": 250, "z": 1}, {"color": "#ffff4b", "definition": "result = pmk_inputs_with_scenarios", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a0c668f2fd0cb45af9733f5dae72dca6e", "moduleId": "pmk_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "pmk_inputs_with_scenarios", "picture": null, "title": "Per Capita Consumption & Elasticity", "units": null, "w": "184", "x": 44, "y": 243, "z": 1}, {"color": "#6699ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_scenarios_mod", "moduleId": "fin_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Scenarios", "units": null, "w": "184", "x": 562, "y": 287, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Scenarios", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "302", "identifier": "node84_1", "moduleId": "fin_scenarios_mod", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "754", "x": "28", "y": "42", "z": -1}, {"color": "#4cbcff", "definition": "result = fin_net_income", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "afeab4e8c4b5e4574b7bed2c7e60d48e6", "moduleId": "fin_scenarios_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_net_income", "picture": null, "title": "Net Income", "units": null, "w": "184", "x": 55, "y": 127, "z": 1}, {"color": "#4cbcff", "definition": "result = fin_total_equity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "afa1207872d8e4962a85d2f2e96f3b573", "moduleId": "fin_scenarios_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_total_equity", "picture": null, "title": "Total Equity", "units": null, "w": "184", "x": 55, "y": 171, "z": 1}, {"color": "#4cbcff", "definition": "result = fin_total_assets", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a0cdb62c86bad48b3a3e9ecb37da0fae5", "moduleId": "fin_scenarios_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_total_assets", "picture": null, "title": "Total Assets", "units": null, "w": "184", "x": 55, "y": 215, "z": 1}, {"color": "#4CBCFF", "definition": "result = fin_sales", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a0e72e3ae533a4a16918dfeb040c78dc9", "moduleId": "fin_scenarios_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "fin_sales", "picture": null, "title": "Sales", "units": null, "w": "184", "x": 55, "y": 83, "z": 1}, {"color": "#cccccc", "definition": "result = xr.where(fin_sales == 0., 0., fin_net_income / fin_sales)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_net_profit_margin_scenario_analysis", "moduleId": "fin_scenarios_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Net Profit Margin - Scenario Analysis", "units": null, "w": "184", "x": 277, "y": 127, "z": 1}, {"color": "#cccccc", "definition": "result = xr.where(fin_total_equity == 0., 0., fin_net_income / fin_total_equity)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_roi_scenario_analysis", "moduleId": "fin_scenarios_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROI - Scenario Analysis", "units": null, "w": "184", "x": 277, "y": 171, "z": 1}, {"color": "#cccccc", "definition": "result = xr.where(fin_total_assets == 0., 0., fin_net_income / fin_total_assets)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fin_roa_scenario_analysis", "moduleId": "fin_scenarios_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ROA - Scenario Analysis", "units": null, "w": "184", "x": 277, "y": 215, "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h11 {\n\t   font-size: 3.5em;\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 30%;\n      height: 30%;\n      padding-bottom: 20%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 3em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h11 style = \"color:#5f6670;\">Manufacturing Business Demo</h11>\n  </div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1567\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Data Analytics</h3><h4>Analyze Data & Trends</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Budgeting</h3><h4>Plan your Expenses</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1568\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Business Planning</h3><h4>Sales Forecast, Data Driven Planning and more</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1660\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Control</h3><h4>Actual vs. Budget Performance</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-check-square-o fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1753\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Scenarios</h3><h4>Dynamic Simulations</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-sliders fa-4x\"></i></div></div></div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"1565\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Machine Learning</h3><h4>ML Algorithms</h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "main_menu_blocks_by_capabilities_1", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Main Menu Blocks - By Capabilities", "units": null, "w": "184", "x": 531, "y": 68, "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    result = fin_pl_report\nelse:\n    result = subscript(fin_pl_report, inputs_scenarios, 'Base Scenario')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_pl_report_base_scenario", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "P&L Report - Base Scenario", "units": null, "w": "184", "x": 49, "y": 123, "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    result = empty_cube_time_scenarios_iterations\nelse:\n    result = subscript(empty_cube_time_scenarios_iterations, inputs_scenarios, \"Base Scenario\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "empty_cube_time_scenarios_iterations_base_scen", "moduleId": "ast_time_rel_indexes_variables_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Empty Cube with Base Scenario", "units": null, "w": "184", "x": 697, "y": 460, "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    result = fin_balance_sheet_report\nelse:\n    result = subscript(fin_balance_sheet_report, inputs_scenarios, 'Base Scenario')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_bs_report_base_scenario", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Balance Sheet Report - Base Scenario", "units": null, "w": "184", "x": 49, "y": 464, "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    result = fin_cash_flow_report\nelse:\n    result = subscript(fin_cash_flow_report, inputs_scenarios, 'Base Scenario')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ctr_cf_report_base_scenario", "moduleId": "ctr_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cash Flow Report - Base Scenario", "units": null, "w": "184", "x": 49, "y": 656, "z": 1}, {"color": "#6699FF", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "building_blocks", "moduleId": "cdm_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Building Blocks", "units": null, "w": "184", "x": 280, "y": 209, "z": 1}, {"color": "#FF794C", "definition": "result = excel_connection( current_path + \"/Data/Data.xlsx\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "datos", "moduleId": "inputs_building_blocks", "nodeClass": "constant", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Datos", "units": null, "w": "184", "x": 246, "y": 71, "z": 1}, {"color": "#00FF00", "definition": "result = pandas_from_excel( datos, sheetName=\"Catalogo\") ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "catalogo", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Catalogo", "units": null, "w": "184", "x": 352, "y": 169, "z": 1}, {"color": "#00FF00", "definition": "result = pandas_from_excel( datos, sheetName=\"Tipo\") ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "tipo", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Tipo", "units": null, "w": "184", "x": 122, "y": 173, "z": 1}, {"color": "#00FF00", "definition": "result = pandas_from_excel( datos, sheetName=\"Comm_BG\") ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "commodity_bg", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Commodity BG", "units": null, "w": "184", "x": 352, "y": 219, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"ventas_hist\") \n_df.columns = ['SKU',\t'2017.01',\t'2017.02',\t'2017.03',\t'2017.04',\t'2017.05',\t'2017.06',\t'2017.07',\t'2017.08',\t'2017.09',\t'2017.10',\t'2017.11',\t'2017.12',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07']\n_df = pd.melt(_df,['SKU'],['2017.01',\t'2017.02',\t'2017.03',\t'2017.04',\t'2017.05',\t'2017.06',\t'2017.07',\t'2017.08',\t'2017.09',\t'2017.10',\t'2017.11',\t'2017.12',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Ventas Hist\")\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ventas_historicas", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ventas Historicas", "units": null, "w": "184", "x": 352, "y": 319, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"Estadistico_JDA\") \n_df.columns = ['SKU',\t'2017.01',\t'2017.02',\t'2017.03',\t'2017.04',\t'2017.05',\t'2017.06',\t'2017.07',\t'2017.08',\t'2017.09',\t'2017.10',\t'2017.11',\t'2017.12',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07']\n_df = pd.melt(_df,['SKU'],['2017.01',\t'2017.02',\t'2017.03',\t'2017.04',\t'2017.05',\t'2017.06',\t'2017.07',\t'2017.08',\t'2017.09',\t'2017.10',\t'2017.11',\t'2017.12',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Estadistico JDA\")\nresult = _df.drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA", "units": null, "w": "184", "x": 352, "y": 369, "z": 1}, {"color": "#00FF00", "definition": "result = pandas_from_excel( datos, sheetName=\"Precio_venta\").drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precio_venta", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precio Venta", "units": null, "w": "184", "x": 352, "y": 267, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"Final_Demand_Plan\") \n_df.columns = ['SKU',\t'2017.01',\t'2017.02',\t'2017.03',\t'2017.04',\t'2017.05',\t'2017.06',\t'2017.07',\t'2017.08',\t'2017.09',\t'2017.10',\t'2017.11',\t'2017.12',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07']\n_df = pd.melt(_df,['SKU'],['2017.01',\t'2017.02',\t'2017.03',\t'2017.04',\t'2017.05',\t'2017.06',\t'2017.07',\t'2017.08',\t'2017.09',\t'2017.10',\t'2017.11',\t'2017.12',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Final_Demand_Plan_lect\")\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_plan_lect", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand Plan", "units": null, "w": "184", "x": 352, "y": 422, "z": 1}, {"color": "#4cbcff", "definition": "_comm_y_bg = sku_a_comm_con_index.copy()\n_comm_y_bg[\"SKU\"] = _comm_y_bg[\"SKU\"].astype(str)\n\n_estadistico = estadistico_jda_1.copy()#.fillna(0)\n_estadistico[\"SKU\"] = _estadistico[\"SKU\"].astype(str)\n_estadistico = _estadistico.merge(_comm_y_bg,on=[\"SKU\"],how=\"left\")\n \n_input_demanda = input_demanda_formulario.copy()#.fillna(0)\n_input_demanda[\"time\"] = _input_demanda[\"time\"].astype(str)\n_input_demanda[\"SKU\"] = _input_demanda[\"SKU\"].astype(str)\n#_input_demanda = input_mkt_lect.copy()\n#_input_demanda = _input_demanda.rename(columns={\"Input MKT\":\"Input Demanda\"})\n\n_df = _estadistico.merge(_input_demanda,on=[\"SKU\",\"time\"])\n_df[\"A\u00f1o\"] = [x[0:4] for x in _df['time']] \n_df[\"Mes\"] = [x[5:7] for x in _df['time']] \n\n_df[\"comm_index\"] = _df[\"comm_index\"].fillna(\"s.d.\")\n_df[\"bg_index\"] = _df[\"bg_index\"].fillna(\"s.d.\")\n_df[\"division_index\"] = _df[\"division_index\"].fillna(\"s.d.\")\n_df[\"abc\"] = _df[\"abc\"].fillna(\"s.d.\")\n_df[\"abc\"].replace(\"\",\"s.d.\",inplace=True) \n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_input_demanda_aux", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Demanda", "units": null, "w": "184", "x": 372, "y": 355, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_aux.copy()\n_df[\"Estadistico JDA\"] = _df[\"Estadistico JDA\"].astype(float)\n_df[\"Estad.JDA + In.Demanda\"] = _df[\"Estadistico JDA\"].fillna(0)+_df[\"Input Demanda\"].fillna(0)\n \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_input_demanda", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Demanda", "units": null, "w": "184", "x": 372, "y": 404, "z": 1}, {"color": "#4CBCFF", "definition": "_estadistico_input_demanda = estadistico_jda_input_demanda.copy()#.fillna(0)\n_input_mkt = input_mkt_formulario.copy()#.fillna(0)\n_input_mkt[\"time\"] = _input_mkt[\"time\"].astype(str)\n_input_mkt[\"SKU\"] = _input_mkt[\"SKU\"].astype(str)\n\n_df = _estadistico_input_demanda.merge(_input_mkt,on=[\"SKU\",\"time\"])\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_input_demanda_mkt_aux", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Demanda + MKT", "units": null, "w": "184", "x": 372, "y": 458, "z": 1}, {"color": "#F3F3F3", "definition": "_df = estad_jda_input_demanda__mkt_vtas_compos_aux.copy()\n\n_df = _df[[\"time\",\"Estadistico JDA\", \"Input Demanda\",\"Input MKT\", \"Input Ventas\",\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"]]\n_df.columns = [\"time\",\" Estadistico JDA\", \" Input Demanda\",\" Input MKT\", \" Input Ventas\",\"Final Demand Plan\"]\n_df = pd.melt(_df,[\"time\"],[\" Estadistico JDA\",\" Input Demanda\", \" Input MKT\", \" Input Ventas\",\"Final Demand Plan\"],\"Componente\",\"valor\")\n\n_df = _df.set_index([\"time\",\"Componente\"])\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estad_jda_input_demanda__mkt_vtas_compos", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Dda + MKT + Ventas Composicion", "units": null, "w": "184", "x": 1402, "y": 608, "z": 1}, {"color": "#4CBCFF", "definition": "_estadistico_input_demanda_mkt = estadistico_jda_input_demanda_mkt.copy()\n_input_ventas = input_ventas_formulario.copy()\n_input_ventas[\"time\"] = _input_ventas[\"time\"].astype(str)\n_input_ventas[\"SKU\"] = _input_ventas[\"SKU\"].astype(str)\n\n_df = _estadistico_input_demanda_mkt.merge(_input_ventas,on=[\"SKU\",\"time\"]) \n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_input_demanda_mkt_ventas_aux", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Demanda + MKT + Ventas", "units": null, "w": "184", "x": 372, "y": 558, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_ventas_aux.copy()\n_df[\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"] = _df[\"Estad.JDA + In.Demanda + In.MKT\"].fillna(0)+_df[\"Input Ventas\"].fillna(0)\n \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_input_demanda_mkt_ventas", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Demanda + MKT + Ventas", "units": null, "w": "184", "x": 372, "y": 608, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_aux.copy()\n_df[\"Estad.JDA + In.Demanda + In.MKT\"] = _df[\"Estad.JDA + In.Demanda\"].fillna(0)+_df[\"Input MKT\"].fillna(0)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_input_demanda_mkt", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Demanda + MKT", "units": null, "w": "184", "x": 372, "y": 508, "z": 1}, {"color": "#4cbcff", "definition": "_comm_y_bg = sku_a_comm_con_index.copy()\n_comm_y_bg[\"SKU\"] = _comm_y_bg[\"SKU\"].astype(str)\n\n_df = final_demand_plan_histproy.copy()\n_df[\"SKU\"] = _df[\"SKU\"].astype(str)\n\n_df = _df.merge(_comm_y_bg,on=[\"SKU\"],how=\"left\")\n_df[\"comm_index\"] = _df[\"comm_index\"].fillna(\"s.d.\")\n_df[\"bg_index\"] = _df[\"bg_index\"].fillna(\"s.d.\")\n_df[\"division_index\"] = _df[\"division_index\"].fillna(\"s.d.\") \n_df[\"abc\"] = _df[\"abc\"].fillna(\"s.d.\") \n_df[\"abc\"].replace(\"\",\"s.d.\",inplace=True) \n_df = _df.drop_duplicates()\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_plan", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand Plan", "units": null, "w": "184", "x": 639, "y": 667, "z": 1}, {"color": "#4CBCFF", "definition": "_comm_y_bg = sku_a_comm_con_index.copy()\n_comm_y_bg[\"SKU\"] = _comm_y_bg[\"SKU\"].astype(str)\n\n_df = ventas_historicas.copy()\n_df[\"SKU\"] = _df[\"SKU\"].astype(str)\n_df = _df.merge(_comm_y_bg,on=[\"SKU\"],how=\"left\")\n_df[\"A\u00f1o\"] = [x[0:4] for x in _df['time']] \n_df[\"Mes\"] = [x[5:7] for x in _df['time']] \n_df = _df[_df[\"Ventas Hist\"]!=0]\n_df[\"Real\"] = \"Real\"\n_df[\"compare\"] = _df[['A\u00f1o',\"Real\"]].apply(lambda x: ' '.join(x), axis=1)\n\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_real_por_ano", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta Real por A\u00f1o", "units": null, "w": "184", "x": 899, "y": 355, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "months", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Months", "units": null, "w": "184", "x": 107, "y": 61, "z": 1}, {"color": "#4CBCFF", "definition": "_df = catalogo.copy()\n_df = _df.rename(columns={\"MMM_ID\":\"SKU\"})\n_df = _df[[\"SKU\",\"DESCRIPTION\",\"COMM\",\"ABC\"]]\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sku_a_comm", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "SKU a Comm", "units": null, "w": "184", "x": 639, "y": 249, "z": 1}, {"color": "#9999ff", "definition": "_aux = pd.Index( sku_a_comm_con_index[\"comm_index\"].drop_duplicates())\nresult = concat_index( _aux, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "comm_index", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "COMM", "units": null, "w": "184", "x": 325, "y": 170, "z": 1}, {"color": "#9999ff", "definition": "_aux = pd.Index( sku_a_comm_con_index[\"bg_index\"].drop_duplicates() )\nresult = concat_index( _aux, 'B2','B3','B4','B5','s.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bg_index", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "BG", "units": null, "w": "184", "x": 325, "y": 114, "z": 1}, {"color": "#9999ff", "definition": "_aux = pd.Index( sku_a_comm_con_index[\"division_index\"].drop_duplicates() )\nresult = concat_index( _aux, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "division_index", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DIVISION", "units": null, "w": "184", "x": 325, "y": 61, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(time,20,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "selector_time", "moduleId": "accuracy_module", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Selector Time", "units": null, "w": "184", "x": 144, "y": 320, "z": 1}, {"color": "#4CFFA6", "definition": "result = selector_time", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a0227022cf60c4e0bb5c62793b3b1a8aa", "moduleId": "accuracy_module", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "selector_time", "picture": null, "title": "Selector Time", "units": null, "w": "184", "x": 144, "y": 320, "z": 1}, {"color": "#4CBCFF", "definition": "_df = demand_real_proy_pesos.copy()\n_df = _df[_df[\"time\"]==ultimo_mes_datos]\n_df = _df.drop([\"time\"],axis=1)\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index\"] = \"All\"\n_df_all_comm = _df_all_comm.drop_duplicates()\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index\"] = \"All\"\n_df_all_division = _df_all_division.drop_duplicates()\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index\"] = \"All\"\n_df_all_bg = _df_all_bg.drop_duplicates()\n_df = pd.concat([_df,_df_all_bg])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df[_df[\"comm_index\"]==comm_selector]\n\n_df = _df.drop([\"bg_index\",\"division_index\",\"comm_index\"],axis=1)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_aux", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy Aux", "units": null, "w": "184", "x": 143, "y": 128, "z": 1}, {"color": "#F3F3F3", "definition": "_df = demand_real_y_plan_hasta_input_venta_aux.copy()\n#_df = _df[[\"SKU\",\"Mes\",\"compare\",\"comm_index\",\"bg_index\",\"division_index\",\"value\"]]\n_df = _df.set_index([\"Mes\",\"compare\"])\n\nresult = _df ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demand_real_y_plan_hasta_input_venta", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Real y Plan hasta Input Venta", "units": null, "w": "184", "x": 1402, "y": 559, "z": 1}, {"color": "#F3F3F3", "definition": "_df = accuracy_aux_2.copy()\n_df = _df[[\"SKU\", \"DESCRIPTION\", \"FCST\", \"Venta\",   \"Asertividad\", \"cluster\", \"Dif ABS\",\"WAPA\", \"Dif ABS $ USD\",\"%\"]]\n_df = _df.sort_values(by=\"%\",ascending=False)\n_df = _df.reset_index().reset_index() \n_df = _df.drop(\"index\",axis=1)  \n_df[\"Rank\"] = _df[\"level_0\"]+1 \n_df = _df.drop(\"level_0\",axis=1)  \n_df.columns = [\"                       SKU\",\"                       DESCRIPTION\",\t\"                      FCST\", \"                     Venta\",\t\"                    Asertividad\",\t\"                   cluster\",\t\"                  Dif ABS\",\"                WAPA\",\"  Dif ABS $ USD\",\t\" %\",\"Rank\"]\n#_df = pd.melt(_df,[\"Rank\"],\t[\"                       SKU\",\"                       DESCRIPTION\",\"                      FCST\",\"                     Venta\",\t\"                    Asertividad\",\t\"                   cluster\",\t\"                  Dif ABS\",\"                WAPA\",\t\"  Dif ABS $ USD\",\" %\"])    \n#_df = _df.set_index([\"Rank\", \"variable\"])\n_df[\"Rank2\"] = _df[\"Rank\"].astype(str).str.zfill(4)\n_df[\"SKU descripcion\"] = _df[\"Rank2\"] + \" - \"  + _df[\"                       SKU\"].astype(str) + \" - \" + _df[\"                       DESCRIPTION\"]\n_df = _df.drop(\"Rank\",axis=1)  \n_df = _df.set_index([\"SKU descripcion\"])\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_indexado", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy", "units": null, "w": "184", "x": 647, "y": 91, "z": 1}, {"color": "#F3F3F3", "definition": "_df = accuracy_aux_2.copy()\n_df = _df[[\"SKU\",\"DESCRIPTION\",\"Venta\",\"Precio promedio\",\"Venta $ USD\"]]\n_df.columns = [\"  SKU\",\"  DESCRIPTION\",\"  Venta\",\" Precio promedio\",\"Venta $ USD\"]\n\n_df = _df.sort_values(by=\"Venta $ USD\",ascending=False)\n_df = _df.reset_index().reset_index()\n_df[\"Rank\"] = _df[\"level_0\"]+1\n_df = _df.drop([\"index\",\"level_0\"],axis=1) \n\n#_df = pd.melt(_df,[\"Rank\"],[\"  SKU\",\"  DESCRIPTION\",\"  Venta\",\" Precio promedio\",\"Venta $ USD\"]) \n#_df = _df.set_index([\"Rank\",\"variable\"]) \n_df[\"Rank2\"] = _df[\"Rank\"].astype(str).str.zfill(4)\n_df[\"SKU descripcion\"] = _df[\"Rank2\"] + \" - \"  + _df[\"  SKU\"].astype(str) + \" - \" + _df[\"  DESCRIPTION\"]\n_df = _df.drop(\"Rank\",axis=1)  \n_df = _df.set_index([\"SKU descripcion\"])\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ventas_hist_top", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ventas Hist Top", "units": null, "w": "184", "x": 647, "y": 169, "z": 1}, {"color": "#FFFF00", "definition": "result = \"2019.07\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ultimo_mes_datos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ultimo Mes Datos", "units": null, "w": "184", "x": 651, "y": 292, "z": 1}, {"color": "#4CBCFF", "definition": "_real = venta_real_seleccion.copy()\n_real = _real[_real[\"time\"]<=ultimo_mes_datos]\n_real = _real.rename(columns={\"Ventas Hist\":\"value\"})\n_real = _real[[\"Mes\",\"compare\",\"value\"]]\n\n_df = estad_jda_input_demanda__mkt_vtas_compos_aux.copy()\n_df = _df[['time','Estad.JDA + In.Demanda + In.MKT + In.Ventas',\"A\u00f1o\",\"Mes\"]] \n_df = _df[_df[\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"]!=0]\n_df [\"Real\"] = \"Plan\"\n_df[\"compare\"] = _df[['A\u00f1o',\"Real\"]].apply(lambda x: ' '.join(x), axis=1)\n_df = _df.rename(columns={\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\":\"value\"})\n_df = _df[[\"Mes\",\"compare\",\"value\"]]\n\n_df = pd.concat([_df,_real]).fillna(0)\n\nresult = _df ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demand_real_y_plan_hasta_input_venta_aux", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Real y Plan hasta Input Venta Aux", "units": null, "w": "184", "x": 1146, "y": 559, "z": 1}, {"color": "#FFFF00", "definition": "result = \"06\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ultimo_mes_datos_season", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ultimo Mes Datos Season", "units": null, "w": "184", "x": 651, "y": 406, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"Venta_MTO_pesos\") \n_df.columns = ['COMM',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07']\n_df = pd.melt(_df,['COMM'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Venta MTO $\")\n_df[\"Venta MTO $\"] = _df[\"Venta MTO $\"].astype(float)\nresult = _df.drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_mto_pesos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta MTO $", "units": null, "w": "184", "x": 122, "y": 224, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"Venta_Frontera_pesos\") \n_df.columns = ['COMM',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07']\n_df = pd.melt(_df,['COMM'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Venta Frontera $\")\n_df[\"Venta Frontera $\"] = _df[\"Venta Frontera $\"].astype(float)\nresult = _df.drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_frontera_pesos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta Frontera $", "units": null, "w": "184", "x": 122, "y": 274, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"GCS_QOR\") \n_df.columns = ['COMM',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12']\n_df = pd.melt(_df,['COMM'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12'],\"time\",\"GCS QOR $\")\n_df[\"GCS QOR $\"] = _df[\"GCS QOR $\"].astype(float)\nresult = _df.drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "gcs_qor_pesos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "GCS QOR $", "units": null, "w": "184", "x": 122, "y": 322, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"Venta_2019_pesos\") \n_df.columns = ['COMM',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12']\n_df = pd.melt(_df,['COMM'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12'],\"time\",\"Venta 2019 $\")\n_df[\"Venta 2019 $\"] = _df[\"Venta 2019 $\"].astype(float)\nresult = _df.drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_2019_pesos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta 2019 $", "units": null, "w": "184", "x": 122, "y": 476, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"Venta_2018_pesos\") \n_df.columns = ['COMM',\t'2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12']\n_df = pd.melt(_df,['COMM'],['2018.01',\t'2018.02',\t'2018.03',\t'2018.04',\t'2018.05',\t'2018.06',\t'2018.07',\t'2018.08',\t'2018.09',\t'2018.10',\t'2018.11',\t'2018.12'],\"time\",\"Venta 2018 $\")\n_df[\"Venta 2018 $\"] = _df[\"Venta 2018 $\"].astype(float)\nresult = _df.drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_2018_pesos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta 2018 $", "units": null, "w": "184", "x": 122, "y": 424, "z": 1}, {"color": "#4cbcff", "definition": "_final_demand = final_demand_pesos.copy()\n_comm = commodity_bg.copy()\n\n_final_demand = final_demand_pesos.copy()\n_final_demand = _final_demand[_final_demand[\"time\"]<=\"2019.12\"]\n_final_demand = _final_demand[_final_demand[\"time\"]>=\"2019.01\"]\n_final_demand[\"Mes\"] = [x[5:7] for x in _final_demand['time']]\n_final_demand = _final_demand.drop(\"time\",axis=1)\n\n_mto = venta_mto_pesos.copy()\n_mto = _mto[_mto[\"time\"]<=\"2019.12\"]\n_frontera = venta_frontera_pesos.copy()\n_frontera = _frontera[_frontera[\"time\"]<=\"2019.12\"]\n_qor = qor_pesos.copy()\n_qor[\"time\"] = _qor[\"time\"].astype(str)\n_qor[\"COMM\"] = _qor[\"COMM\"].astype(str)\n_gcs_qor = gcs_qor_pesos.copy()\n_vta_2018 = venta_2018_pesos.copy()\n_vta_2018[\"Mes\"] = [x[5:7] for x in _vta_2018['time']] \n_vta_2018 = _vta_2018.drop(\"time\",axis=1)\n_vta_2019 = venta_2019_pesos.copy()\n_vta_2019[\"COMM\"] = _vta_2019[\"COMM\"].astype(str)\n\n_df = _mto.merge(_frontera,on=[\"COMM\",\"time\"],how=\"outer\")\n_df = _df.merge(_qor,on=[\"COMM\",\"time\"],how=\"outer\")\n_df = _df.merge(_gcs_qor,on=[\"COMM\",\"time\"],how=\"outer\")\n_df = _df.merge(_vta_2019,on=[\"COMM\",\"time\"],how=\"outer\")\n_df[\"Mes\"] = [x[5:7] for x in _df['time']]\n_df = _df.drop(\"time\",axis=1)\n_df = _df.merge(_vta_2018,on=[\"COMM\",\"Mes\"],how=\"outer\")\n_df = _df.merge(_comm,on=\"COMM\",how=\"outer\")\n_df = _df.drop(\"BUSINESS GROUP\",axis=1) \n_df = _df.rename(columns={\"COMM\":\"comm_index\"})\n_df = _df.rename(columns={\"BG\":\"bg_index\"})\n_df = _df.rename(columns={\"DIVISION\":\"division_index\"})\n\n_df = _df.merge(_final_demand,on=[\"Mes\",\"comm_index\",\"bg_index\",\"division_index\"],how=\"outer\")\n_df[\"comm_index\"] = _df[\"comm_index\"].fillna(\"s.d.\")\n_df[\"bg_index\"] = _df[\"bg_index\"].fillna(\"s.d.\")\n_df[\"division_index\"] = _df[\"division_index\"].fillna(\"s.d.\") \n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df[_df[\"comm_index\"]==comm_selector]\n\n_df = _df.drop([\"bg_index\",\"division_index\",\"comm_index\"],axis=1)\n_df = _df.groupby(\"Mes\").sum().reset_index()\n_df = _df[[\"Mes\", \"Venta MTO $\", \"Venta Frontera $\", \"GCS QOR $\",\"QOR $\", \"Venta 2019 $\", \"Venta 2018 $\", \"Final Demand Plan $\"]]\n_df.columns = [\"Mes\", \"           Venta MTO $\", \"          Venta Frontera $\", \"        GCS QOR $\", \"       QOR $\",\"     Venta 2019 $\", \"      Venta 2018 $\", \"            Final Demand Plan $\"]\n_df[\" IBP (Domestic / GCS)\"] = _df[\"            Final Demand Plan $\"].fillna(0)+_df[\"        GCS QOR $\"].fillna(0)+_df[\"           Venta MTO $\"].fillna(0)+_df[\"          Venta Frontera $\"].fillna(0)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ibp_aux", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "IBP Aux", "units": null, "w": "184", "x": 84, "y": 243, "z": 1}, {"color": "#F3F3F3", "definition": "_df = ibp_aux.copy()\n\n_df[\"DP vs QOR\"] = _df[\" IBP (Domestic / GCS)\"]/_df[\"       QOR $\"]-1\n_df[\"DP vs Sales\"] = 1-_df[\"     Venta 2019 $\"]/_df[\" IBP (Domestic / GCS)\"]\n_df[\"Sales 2019 vs Sales 2018\"] = _df[\"     Venta 2019 $\"]/_df[\"      Venta 2018 $\"]-1\n\n_df[\"DP vs QOR\"].replace(-1,0,inplace=True)\n_df[\"DP vs Sales\"].replace(1,0,inplace=True)\n_df[\"Sales 2019 vs Sales 2018\"].replace(-1,0,inplace=True)\n\n_df[\"           Venta MTO $\"] = _df[\"           Venta MTO $\"]/1000\n_df[\"          Venta Frontera $\"] = _df[\"          Venta Frontera $\"]/1000\n_df[\"        GCS QOR $\"] = _df[\"        GCS QOR $\"]/1000\n_df[\"       QOR $\"] = _df[\"       QOR $\"]/1000\n_df[\"     Venta 2019 $\"] = _df[\"     Venta 2019 $\"]/1000\n_df[\"      Venta 2018 $\"] = _df[\"      Venta 2018 $\"]/1000\n_df[\"            Final Demand Plan $\"] = _df[\"            Final Demand Plan $\"]/1000\n_df[\" IBP (Domestic / GCS)\"] = _df[\" IBP (Domestic / GCS)\"]/1000\n\n_df = pd.melt(_df,[\"Mes\", ],[\"           Venta MTO $\", \"          Venta Frontera $\", \"        GCS QOR $\", \"       QOR $\",\"     Venta 2019 $\", \"      Venta 2018 $\", \"            Final Demand Plan $\",\" IBP (Domestic / GCS)\",\"DP vs QOR\",\"DP vs Sales\",\"Sales 2019 vs Sales 2018\"])\n_df = _df.set_index([\"Mes\",\"variable\"]) \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ibp", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "IBP", "units": null, "w": "184", "x": 366, "y": 243, "z": 1}, {"color": "#00FF00", "definition": "_df = pandas_from_excel( datos, sheetName=\"QOR\") \n_df.columns = ['COMM',\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12'] \n_df = pd.melt(_df,['COMM'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12'],\"time\",\"QOR $\")\n_df[\"QOR $\"] = _df[\"QOR $\"].astype(float)\nresult = _df.drop_duplicates()  ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "qor_pesos", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "QOR $", "units": null, "w": "184", "x": 122, "y": 374, "z": 1}, {"color": "#F3F3F3", "definition": "_df = ibp_aux.copy()\n_df = _df[[\"Mes\",  \"       QOR $\",\"     Venta 2019 $\"]]\n_df = _df[_df[\"Mes\"]<=ultimo_mes_datos_season]\n_df = _df.drop(\"Mes\",axis=1)\n_df[\"     Venta 2019 $\"] = _df[\"     Venta 2019 $\"].fillna(0)\n_df[\"       QOR $\"] = _df[\"       QOR $\"].fillna(0)\n\n_df = _df[[\"     Venta 2019 $\",\"       QOR $\"]]  \n_df = _df.sum() \n_df[\"YTD vs QOR\"] = _df[\"     Venta 2019 $\"]/_df[\"       QOR $\"]-1\nresult = _df[[\"YTD vs QOR\"]]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ytd_vs_qor", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "YTD vs QOR", "units": null, "w": "184", "x": 84, "y": 319, "z": 1}, {"color": "#F3F3F3", "definition": "_df = ibp_aux.copy()\n_df = _df[[\"Mes\",  \"       QOR $\",\" IBP (Domestic / GCS)\"]]\n_df = _df[_df[\"Mes\"]>=primer_mes_proy_season]\n_df = _df.drop(\"Mes\",axis=1)\n_df[\" IBP (Domestic / GCS)\"] = _df[\" IBP (Domestic / GCS)\"].fillna(0)\n_df[\"       QOR $\"] = _df[\"       QOR $\"].fillna(0)\n\n_df = _df[[\" IBP (Domestic / GCS)\",\"       QOR $\"]]\n_df = _df.sum()\n_df[\"YTG vs QOR\"] = _df[\" IBP (Domestic / GCS)\"]/_df[\"       QOR $\"]-1\nresult = _df[[\"YTG vs QOR\"]]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ytg_vs_qor", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "YTG vs QOR", "units": null, "w": "184", "x": 84, "y": 381, "z": 1}, {"color": "#FFFF00", "definition": "result = \"07\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "primer_mes_proy_season", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Primer Mes Proy Season", "units": null, "w": "184", "x": 651, "y": 468, "z": 1}, {"color": "#F3F3F3", "definition": "_df = ibp_aux.copy()\n\"\"\"_df = _df[[\"Mes\", \"       QOR $\",\"IBP (Domestic / GCS)\",\"     Venta 2019 $\",\"      Venta 2018 $\"]]\n_df[\"IBP (Domestic / GCS)\"] = _df[\"IBP (Domestic / GCS)\"].fillna(0)\n_df[\"       QOR $\"] = _df[\"       QOR $\"].fillna(0)\n_df[\"     Venta 2019 $\"] = _df[\"     Venta 2019 $\"].fillna(0)\n_df[\"      Venta 2018 $\"] = _df[\"      Venta 2018 $\"].fillna(0)\n\n_df[\"DP vs QOR\"] = _df[\"IBP (Domestic / GCS)\"]/_df[\"       QOR $\"]-1\n_df[\"DP vs Sales\"] = 1-_df[\"     Venta 2019 $\"]/_df[\"IBP (Domestic / GCS)\"]\n_df[\"Sales 2019 vs Sales 2018\"] = _df[\"     Venta 2019 $\"]/_df[\"      Venta 2018 $\"]-1\n\n_df[\"DP vs QOR\"].replace(-1,0,inplace=True)\n_df[\"DP vs Sales\"].replace(1,0,inplace=True)\n_df[\"Sales 2019 vs Sales 2018\"].replace(-1,0,inplace=True)\n_df = _df[[\"Mes\",\"DP vs QOR\",\"DP vs Sales\",\"Sales 2019 vs Sales 2018\"]]\n\n_df = pd.melt(_df,[\"Mes\"],[\"DP vs QOR\",\"DP vs Sales\",\"Sales 2019 vs Sales 2018\"])\n_df = _df.set_index([\"Mes\",\"variable\"])\n\"\"\"\nresult = 0#_df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "variacion_ibp", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Variacion IBP", "units": null, "w": "184", "x": 523, "y": 433, "z": 1}, {"color": "#9999ff", "definition": "_df0 = sku_a_comm_con_index.copy()\n_df0 = _df0.drop([\"SKU\", \"comm_index\"],axis=1).drop_duplicates() \n\n_df_all = _df0.copy()\n_df_all[\"bg_index\"] = \"All\" \n_df = pd.concat([_df_all,_df0])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df.sort_values(by=\"division_index\")\n_df = _df#[\"division_index\"]\n_aux = pd.Index( _df[\"division_index\"] )\nresult = concat_index('All', _aux, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "division_in", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DIVISION Index", "units": null, "w": "184", "x": 546, "y": 114, "z": 1}, {"color": "#9999ff", "definition": "_df = sku_a_comm_con_index.copy()\n_aux = pd.Index( _df[\"bg_index\"].drop_duplicates())\nresult = concat_index( 'All',_aux, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bg_in", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "BG Index", "units": null, "w": "184", "x": 546, "y": 61, "z": 1}, {"color": "#9999ff", "definition": "_df0 = sku_a_comm_con_index.copy()\n_df0 = _df0.drop([\"SKU\"],axis=1).drop_duplicates() \n\n_df_all = _df0.copy()\n_df_all[\"division_index\"] = \"All\" \n_df = pd.concat([_df_all,_df0])\n\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df.sort_values(by=\"comm_index\")\n_aux = pd.Index( _df[\"comm_index\"])\nresult = concat_index('All', _aux, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "comm_in", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "COMM Index", "units": null, "w": "184", "x": 546, "y": 170, "z": 1}, {"color": "#4CFFA6", "definition": "result = bg_selector", "description": null, "errorInDef": true, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a08bfc3f43e50496fbc828d540d7b926f", "moduleId": "demand_planning_building_blocks", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "bg_selector", "picture": null, "title": "BG Selector", "units": null, "w": "255", "x": 864, "y": 126, "z": "2"}, {"color": "#4CFFA6", "definition": "result = division_selector", "description": null, "errorInDef": true, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "aa1fa96db317e4501934da53d4f7a5e45", "moduleId": "demand_planning_building_blocks", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "division_selector", "picture": null, "title": "DIVISION Selector", "units": null, "w": "255", "x": 864, "y": 166, "z": "2"}, {"color": "#4CFFA6", "definition": "result = comm_selector", "description": null, "errorInDef": true, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a74630a126b5d4973a7505aa77c365a04", "moduleId": "demand_planning_building_blocks", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "comm_selector", "picture": null, "title": "COMM Selector", "units": null, "w": "255", "x": 864, "y": 205, "z": "2"}, {"color": "#4CFFA6", "definition": "result = sku_selector", "description": null, "errorInDef": true, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a487ef700c0f548d4a31201e264caaa59", "moduleId": "demand_planning_building_blocks", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "sku_selector", "picture": null, "title": "SKU Selector", "units": null, "w": "255", "x": 864, "y": 246, "z": "2"}, {"color": null, "definition": "result = choice( bg_in,1, includeAll=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "bg_selector", "moduleId": "demand_planning_building_blocks", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "BG Selector", "units": null, "w": "255", "x": 865, "y": 126, "z": 1}, {"color": null, "definition": "result = choice( division_in,1, includeAll=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "division_selector", "moduleId": "demand_planning_building_blocks", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DIVISION Selector", "units": null, "w": "255", "x": 865, "y": 166, "z": 1}, {"color": null, "definition": "result = choice( comm_in,1, includeAll=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "comm_selector", "moduleId": "demand_planning_building_blocks", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "COMM Selector", "units": null, "w": "255", "x": 865, "y": 205, "z": 1}, {"color": "#9999ff", "definition": "_df0 = sku_a_comm_con_index.copy()\n_df0 = _df0.drop([\"division_index\",\"bg_index\"],axis=1).drop_duplicates() \n_df0[\"SKU\"] = _df0[\"SKU\"].astype(str)\n\n_df_all = _df0.copy()\n_df_all[\"comm_index\"] = \"All\" \n_df = pd.concat([_df_all,_df0])\n\n_df = _df[_df[\"comm_index\"]==comm_selector]\n#_df = _df.sort_values(by=\"SKU\")\n_aux = pd.Index( _df[\"SKU\"] )\nresult = concat_index('All',_aux )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sku_in", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "SKU Index", "units": null, "w": "184", "x": 546, "y": 223, "z": 1}, {"color": null, "definition": "result = choice( sku_in,1, includeAll=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sku_selector", "moduleId": "demand_planning_building_blocks", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "SKU Selector", "units": null, "w": "255", "x": 865, "y": 246, "z": 1}, {"color": "#9999ff", "definition": "_df = input_demanda_lect.copy()\n_df = _df[[\"SKU\",\"time\"]]\n_df = _df.drop_duplicates(subset=\"SKU\") \n_df = _df.sort_values(by=\"SKU\")\n\nresult = pd.Index( _df[\"SKU\"] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sku_in_para_input", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "SKU Index Para Input", "units": null, "w": "184", "x": 107, "y": 222, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_ventas.copy()\n_df = _df[_df[\"A\u00f1o\"]>=\"2019\"]\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df[_df[\"comm_index\"]==comm_selector]\n_df = _df[_df[\"SKU\"]==sku_selector]\n\n_df = _df.drop([\"bg_index\",\"division_index\",\"comm_index\",\"SKU\"],axis=1)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estad_jda_input_demanda__mkt_vtas_compos_aux", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA + Input Dda + MKT + Ventas Composicion", "units": null, "w": "184", "x": 900, "y": 608, "z": 1}, {"color": "#4CBCFF", "definition": "_df = venta_real_por_ano.copy()\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df[_df[\"comm_index\"]==comm_selector]\n_df = _df[_df[\"SKU\"]==sku_selector]\n\n_df = _df.drop([\"bg_index\",\"division_index\",\"comm_index\",\"SKU\"],axis=1)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_real_seleccion", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta Real Seleccion", "units": null, "w": "184", "x": 899, "y": 508, "z": 1}, {"color": "#4CBCFF", "definition": "_df = accuracy_aux.copy()\n\n_df[\"Asertividad\"] = _df[\"Venta\"]/_df[\"FCST\"]\ndef f(row):\n    if row['Asertividad'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster'] = _df.apply(f, axis=1)\n_df[\"Dif ABS\"] = (_df[\"FCST\"] - _df[\"Venta\"]).abs()\n_df[\"Error\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"BIAS\"] = (_df[\"FCST\"]-_df[\"Venta\"])/_df[\"FCST\"]\n_df[\"WAPA\"] = 1- _df[\"Dif ABS\"]/_df[\"Venta\"]\n\n_venta_total = _df[\"Venta\"].sum()\n_df[\"Pond\"] = _df[\"Venta\"]/_venta_total\n_df[\"MAPE\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"WMAPE\"] = _df[\"MAPE\"]*_df[\"Pond\"]\n\n_df[\"FCST $ USD\"] = _df[\"FCST\"]*_df[\"Precio promedio\"]\n_df[\"Venta $ USD\"] = _df[\"Venta\"]*_df[\"Precio promedio\"]\n\n_df[\"Dif ABS $ USD\"] = (_df[\"FCST $ USD\"] - _df[\"Venta $ USD\"]).abs()\n_df[\"Error $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"BIAS $ USD\"] = (_df[\"FCST $ USD\"]-_df[\"Venta $ USD\"])/_df[\"FCST $ USD\"]\n_df[\"Asertividad $ USD\"] = _df[\"Venta $ USD\"]/_df[\"FCST $ USD\"]\n_df[\"WAPA $ USD\"] = 1- _df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"]\n_venta_total_usd = _df[\"Venta $ USD\"].sum()\n_df[\"Pond $ USD\"] = _df[\"Venta $ USD\"]/_venta_total_usd\n_df[\"MAPE $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"WMAPE $ USD\"] = _df[\"MAPE $ USD\"]*_df[\"Pond $ USD\"]\ndef f(row):\n    if row['Asertividad $ USD'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad $ USD'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster $ USD'] = _df.apply(f, axis=1)\n\n_dif_abs_usd = _df[\"Dif ABS $ USD\"].sum()\n_df[\"%\"] = _df[\"Dif ABS $ USD\"]/_dif_abs_usd\ndef f(row):\n    if row[\"Venta\"] > row[\"FCST\"] :\n        val = \"sobre demanda\"\n    elif row[\"Venta\"] < row[\"FCST\"] :\n        val = \"sub demanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['Root cause'] = _df.apply(f, axis=1)\n\n_df = _df.sort_values(by=\"%\",ascending=False)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_aux_2", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy Aux", "units": null, "w": "184", "x": 403, "y": 128, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_ventas.copy()\n_df = _df.rename(columns={\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\":\"Final Demand Plan\"})\n_df = _df[[\"SKU\",\"time\",\"Final Demand Plan\"]]\n_df = _df[_df[\"time\"]> ultimo_mes_datos ]\n\n_final_demand_hist = final_demand_plan_lect.copy()\n_final_demand_hist = _final_demand_hist[_final_demand_hist[\"time\"]<=ultimo_mes_datos]\n_final_demand_hist = _final_demand_hist.rename(columns={\"Final_Demand_Plan_lect\":\"Final Demand Plan\"})\n\n_df = pd.concat([_final_demand_hist,_df])\n_df[\"SKU\"] = _df[\"SKU\"].astype(str)\n_df[\"time\"] = _df[\"time\"].astype(str)\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_plan_histproy", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand Plan Hist+Proy", "units": null, "w": "184", "x": 372, "y": 667, "z": 1}, {"color": "#00FF00", "definition": "result = pandas_from_excel( datos, sheetName=\"Precio_SKU_para_accuracy\").drop_duplicates()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precio_por_sku_para_accuracy", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precio por SKU para Accuracy", "units": null, "w": "184", "x": 353, "y": 475, "z": 1}, {"color": "#4CBCFF", "definition": "_df = demand_real_proy_pesos.copy()\n\n_df[\"Asertividad\"] = _df[\"Venta\"]/_df[\"FCST\"]\ndef f(row):\n    if row['Asertividad'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster'] = _df.apply(f, axis=1)\n_df[\"Dif ABS\"] = (_df[\"FCST\"] - _df[\"Venta\"]).abs()\n_df[\"Error\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"BIAS\"] = (_df[\"FCST\"]-_df[\"Venta\"])/_df[\"FCST\"]\n_df[\"WAPA\"] = 1- _df[\"Dif ABS\"]/_df[\"Venta\"]\n\n_venta_total = _df[\"Venta\"].sum()\n_df[\"Pond\"] = _df[\"Venta\"]/_venta_total\n_df[\"MAPE\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"WMAPE\"] = _df[\"MAPE\"]*_df[\"Pond\"]\n\n_df[\"FCST $ USD\"] = _df[\"FCST\"]*_df[\"Precio promedio\"]\n_df[\"Venta $ USD\"] = _df[\"Venta\"]*_df[\"Precio promedio\"]\n\n_df[\"Dif ABS $ USD\"] = (_df[\"FCST $ USD\"] - _df[\"Venta $ USD\"]).abs()\n_df[\"Error $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"BIAS $ USD\"] = (_df[\"FCST $ USD\"]-_df[\"Venta $ USD\"])/_df[\"FCST $ USD\"]\n_df[\"Asertividad $ USD\"] = _df[\"Venta $ USD\"]/_df[\"FCST $ USD\"]\n_df[\"WAPA $ USD\"] = 1- _df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"]\n_venta_total_usd = _df[\"Venta $ USD\"].sum()\n_df[\"Pond $ USD\"] = _df[\"Venta $ USD\"]/_venta_total_usd\n_df[\"MAPE $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"WMAPE $ USD\"] = _df[\"MAPE $ USD\"]*_df[\"Pond $ USD\"]\ndef f(row):\n    if row['Asertividad $ USD'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad $ USD'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster $ USD'] = _df.apply(f, axis=1)\n\n_dif_abs_usd = _df[\"Dif ABS $ USD\"].sum()\n_df[\"%\"] = _df[\"Dif ABS $ USD\"]/_dif_abs_usd\ndef f(row):\n    if row[\"Venta\"] > row[\"FCST\"] :\n        val = \"sobre demanda\"\n    elif row[\"Venta\"] < row[\"FCST\"] :\n        val = \"sub demanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['Root cause'] = _df.apply(f, axis=1)\n\n_df = _df.sort_values(by=\"%\",ascending=False)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "analisis_accuracy_aux_2", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Analisis Accuracy Aux", "units": null, "w": "184", "x": 143, "y": 242, "z": 1}, {"color": "#6699ff", "definition": "_hist = ventas_historicas.copy()\n_hist = _hist.rename(columns={\"Ventas Hist\":\"Venta\"})\n_hist = _hist.drop_duplicates()\n_hist[\"SKU\"] = _hist[\"SKU\"].astype(str)\n\n_fcst = final_demand_plan.copy()\n_fcst = _fcst.rename(columns={\"Final Demand Plan\":\"FCST\"})\n\n_precio = precio_por_sku_para_accuracy.copy()\n_precio[\"SKU\"] = _precio[\"SKU\"].astype(str)\n_precio[\"time\"] = _precio[\"time\"].astype(str)\n\n_df = _fcst.merge(_hist,on=[\"SKU\",\"time\"])\n_df = _df.merge(_precio,on=[\"SKU\",\"time\"],how=\"left\")\n_df[\"Precio promedio\"] = _df[\"Precio promedio\"].fillna(0)\n_df[\"Venta\"] = _df[\"Venta\"].astype(float)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demand_real_proy_pesos", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Real+Proy en $", "units": null, "w": "184", "x": 639, "y": 728, "z": 1}, {"color": "#4CBCFF", "definition": "_df = demand_real_proy_pesos.copy()\n_df = _df[_df[\"time\"]==selector_time]\n_df = _df.drop([\"time\"],axis=1)\n\n_df[\"Asertividad\"] = _df[\"Venta\"]/_df[\"FCST\"]\ndef f(row):\n    if row['Asertividad'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster'] = _df.apply(f, axis=1)\n_df[\"Dif ABS\"] = (_df[\"FCST\"] - _df[\"Venta\"]).abs()\n_df[\"Error\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"BIAS\"] = (_df[\"FCST\"]-_df[\"Venta\"])/_df[\"FCST\"]\n_df[\"WAPA\"] = 1- _df[\"Dif ABS\"]/_df[\"Venta\"]\n\n_venta_total = _df[\"Venta\"].sum()\n_df[\"Pond\"] = _df[\"Venta\"]/_venta_total\n_df[\"MAPE\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"WMAPE\"] = _df[\"MAPE\"]*_df[\"Pond\"]\n\n_df[\"FCST $ USD\"] = _df[\"FCST\"]*_df[\"Precio promedio\"]\n_df[\"Venta $ USD\"] = _df[\"Venta\"]*_df[\"Precio promedio\"]\n\n_df[\"Dif ABS $ USD\"] = (_df[\"FCST $ USD\"] - _df[\"Venta $ USD\"]).abs()\n_df[\"Error $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"BIAS $ USD\"] = (_df[\"FCST $ USD\"]-_df[\"Venta $ USD\"])/_df[\"FCST $ USD\"]\n_df[\"Asertividad $ USD\"] = _df[\"Venta $ USD\"]/_df[\"FCST $ USD\"]\n_df[\"WAPA $ USD\"] = 1- _df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"]\n_venta_total_usd = _df[\"Venta $ USD\"].sum()\n_df[\"Pond $ USD\"] = _df[\"Venta $ USD\"]/_venta_total_usd\n_df[\"MAPE $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"WMAPE $ USD\"] = _df[\"MAPE $ USD\"]*_df[\"Pond $ USD\"]\ndef f(row):\n    if row['Asertividad $ USD'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad $ USD'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster $ USD'] = _df.apply(f, axis=1)\n\n_dif_abs_usd = _df[\"Dif ABS $ USD\"].sum()\n_df[\"%\"] = _df[\"Dif ABS $ USD\"]/_dif_abs_usd\ndef f(row):\n    if row[\"Venta\"] > row[\"FCST\"] :\n        val = \"sobre demanda\"\n    elif row[\"Venta\"] < row[\"FCST\"] :\n        val = \"sub demanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['Root cause'] = _df.apply(f, axis=1)\n\n_df = _df.sort_values(by=\"%\",ascending=False)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "analisis_accuracy_aux_2_copy", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Analisis Accuracy Aux", "units": null, "w": "184", "x": 143, "y": 385, "z": 1}, {"color": "#F3F3F3", "definition": "_df = accuracy_aux_2_para_analisis.copy()\n_df = _df[[\"SKU\", \"DESCRIPTION\", \"FCST\", \"Venta\",   \"Asertividad\", \"cluster\", \"Dif ABS\",\"WAPA\", \"Dif ABS $ USD\",\"%\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\"]]\n_df = _df.sort_values(by=\"%\",ascending=False)\n_df = _df.reset_index().reset_index() \n_df = _df.drop(\"index\",axis=1)  \n_df[\"Rank\"] = _df[\"level_0\"]+1 \n_df = _df.drop(\"level_0\",axis=1)  \n_df.columns = [\"                       SKU\",\"                      DESCRIPTION\",\t\"                      FCST\", \"                     Venta\",\t\"                    Asertividad\",\t\"                   cluster\",\t\"                  Dif ABS\",\"                WAPA\",\"  Dif ABS $ USD\",\t\" %\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\",\"Rank\"]\n#_df = pd.melt(_df,[\"Rank\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\"],\t[\"                       SKU\",\"                      DESCRIPTION\",\"                      FCST\",\"                     Venta\",\t\"                    Asertividad\",\t\"                   cluster\",\t\"                  Dif ABS\",\"                WAPA\",\t\"  Dif ABS $ USD\",\" %\"],\"var\",\"value\")    \n#_df = _df.set_index([\"Rank\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\", \"var\"])\n_df[\"Rank2\"] = _df[\"Rank\"].astype(str).str.zfill(4)\n_df[\"SKU descripcion\"] = _df[\"Rank2\"] + \" - \"  + _df[\"                       SKU\"].astype(str) + \" - \" + _df[\"                      DESCRIPTION\"]\n_df = _df.drop(\"Rank\",axis=1)  \n_df = _df.set_index([\"SKU descripcion\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\"])\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_para_analisis", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy para Analisis", "units": null, "w": "184", "x": 647, "y": 385, "z": 1}, {"color": "#4CBCFF", "definition": "_df = analisis_accuracy_aux_2_copy.copy()\n\n_df[\"Asertividad\"] = _df[\"Venta\"]/_df[\"FCST\"]\ndef f(row):\n    if row['Asertividad'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster'] = _df.apply(f, axis=1)\n_df[\"Dif ABS\"] = (_df[\"FCST\"] - _df[\"Venta\"]).abs()\n_df[\"Error\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"BIAS\"] = (_df[\"FCST\"]-_df[\"Venta\"])/_df[\"FCST\"]\n_df[\"WAPA\"] = 1- _df[\"Dif ABS\"]/_df[\"Venta\"]\n\n_venta_total = _df[\"Venta\"].sum()\n_df[\"Pond\"] = _df[\"Venta\"]/_venta_total\n_df[\"MAPE\"] = (_df[\"Dif ABS\"]/_df[\"Venta\"])\n_df[\"WMAPE\"] = _df[\"MAPE\"]*_df[\"Pond\"]\n\n_df[\"FCST $ USD\"] = _df[\"FCST\"]*_df[\"Precio promedio\"]\n_df[\"Venta $ USD\"] = _df[\"Venta\"]*_df[\"Precio promedio\"]\n\n_df[\"Dif ABS $ USD\"] = (_df[\"FCST $ USD\"] - _df[\"Venta $ USD\"]).abs()\n_df[\"Error $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"BIAS $ USD\"] = (_df[\"FCST $ USD\"]-_df[\"Venta $ USD\"])/_df[\"FCST $ USD\"]\n_df[\"Asertividad $ USD\"] = _df[\"Venta $ USD\"]/_df[\"FCST $ USD\"]\n_df[\"WAPA $ USD\"] = 1- _df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"]\n_venta_total_usd = _df[\"Venta $ USD\"].sum()\n_df[\"Pond $ USD\"] = _df[\"Venta $ USD\"]/_venta_total_usd\n_df[\"MAPE $ USD\"] = (_df[\"Dif ABS $ USD\"]/_df[\"Venta $ USD\"])\n_df[\"WMAPE $ USD\"] = _df[\"MAPE $ USD\"]*_df[\"Pond $ USD\"]\ndef f(row):\n    if row['Asertividad $ USD'] > 1.2 :\n        val = \"overdemand\"\n    elif row['Asertividad $ USD'] <= 0.8 :\n        val = \"subdemanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['cluster $ USD'] = _df.apply(f, axis=1)\n\n_dif_abs_usd = _df[\"Dif ABS $ USD\"].sum()\n_df[\"%\"] = _df[\"Dif ABS $ USD\"]/_dif_abs_usd\ndef f(row):\n    if row[\"Venta\"] > row[\"FCST\"] :\n        val = \"sobre demanda\"\n    elif row[\"Venta\"] < row[\"FCST\"] :\n        val = \"sub demanda\"\n    else :\n        val = \"ok\"\n    return val\n_df['Root cause'] = _df.apply(f, axis=1)\n\n_df = _df.sort_values(by=\"%\",ascending=False)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_aux_2_para_analisis", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy para Analisis Aux", "units": null, "w": "184", "x": 403, "y": 385, "z": 1}, {"color": "#ff794c", "definition": "import sqlite3 \ncnx = sqlite3.connect(current_path +  'input_demanda.db')\ndf = pd.read_sql_query(\"SELECT * FROM input_demanda\", cnx) \ncub_refresh  \nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "input_demanda_lect_form", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Input Demanda Lect Form", "units": null, "w": "184", "x": 640, "y": 93, "z": 1}, {"color": null, "definition": "_df = input_demanda_lect_form.copy()\n_df = _df.rename(columns={\"sku\":\"SKU\"})\n_df.columns = [\"id\",\t\"SKU\",\t\"comment\",\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07',\t\"2020.08\",\t\"2020.09\",\t\"2020.10\",\t\"2020.11\",\t\"2020.12\",\t\"userId\",\t\"lastUpdate\",\t\"departments\"]\n_df = pd.melt(_df,['SKU'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Input Demanda\")\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "input_demanda_formulario", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Input Demanda Formulario", "units": null, "w": "184", "x": 114, "y": 355, "z": 1}, {"color": "#F3F3F3", "definition": "_df = analisis_accuracy_aux_2.copy()\n_df = _df[[\"time\",\"SKU\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\",\"cluster $ USD\",  \"FCST $ USD\", \"Venta $ USD\", \"Dif ABS $ USD\"]]\n \n_df = pd.melt(_df,[\"time\",\"SKU\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\",\"cluster $ USD\"],\t[\"FCST $ USD\", \"Venta $ USD\", \"Dif ABS $ USD\"])    \n_df = _df.set_index([\"time\",\"SKU\",\"comm_index\", \"bg_index\",\"division_index\",\"abc\",\"cluster $ USD\",\"variable\"])\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_analysis", "moduleId": "accuracy_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy Analysis", "units": null, "w": "184", "x": 403, "y": 242, "z": 1}, {"color": "#ff794c", "definition": "import sqlite3 \ncnx = sqlite3.connect(current_path +  'input_mkt.db')\ndf = pd.read_sql_query(\"SELECT * FROM input_mkt\", cnx) \ncub_refresh  \nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "input_mkt_lect_form", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Input MKT Lect Form", "units": null, "w": "184", "x": 640, "y": 131, "z": 1}, {"color": null, "definition": "_df = input_mkt_lect_form.copy()\n_df = _df.rename(columns={\"sku\":\"SKU\"})\n_df.columns = [\"id\",\t\"SKU\",\t\"comment\",\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07',\t\"2020.08\",\t\"2020.09\",\t\"2020.10\",\t\"2020.11\",\t\"2020.12\",\t\"userId\",\t\"lastUpdate\",\t\"departments\"]\n_df = pd.melt(_df,['SKU'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Input MKT\")\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "input_mkt_formulario", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Input MKT Formulario", "units": null, "w": "184", "x": 114, "y": 458, "z": 1}, {"color": "#ff794c", "definition": "import sqlite3 \ncnx = sqlite3.connect(current_path + 'input_ventas.db')\ndf = pd.read_sql_query(\"SELECT * FROM input_ventas\", cnx) \ncub_refresh  \nresult = df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "input_ventas_lect_form", "moduleId": "inputs_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Input Ventas Lect Form", "units": null, "w": "184", "x": 640, "y": 171, "z": 1}, {"color": null, "definition": "_df = input_ventas_lect_form.copy()\n_df = _df.rename(columns={\"sku\":\"SKU\"})\n_df.columns = [\"id\",\t\"SKU\",\t\"comment\",\t'2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07',\t\"2020.08\",\t\"2020.09\",\t\"2020.10\",\t\"2020.11\",\t\"2020.12\",\t\"userId\",\t\"lastUpdate\",\t\"departments\"]\n_df = pd.melt(_df,['SKU'],['2019.01',\t'2019.02',\t'2019.03',\t'2019.04',\t'2019.05',\t'2019.06',\t'2019.07',\t'2019.08',\t'2019.09',\t'2019.10',\t'2019.11',\t'2019.12',\t'2020.01',\t'2020.02',\t'2020.03',\t'2020.04',\t'2020.05',\t'2020.06',\t'2020.07'],\"time\",\"Input Ventas\")\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "input_ventas_formulario", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Input Ventas Formulario", "units": null, "w": "184", "x": 114, "y": 558, "z": 1}, {"color": "#9999ff", "definition": "_df = sku_a_comm_con_index.copy()\n_df[\"abc\"].replace(\"\",\"s.d.\",inplace=True)\n_aux = pd.Index( _df[\"abc\"].drop_duplicates() )\nresult = concat_index( _aux, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "abc", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ABC", "units": null, "w": "184", "x": 325, "y": 285, "z": 1}, {"color": "#4cbcff", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 20%;\n      height: 20%;\n      padding-bottom: 20%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:5%;\nmargin-right:5%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:1.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h1 style = \"color:#5f6670;\">Budgeting</h1>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2664\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Commercial</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-usd fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Operations</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-industry fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>OPEX</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-line-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>CAPEX</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-pie-chart fa-4x\"></i></div></div></div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner big-menu-boxInner-disable\"> <span class=\"link-to-disable\" ><div class=\"big-menu-elem-content\"><h3>Finance</h3></div><div class=\"big-menu-icon\"> <i class=\"fa fa-book fa-4x\"></i></div></div></div>\n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "budgeting_blocks_1", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budgeting Blocks", "units": null, "w": "184", "x": 294, "y": 433, "z": 1}, {"color": "#4cbcff", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h11 {\n\t   font-size: 3.5em;\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 20%;\n      height: 20%;\n      padding-bottom: 20%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2em;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:2%;\nmargin-right:2%;\nmargin-bottom:10%;\n}\n.big-menu-icon{\nfont-size:1.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 3 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 2 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h11 style = \"color:#5f6670;\">Collaborative planning</h11>\n  </div>\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2668\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Accuracy Analysis</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-area-chart fa-4x\"></i></div></div></div>\n  \n<div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2667\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Demand Planning</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n \n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2666\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>MKT</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n\n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2665\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Sales</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-cog fa-4x\"></i></div></div></div>\n  \n   <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2663\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Collaboration Summary</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-check-square-o fa-4x\"></i></div></div></div>\n   \n  <!-- /#big-menu-wrap -->\n  \n  \"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "budgeting_blocks_comercial_1", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Budgeting Blocks - Comercial", "units": null, "w": "184", "x": 294, "y": 478, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "inputs_building_blocks", "moduleId": "building_blocks", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs Building Blocks", "units": null, "w": "184", "x": 211, "y": 106, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demand_planning_building_blocks", "moduleId": "building_blocks", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Planning Building Blocks", "units": null, "w": "184", "x": 514, "y": 105, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "accuracy_module", "moduleId": "building_blocks", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Accuracy Module", "units": null, "w": "184", "x": 514, "y": 203, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ibp_module", "moduleId": "building_blocks", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "IBP Module", "units": null, "w": "184", "x": 811, "y": 105, "z": 1}, {"color": "#bebebe", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "indexes_demand_planning", "moduleId": "building_blocks", "nodeClass": "module", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Indexes Demand Planning", "units": null, "w": "184", "x": 211, "y": 203, "z": 1}, {"color": "#4cbcff", "definition": "_df = estadistico_jda.copy()\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "estadistico_jda_1", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Estadistico JDA", "units": null, "w": "184", "x": 372, "y": 249, "z": 1}, {"color": "#4cbcff", "definition": "_final_demand = final_demand_pesos_por_sku.copy()\n_final_demand = _final_demand.drop([\"Precio venta prom\",'Demand Plan Volume',\"abc\"],axis=1)\n_final_demand = _final_demand.groupby(['time',\"comm_index\",\"bg_index\",\"division_index\"]).sum() \n_final_demand = _final_demand.reset_index()\n\nresult = _final_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_pesos", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand $", "units": null, "w": "184", "x": 84, "y": 191, "z": 1}, {"color": "#4cbcff", "definition": "_final_demand = final_demand_plan_histproy.copy()\n_precio = precio_venta.copy()\n_sku_comm = sku_a_comm_con_index.copy()\n_sku_comm[\"SKU\"] = _sku_comm[\"SKU\"].astype(str)\n\n_final_demand = _final_demand.merge(_sku_comm,on=\"SKU\")  \n_final_demand = _final_demand.merge(_precio,on=\"SKU\")  \n_final_demand[\"abc\"] = _final_demand[\"abc\"].fillna(\"s.d.\")\n_final_demand[\"abc\"].replace(\"\",\"s.d.\",inplace=True)\n_final_demand = _final_demand.rename(columns={\"Final Demand Plan\":\"Demand Plan Volume\"})\n_final_demand[\"Final Demand Plan $\"] = _final_demand['Demand Plan Volume']*_final_demand[\"Precio venta prom\"]\n\n#_final_demand = _final_demand.groupby(['time',\"comm_index\",\"bg_index\",\"division_index\",\"abc\",\"SKU\"]).sum() \n#_final_demand = _final_demand.reset_index()\n\nresult = _final_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_pesos_por_sku", "moduleId": "ibp_module", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand $ por SKU", "units": null, "w": "184", "x": 84, "y": 136, "z": 1}, {"color": "#4CBCFF", "definition": "_final_demand = final_demand_pesos_por_sku.copy()\n#_final_demand = final_demand_pesos_por_sku_1.copy()\n\n_ult_mes = _final_demand[_final_demand[\"time\"]== mes_selec ]\n_ult_mes = _ult_mes.rename(columns={\"Demand Plan Volume\":\"Demand Plan Volume Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Precio venta prom\":\"Precio venta prom Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Final Demand Plan $\":\"Final Demand Plan Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"time\":\"Ult Mes\"})\n\n_mes_ant = _final_demand[_final_demand[\"time\"]== mes_y_mes_anterior[to_dataarray(time)==mes_selec]]\n_mes_ant = _mes_ant.drop(\"Precio venta prom\",axis=1)\n_mes_ant[\"Precio venta prom Mes Ant\"] = _mes_ant[\"Final Demand Plan $\"]/_mes_ant[\"Demand Plan Volume\"]\n_mes_ant = _mes_ant.rename(columns={\"Demand Plan Volume\":\"Demand Plan Volume Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Final Demand Plan $\":\"Final Demand Plan Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"time\":\"Mes Ant\"})\n\n_df = _ult_mes.merge(_mes_ant,on=[\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"DESCRIPTION\"],how=\"outer\")\n \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_ult_mes_y_ant", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand Ult Mes y Ant", "units": null, "w": "184", "x": 258, "y": 665, "z": 1}, {"color": "#4CBCFF", "definition": "_df = final_demand_ult_mes_y_ant.copy().fillna(0)\n\n_df[\"Var. Cant.\"] = (_df[\"Demand Plan Volume Ult Mes\"]/_df[\"Demand Plan Volume Mes Ant\"]-1).fillna(0)\n#_df[\"Ef. Cant.\"] = (_df[\"Var. Cant.\"]*_df[\"Final Demand Plan Mes Ant\"]).fillna(0)\n_df[\"Ef. Cant.\"] = (_df[\"Final Demand Plan Ult Mes\"]-_df[\"Final Demand Plan Mes Ant\"]).fillna(0)\n\n_df[\"Var. Precio.\"] = (_df[\"Precio venta prom Ult Mes\"]/_df[\"Precio venta prom Mes Ant\"]-1).fillna(0)\n_df[\"Ef. Precio\"] = (_df[\"Var. Precio.\"]*_df[\"Final Demand Plan Mes Ant\"]).fillna(0)\n\n_df[\"Ef. Combinado\"] = _df[\"Final Demand Plan Ult Mes\"]-_df[\"Final Demand Plan Mes Ant\"]-_df[\"Ef. Cant.\"]-_df[\"Ef. Precio\"]\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "efecto_cantidad_y_precio", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Efecto Cantidad y Precio", "units": null, "w": "184", "x": 537, "y": 665, "z": 1}, {"color": "#f3f3f3", "definition": "_df = variacion_building_blocks.copy()\n\n_df[\"SKU Selec\"] = _df[\"SKU\"]\n_df[\"comm_index Selec\"] = _df[\"comm_index\"]\n_df[\"division_index Selec\"] = _df[\"division_index\"]\n_df[\"bg_index Selec\"] = _df[\"bg_index\"]\n_df[\"abc Selec\"] = _df[\"abc\"]\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df_all_abc = _df.copy()\n_df_all_abc[\"abc Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_abc])\n\n_df = _df[_df[\"bg_index Selec\"]==bg_selector]\n_df = _df[_df[\"division_index Selec\"]==division_selector]\n_df = _df[_df[\"comm_index Selec\"]==comm_selector]\n_df = _df[_df[\"SKU Selec\"]==sku_selector]\n_df = _df[_df[\"abc Selec\"]==abc_selector]\n\n_df = _df.drop([\"SKU Selec\",\t\"comm_index Selec\",\t\"division_index Selec\",\t\"bg_index Selec\",\t\"abc Selec\"],axis=1) \n\n_df[\"Building Block\"].replace(\"Final Demand Plan Mes Ant\",\" Mes anterior\",inplace=True)\n\n_df_mes_ant = _df[_df[\"Building Block\"]==\" Mes anterior\"]\n_df_mes_ant[\"SKU\"] = \" Mes anterior\"\n_df_mes_ant[\"comm_index\"] = \" Mes anterior\"\n_df_mes_ant[\"bg_index\"] = \" Mes anterior\"\n_df_mes_ant[\"division_index\"] = \" Mes anterior\"\n_df_mes_ant[\"abc\"] = \" Mes anterior\"\n_df_mes_ant[\"Building Block\"] = \" Mes anterior\"\n \n_df_resto =_df[_df[\"Building Block\"]!=\" Mes anterior\"]\n\n_df = pd.concat([_df_mes_ant,_df_resto])\n_df = _df.groupby([\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Building Block\"]).sum()\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "factorial_final_demand", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Factorial Final Demand", "units": null, "w": "184", "x": 927, "y": 162, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_ventas.copy()\n\n_df = _df.drop([\"A\u00f1o\", \"Mes\", \"Estad.JDA + In.Demanda\", \"Estad.JDA + In.Demanda + In.MKT\", \"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"],axis=1)\n\n_df = _df[_df[\"time\"]== mes_selec ]\n\n_df[\"SKU Selec\"] = _df[\"SKU\"]\n_df[\"comm_index Selec\"] = _df[\"comm_index\"]\n_df[\"division_index Selec\"] = _df[\"division_index\"]\n_df[\"bg_index Selec\"] = _df[\"bg_index\"]\n_df[\"abc Selec\"] = _df[\"abc\"]\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df_all_abc = _df.copy()\n_df_all_abc[\"abc Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_abc])\n\n_df = _df[_df[\"bg_index Selec\"]==bg_selector]\n_df = _df[_df[\"division_index Selec\"]==division_selector]\n_df = _df[_df[\"comm_index Selec\"]==comm_selector]\n_df = _df[_df[\"SKU Selec\"]==sku_selector]\n_df = _df[_df[\"abc Selec\"]==abc_selector]\n\n_df = _df.rename(columns={\"Estadistico JDA\":\" Estadistico JDA\"})\n\n_df = pd.melt(_df,[\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\"],[\" Estadistico JDA\", \"Input Demanda\", \"Input MKT\", \"Input Ventas\"],\"Building Block\")\n\n_df_jda = _df[_df[\"Building Block\"]==\" Estadistico JDA\"]\n_df_jda[\"SKU\"] = \" Estadistico JDA\"\n_df_jda[\"comm_index\"] = \" Estadistico JDA\"\n_df_jda[\"bg_index\"] = \" Estadistico JDA\"\n_df_jda[\"division_index\"] = \" Estadistico JDA\"\n_df_jda[\"abc\"] = \" Estadistico JDA\"\n \n_df_resto =_df[_df[\"Building Block\"]!=\" Estadistico JDA\"]\n\n_df = pd.concat([_df_jda,_df_resto])\n\n_df = _df.groupby([\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Building Block\"]).sum()\n\n_df = _df.reset_index()\n_df[\"Building Block Select\"] = _df[\"Building Block\"]\n\n_df_all_building_blocks = _df.copy()\n_df_all_building_blocks[\"Building Block Select\"] = \"All\"\n_df = pd.concat([_df,_df_all_building_blocks])\n\n_df = _df[_df[\"Building Block Select\"]== building_blocks_inputs_selector ]\n_df = _df.drop(\"Building Block Select\",axis=1)\n\n_df = _df.set_index([\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Building Block\"])\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "factorial_building_blocks", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Factorial Building Blocks", "units": null, "w": "184", "x": 378, "y": 490, "z": 1}, {"color": "#4CBCFF", "definition": "#_df = estadistico_jda_input_demanda_mkt_ventas.copy()\n_df = final_demand_plan_histproy_building_blocks.copy()\n_precio = precio_venta.copy()\n\n#_df = _df.drop([\"A\u00f1o\", \"Mes\", \"Estad.JDA + In.Demanda\", \"Estad.JDA + In.Demanda + In.MKT\", \"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"],axis=1)\n_df = _df.merge(_precio,on=\"SKU\",how=\"left\")\n_df[\"Estadistico JDA\"] = _df[\"Estadistico JDA\"]*_df[\"Precio venta prom\"]\n_df[\"Input Demanda\"] = _df[\"Input Demanda\"]*_df[\"Precio venta prom\"]\n_df[\"Input MKT\"] = _df[\"Input MKT\"]*_df[\"Precio venta prom\"]\n_df[\"Input Ventas\"] = _df[\"Input Ventas\"]*_df[\"Precio venta prom\"]\n\n_df = _df[_df[\"time\"]== mes_selec ]\n\n_df[\"SKU Selec\"] = _df[\"SKU\"]\n_df[\"comm_index Selec\"] = _df[\"comm_index\"]\n_df[\"division_index Selec\"] = _df[\"division_index\"]\n_df[\"bg_index Selec\"] = _df[\"bg_index\"]\n_df[\"abc Selec\"] = _df[\"abc\"]\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df_all_abc = _df.copy()\n_df_all_abc[\"abc Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_abc])\n\n_df = _df[_df[\"bg_index Selec\"]==bg_selector]\n_df = _df[_df[\"division_index Selec\"]==division_selector]\n_df = _df[_df[\"comm_index Selec\"]==comm_selector]\n_df = _df[_df[\"SKU Selec\"]==sku_selector]\n_df = _df[_df[\"abc Selec\"]==abc_selector]\n\n_df = _df.rename(columns={\"Estadistico JDA\":\" Estadistico JDA\"})\n\n_df = pd.melt(_df,[\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\"],[\" Estadistico JDA\", \"Input Demanda\", \"Input MKT\", \"Input Ventas\"],\"Building Block\")\n\n_df_jda = _df[_df[\"Building Block\"]==\" Estadistico JDA\"]\n_df_jda[\"SKU\"] = \" Estadistico JDA\"\n_df_jda[\"comm_index\"] = \" Estadistico JDA\"\n_df_jda[\"bg_index\"] = \" stadistico JDA\"\n_df_jda[\"division_index\"] = \" Estadistico JDA\"\n_df_jda[\"abc\"] = \" Estadistico JDA\"\n \n_df_resto =_df[_df[\"Building Block\"]!=\" Estadistico JDA\"]\n\n_df = pd.concat([_df_jda,_df_resto])\n\n_df = _df.groupby([\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Building Block\"]).sum()\n\n_df = _df.reset_index()\n_df[\"Building Block Select\"] = _df[\"Building Block\"]\n\n_df_all_building_blocks = _df.copy()\n_df_all_building_blocks[\"Building Block Select\"] = \"All\"\n_df = pd.concat([_df,_df_all_building_blocks])\n\n_df = _df[_df[\"Building Block Select\"]== building_blocks_inputs_selector ]\n_df = _df.drop(\"Building Block Select\",axis=1)\n\n_df = _df.set_index([\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Building Block\"])\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "factorial_building_blocks__pesos", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Factorial Building Blocks $", "units": null, "w": "184", "x": 378, "y": 574, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Building Blocks", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "226", "identifier": "node50_1", "moduleId": "building_blocks", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "903", "x": 145, "y": 52, "z": -1}, {"color": "#eeeeee", "definition": "result = 0", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "517", "identifier": "node50_1_1", "moduleId": "inputs_building_blocks", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "888", "x": 76, "y": 34, "z": -1}, {"color": "#eeeeee", "definition": "result = 0", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "697", "identifier": "node50_1_2", "moduleId": "demand_planning_building_blocks", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1594", "x": 59, "y": 87, "z": -1}, {"color": "#eeeeee", "definition": "result = 0", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "392", "identifier": "node50_1_3", "moduleId": "ibp_module", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "662", "x": 49, "y": 77, "z": -1}, {"color": "#eeeeee", "definition": "result = 0", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "408", "identifier": "node50_1_4", "moduleId": "accuracy_module", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "883", "x": 95, "y": 54, "z": -1}, {"color": "#4cffa6", "definition": "result = mes_selec", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "a7259d3f213704029a5a67dba5f9a6549", "moduleId": "summary_demand_plan", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "mes_selec", "picture": null, "title": "Mes Selec", "units": null, "w": "308", "x": 316, "y": 89, "z": 2}, {"color": "#4cffa6", "definition": "result = choice(time,21,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "mes_selec", "moduleId": "summary_demand_plan", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mes Selec", "units": null, "w": "308", "x": 316, "y": 89, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Piezas\",\"Monto\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "piezas_y_monto", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Piezas y Monto", "units": null, "w": "184", "x": 107, "y": 114, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(piezas_y_monto,1,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "piezas_o_monto_decision", "moduleId": "summary_demand_plan", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Piezas o Monto Decision", "units": null, "w": "308", "x": 655, "y": 407, "z": 1}, {"color": "#4cffa6", "definition": "result = piezas_o_monto_decision", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "ac0cf2a5676e449e5a708e7a9181e7cb5", "moduleId": "summary_demand_plan", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "piezas_o_monto_decision", "picture": null, "title": "Piezas o Monto Decision", "units": null, "w": "308", "x": 655, "y": 407, "z": 1}, {"color": "#f3f3f3", "definition": "#result = np.where ( piezas_o_monto_decision == \"Piezas\", factorial_building_blocks , factorial_building_blocks__pesos)\nif piezas_o_monto_decision == \"Piezas\" : \n    result = factorial_building_blocks\nelse : \n    result = factorial_building_blocks__pesos", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "factorial_buiding_blocks_selec", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Factorial Buiding Blocks Selec", "units": null, "w": "184", "x": 717, "y": 522, "z": 1}, {"color": "#9999ff", "definition": "result = concat_index( 'All',abc, 's.d.' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "abc_in", "moduleId": "indexes_demand_planning", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ABC Index", "units": null, "w": "184", "x": 546, "y": 285, "z": 1}, {"color": "#4cffa6", "definition": "result = choice(abc_in,1)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "abc_selector", "moduleId": "demand_planning_building_blocks", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "ABC Selector", "units": null, "w": "255", "x": 1146, "y": 124, "z": 1}, {"color": "#4cffa6", "definition": "result = abc_selector", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a77ff425ec7bc4d61b2917833435367e3", "moduleId": "demand_planning_building_blocks", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "abc_selector", "picture": null, "title": "ABC Selector", "units": null, "w": "255", "x": 1146, "y": 124, "z": 1}, {"color": "#4CBCFF", "definition": "result = pp.dynamic(to_dataarray( time ),time,-1).fillna(\"2017.11\")", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "mes_y_mes_anterior", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mes y Mes Anterior", "units": null, "w": "184", "x": 107, "y": 90, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "summary_demand_plan", "moduleId": "building_blocks", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Summary Demand Plan", "units": null, "w": "184", "x": 811, "y": 203, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "579", "identifier": "node50_1_5", "moduleId": "summary_demand_plan", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1428", "x": 72, "y": 54, "z": -1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_ventas.copy()\n_df = _df.rename(columns={\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\":\"Final Demand Plan\"})\n#_df = _df[[\"SKU\",\"time\",\"Estadistico JDA\", \"Input Demanda\", \"Input MKT\", \"Input Ventas\", \"Final Demand Plan\"]]\n#_df = _df[_df[\"time\"]> ultimo_mes_datos ]\n\n#_final_demand_hist = final_demand_plan_lect.copy()\n#_final_demand_hist = _final_demand_hist[_final_demand_hist[\"time\"]<=ultimo_mes_datos]\n#_final_demand_hist = _final_demand_hist.rename(columns={\"Final_Demand_Plan_lect\":\"Final Demand Plan\"})\n\n#_df = pd.concat([_final_demand_hist,_df])\n_df[\"SKU\"] = _df[\"SKU\"].astype(str)\n_df[\"time\"] = _df[\"time\"].astype(str)\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_plan_histproy_building_blocks", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand Plan Hist+Proy + Building Blocks", "units": null, "w": "184", "x": 372, "y": 728, "z": 1}, {"color": "#4cbcff", "definition": "_final_demand = final_demand_plan_histproy_building_blocks.copy().fillna(0)\n_precio = precio_venta.copy()\n_sku_comm = sku_a_comm_con_index.copy()\n_sku_comm[\"SKU\"] = _sku_comm[\"SKU\"].astype(str)\n\n_final_demand = _final_demand.merge(_precio,on=\"SKU\")  \n_final_demand = _final_demand.rename(columns={\"Final Demand Plan\":\"Demand Plan Volume\"})\n_final_demand[\"Final Demand Plan\"] = _final_demand['Demand Plan Volume']*_final_demand[\"Precio venta prom\"]\n_final_demand[\"Estadistico JDA $\"] = _final_demand['Estadistico JDA']*_final_demand[\"Precio venta prom\"]\n_final_demand[\"Input Demanda $\"] = _final_demand['Input Demanda']*_final_demand[\"Precio venta prom\"]\n_final_demand[\"Input MKT $\"] = _final_demand['Input MKT']*_final_demand[\"Precio venta prom\"]\n_final_demand[\"Input Ventas $\"] = _final_demand['Input Ventas']*_final_demand[\"Precio venta prom\"]\n\n_final_demand = _final_demand.drop([\"A\u00f1o\", \"Mes\",  \"Estad.JDA + In.Demanda\", \"Estad.JDA + In.Demanda + In.MKT\"],axis=1)\n\nresult = _final_demand", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_pesos_por_sku_1", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand $ por SKU", "units": null, "w": "184", "x": 107, "y": 162, "z": 1}, {"color": "#4CBCFF", "definition": "_final_demand = final_demand_pesos_por_sku_1.copy()\n\n_ult_mes = _final_demand[_final_demand[\"time\"]== mes_selec ]\n_ult_mes = _ult_mes.rename(columns={\"Demand Plan Volume\":\"Demand Plan Volume Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Precio venta prom\":\"Precio venta prom Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Final Demand Plan\":\"Final Demand Plan Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"time\":\"Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Estadistico JDA\":\"Estadistico JDA Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Input Demanda\":\"Input Demanda Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Input MKT\":\"Input MKT Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Input Ventas\":\"Input Ventas Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Estadistico JDA $\":\"Estadistico JDA $ Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Input Demanda $\":\"Input Demanda $ Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Input MKT $\":\"Input MKT $ Ult Mes\"})\n_ult_mes = _ult_mes.rename(columns={\"Input Ventas $\":\"Input Ventas $ Ult Mes\"})\n\n_mes_ant = _final_demand[_final_demand[\"time\"]== mes_y_mes_anterior[to_dataarray(time)==mes_selec]]\n_mes_ant = _mes_ant.rename(columns={\"Precio venta prom\":\"Precio venta prom Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Demand Plan Volume\":\"Demand Plan Volume Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Final Demand Plan\":\"Final Demand Plan Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"time\":\"Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Estadistico JDA\":\"Estadistico JDA Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Input Demanda\":\"Input Demanda Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Input MKT\":\"Input MKT Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Input Ventas\":\"Input Ventas Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Estadistico JDA $\":\"Estadistico JDA $ Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Input Demanda $\":\"Input Demanda $ Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Input MKT $\":\"Input MKT $ Mes Ant\"})\n_mes_ant = _mes_ant.rename(columns={\"Input Ventas $\":\"Input Ventas $ Mes Ant\"})\n\n_df = _ult_mes.merge(_mes_ant,on=[\"SKU\",\"DESCRIPTION\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\"],how=\"outer\")\n \nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "final_demand_ult_mes_y_ant_1", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Final Demand Ult Mes y Ant", "units": null, "w": "184", "x": 378, "y": 162, "z": 1}, {"color": "#4CBCFF", "definition": "_df = final_demand_ult_mes_y_ant_1.copy().fillna(0)\n\n_df[\"Var. Estad. JDA\"] = (_df[\"Estadistico JDA $ Ult Mes\"]-_df[\"Estadistico JDA $ Mes Ant\"]).fillna(0)\n_df[\"Var. Input Demanda\"] = (_df[\"Input Demanda $ Ult Mes\"]-_df[\"Input Demanda $ Mes Ant\"]).fillna(0)\n_df[\"Var. Input MKT\"] = (_df[\"Input MKT $ Ult Mes\"]-_df[\"Input MKT $ Mes Ant\"]).fillna(0)\n_df[\"Var. Input Ventas\"] = (_df[\"Input Ventas $ Ult Mes\"]-_df[\"Input Ventas $ Mes Ant\"]).fillna(0)\n\n_df_monto = pd.melt(_df,[\"SKU\",  \"DESCRIPTION\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\"],[\"Final Demand Plan Mes Ant\",  \"Var. Estad. JDA\",  \"Var. Input Demanda\",  \"Var. Input MKT\",  \"Var. Input Ventas\"],\"Building Block\")\n\nresult = _df_monto", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "variacion_building_blocks", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Variacion Building Blocks", "units": null, "w": "184", "x": 668, "y": 162, "z": 1}, {"color": "#4CBCFF", "definition": "_comm = sku_a_comm.copy()\n_bg = commodity_bg.copy()\n\n_df = _comm.merge(_bg,on=[\"COMM\"])\n_df = _df[[\"SKU\",\"DESCRIPTION\",\"COMM\",\"BG\",\"DIVISION\",\"ABC\"]]\n_df.columns = [\"SKU\",\"DESCRIPTION\",\"comm_index\",\"bg_index\",\"division_index\",\"abc\"]\n_df[\"abc\"] = _df[\"abc\"].fillna(\"s.d.\")\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "sku_a_comm_con_index", "moduleId": "demand_planning_building_blocks", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "SKU a Comm", "units": null, "w": "184", "x": 639, "y": 299, "z": 1}, {"color": "#f3f3f3", "definition": "if piezas_o_monto_decision == \"Piezas\" : \n    result = demand_real_y_plan_hasta_input_venta\nelse : \n    result = demand_real_y_plan_en_monto", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demanda_real_y_plan_monto_y_piezas", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demanda Real y Plan Monto y Piezas", "units": null, "w": "184", "x": 1268, "y": 408, "z": 1}, {"color": "#f3f3f3", "definition": "if piezas_o_monto_decision == \"Piezas\" : \n    result = estad_jda_input_demanda__mkt_vtas_compos\nelse : \n    result = building_blocks_en_monto_composicion", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "building_blocks_monto_y_piezas", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Building Blocks Monto y Piezas", "units": null, "w": "184", "x": 1070, "y": 408, "z": 1}, {"color": "#4CBCFF", "definition": "_df = estadistico_jda_input_demanda_mkt_ventas.copy()\n_df = _df[_df[\"A\u00f1o\"]>=\"2019\"]\n_precio = precios_historicos_y_proyectados.copy()\n\n#_df = _df.merge(_precio, on=[\"SKU\",\"time\"],how=\"left\")\n_df = _df.merge(_precio, on=[\"SKU\"],how=\"left\")\n\n#_precio_ult_mes = _precio[_precio[\"time\"]== ultimo_mes_datos ]\n#_precio_ult_mes = _precio_ult_mes.drop(\"time\",axis=1)\n#_df_meses_proy = _df[_df[\"time\"]>ultimo_mes_datos]\n#_df_meses_proy = _df_meses_proy.drop(\"Precio promedio\",axis=1)\n#_df_meses_proy = _df_meses_proy.merge(_precio_ult_mes, on=[\"SKU\"],how=\"left\")\n\n#_df_meses_hist = _df[_df[\"time\"]<=ultimo_mes_datos]\n#_df = pd.concat([_df_meses_hist,_df_meses_proy])\n\n_df[\"Estadistico JDA\"] = _df[\"Estadistico JDA\"]*(_df[\"Precio promedio\"].fillna(0))\n_df[\"Input Demanda\"] = _df[\"Input Demanda\"]*(_df[\"Precio promedio\"].fillna(0))\n_df[\"Input MKT\"] = _df[\"Input MKT\"]*(_df[\"Precio promedio\"].fillna(0))\n_df[\"Input Ventas\"] = _df[\"Input Ventas\"]*(_df[\"Precio promedio\"].fillna(0))\n_df[\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"] = _df[\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"]*(_df[\"Precio promedio\"].fillna(0))\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df_all_abc = _df.copy()\n_df_all_abc[\"abc\"] = \"All\"\n_df = pd.concat([_df,_df_all_abc])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df[_df[\"comm_index\"]==comm_selector]\n_df = _df[_df[\"SKU\"]==sku_selector]\n_df = _df[_df[\"abc\"]==abc_selector]\n\n_df = _df.drop([\"bg_index\",\"division_index\",\"comm_index\",\"SKU\",\"abc\"],axis=1)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "building_blocks_monto", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Bulding Blocks en Monto", "units": null, "w": "184", "x": 1070, "y": 221, "z": 1}, {"color": "#4CBCFF", "definition": "_df = venta_real_por_ano.copy()\n_precio = precios_historicos_y_proyectados.copy()\n\n#_df = _df.merge(_precio, on=[\"SKU\",\"time\"],how=\"left\")\n_df = _df.merge(_precio, on=[\"SKU\"],how=\"left\")\n_df[\"Ventas Hist\"] = _df[\"Ventas Hist\"]*(_df[\"Precio promedio\"].fillna(0))\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df_all_abc = _df.copy()\n_df_all_abc[\"abc\"] = \"All\"\n_df = pd.concat([_df,_df_all_abc])\n\n_df = _df[_df[\"bg_index\"]==bg_selector]\n_df = _df[_df[\"division_index\"]==division_selector]\n_df = _df[_df[\"comm_index\"]==comm_selector]\n_df = _df[_df[\"SKU\"]==sku_selector]\n_df = _df[_df[\"abc\"]==abc_selector]\n\n_df = _df.drop([\"bg_index\",\"division_index\",\"comm_index\",\"SKU\",\"abc\"],axis=1)\n\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "venta_real_seleccion_en_monto", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Venta Real Seleccion en Monto", "units": null, "w": "184", "x": 1268, "y": 221, "z": 1}, {"color": "#4CBCFF", "definition": "_real = venta_real_seleccion_en_monto.copy()\n_real = _real[_real[\"time\"]<=ultimo_mes_datos]\n_real = _real.rename(columns={\"Ventas Hist\":\"value\"})\n_real = _real[[\"Mes\",\"compare\",\"value\"]]\n\n_df = building_blocks_monto.copy()\n_df = _df[['time','Estad.JDA + In.Demanda + In.MKT + In.Ventas',\"A\u00f1o\",\"Mes\"]] \n_df = _df[_df[\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"]!=0]\n_df [\"Real\"] = \"Plan\"\n_df[\"compare\"] = _df[['A\u00f1o',\"Real\"]].apply(lambda x: ' '.join(x), axis=1)\n_df = _df.rename(columns={\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\":\"value\"})\n_df = _df[[\"Mes\",\"compare\",\"value\"]]\n\n_df = pd.concat([_df,_real]).fillna(0)\n\nresult = _df ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demand_real_y_plan_con_monto_aux", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Real y Plan con Monto Aux", "units": null, "w": "184", "x": 1268, "y": 279, "z": 1}, {"color": "#4cbcff", "definition": "_df = building_blocks_monto.copy()\n\n_df = _df[[\"time\",\"Estadistico JDA\", \"Input Demanda\",\"Input MKT\", \"Input Ventas\",\"Estad.JDA + In.Demanda + In.MKT + In.Ventas\"]]\n_df.columns = [\"time\",\" Estadistico JDA\", \" Input Demanda\",\" Input MKT\", \" Input Ventas\",\"Final Demand Plan\"]\n_df = pd.melt(_df,[\"time\"],[\" Estadistico JDA\",\" Input Demanda\", \" Input MKT\", \" Input Ventas\",\"Final Demand Plan\"],\"Componente\",\"valor\")\n\n_df = _df.set_index([\"time\",\"Componente\"])\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "building_blocks_en_monto_composicion", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Building Blocks en Monto Composicion", "units": null, "w": "184", "x": 1070, "y": 343, "z": 1}, {"color": "#4cbcff", "definition": "_df = demand_real_y_plan_con_monto_aux.copy()\n#_df = _df[[\"SKU\",\"Mes\",\"compare\",\"comm_index\",\"bg_index\",\"division_index\",\"value\"]]\n_df = _df.set_index([\"Mes\",\"compare\"])\n\nresult = _df ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "demand_real_y_plan_en_monto", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand Real y Plan en Monto", "units": null, "w": "184", "x": 1268, "y": 343, "z": 1}, {"color": "#4CBCFF", "definition": "_precio_hist = precio_por_sku_para_accuracy.copy()\n_precio_hist[\"time\"] = _precio_hist[\"time\"].astype(str)\n_precio_hist = _precio_hist[_precio_hist[\"time\"]!= ultimo_mes_datos ]\n_precio_ult_mes = precio_venta.copy()\n#_precio_ult_mes[\"time\"] = ultimo_mes_datos\n_precio_ult_mes = _precio_ult_mes.rename(columns={\"Precio venta prom\":\"Precio promedio\"})\n#_precio = _precio_hist.append(_precio_ult_mes)\nresult = _precio_ult_mes#_precio", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "precios_historicos_y_proyectados", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Precios Historicos y Proyectados", "units": null, "w": "184", "x": 852, "y": 221, "z": 1}, {"color": "#f3f3f3", "definition": "_df = efecto_cantidad_y_precio.copy()\n\n_df[\"SKU Selec\"] = _df[\"SKU\"]\n_df[\"comm_index Selec\"] = _df[\"comm_index\"]\n_df[\"division_index Selec\"] = _df[\"division_index\"]\n_df[\"bg_index Selec\"] = _df[\"bg_index\"]\n_df[\"abc Selec\"] = _df[\"abc\"]\n\n_df_all_sku = _df.copy()\n_df_all_sku[\"SKU Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_sku])\n\n_df_all_comm = _df.copy()\n_df_all_comm[\"comm_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_comm])\n\n_df_all_division = _df.copy()\n_df_all_division[\"division_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_division])\n\n_df_all_bg = _df.copy()\n_df_all_bg[\"bg_index Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_bg])\n\n_df_all_abc = _df.copy()\n_df_all_abc[\"abc Selec\"] = \"All\"\n_df = pd.concat([_df,_df_all_abc])\n\n_df = _df[_df[\"bg_index Selec\"]==bg_selector]\n_df = _df[_df[\"division_index Selec\"]==division_selector]\n_df = _df[_df[\"comm_index Selec\"]==comm_selector]\n_df = _df[_df[\"SKU Selec\"]==sku_selector]\n_df = _df[_df[\"abc Selec\"]==abc_selector]\n\n_df = _df.drop([\"Ult Mes\", \"Demand Plan Volume Ult Mes\", \"Precio venta prom Ult Mes\", \"Mes Ant\", \"Demand Plan Volume Mes Ant\",\"Precio venta prom Mes Ant\", \"Var. Cant.\", \"Var. Precio.\",\"Final Demand Plan Ult Mes\"],axis=1) \n\n_df = _df.rename(columns={\"Final Demand Plan Mes Ant\":\" Mes anterior\"})\n_df = pd.melt(_df,[\"SKU\",\"DESCRIPTION\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\"],[\" Mes anterior\", \"Ef. Cant.\", \"Ef. Precio\", \"Ef. Combinado\"],\"Componente\")\n\n_df_mes_ant = _df[_df[\"Componente\"]==\" Mes anterior\"]\n_df_mes_ant[\"SKU\"] = \" Mes anterior\"\n_df_mes_ant[\"DESCRIPTION\"] = \" Mes anterior\"\n_df_mes_ant[\"comm_index\"] = \" Mes anterior\"\n_df_mes_ant[\"bg_index\"] = \" Mes anterior\"\n_df_mes_ant[\"division_index\"] = \" Mes anterior\"\n_df_mes_ant[\"abc\"] = \" Mes anterior\"\n \n_df_resto =_df[_df[\"Componente\"]!=\" Mes anterior\"]\n\n_df = pd.concat([_df_mes_ant,_df_resto])\n\n_df = _df.groupby([\"SKU\",\"DESCRIPTION\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Componente\"]).sum()\n\n#_df = _df.set_index([\"SKU\", \"comm_index\", \"bg_index\", \"division_index\", \"abc\",\"Componente\"])\nresult = _df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "factorial_final_demand_1", "moduleId": "summary_demand_plan", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Factorial Final Demand", "units": null, "w": "184", "x": 833, "y": 665, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"All\",\"Input Demanda\", \"Input MKT\", \"Input Ventas\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "building_blocks_inputs", "moduleId": "demand_planning_building_blocks", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Building Blocks Inputs", "units": null, "w": "96", "x": 1024, "y": 42, "z": 1}, {"color": "#4cffa6", "definition": "result = choice( building_blocks_inputs,1, includeAll=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "building_blocks_inputs_selector", "moduleId": "demand_planning_building_blocks", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Building Blocks Inputs Selector", "units": null, "w": "255", "x": 1144, "y": 165, "z": 1}, {"color": "#4cffa6", "definition": "result = building_blocks_inputs_selector", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a3c9ee854ef854b33a50cbf7b1812dc4d", "moduleId": "demand_planning_building_blocks", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "building_blocks_inputs_selector", "picture": null, "title": "Building Blocks Inputs Selector", "units": null, "w": "255", "x": 1144, "y": 165, "z": 1}, {"color": "#6699ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "moduleId": "machine_learning_mod", "nodeClass": "module", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Last Mille Optimization Ruting", "units": null, "w": "170", "x": 189, "y": 190, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[15], [15], [15], [15], [ 0], [ 0], [ 0], [ 0], [ 0], [ 0]],[vehicles, unit])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "vehicles_load_capacity", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Truck Capacity", "units": null, "w": "166", "x": 443, "y": 82, "z": 1}, {"color": "#FFFF4B", "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "depot", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Depot", "units": null, "w": "151", "x": 250, "y": 298, "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[0], [8], [1], [2], [4], [2], [4], [1], [8], [1], [2], [1], [2], [4], [4], [8], [8]],[clientes, unit])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "demand_end_point", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demand by Client", "units": null, "w": "151", "x": 250, "y": 171, "z": 1}, {"color": "#4CBCFF", "definition": "_data = {}\n_data['distance_matrix'] =  (distance_matrix.values).tolist()\n_data['demands'] = (demand_end_point.sel({unit.name:'Tons'},drop=True).values).tolist()\n_data['vehicle_capacities'] = (vehicles_load_capacity.sel({unit.name:'Tons'},drop=True).values).tolist()\n_data['num_vehicles'] = number_of_vehicles\n_data['depot'] = depot\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "data_dictionary", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data Dictionary", "units": null, "w": "166", "x": 442, "y": 299, "z": 1}, {"color": "#FFFF00", "definition": "result = 45* create_dataarray( [\r\n        [\r\n            0, 548, 776, 696, 582, 274, 502, 194, 308, 194, 536, 502, 388, 354,\r\n            468, 776, 662\r\n        ],\r\n        [\r\n            548, 0, 684, 308, 194, 502, 730, 354, 696, 742, 1084, 594, 480, 674,\r\n            1016, 868, 1210\r\n        ],\r\n        [\r\n            776, 684, 0, 992, 878, 502, 274, 810, 468, 742, 400, 1278, 1164,\r\n            1130, 788, 1552, 754\r\n        ],\r\n        [\r\n            696, 308, 992, 0, 114, 650, 878, 502, 844, 890, 1232, 514, 628, 822,\r\n            1164, 560, 1358\r\n        ],\r\n        [\r\n            582, 194, 878, 114, 0, 536, 764, 388, 730, 776, 1118, 400, 514, 708,\r\n            1050, 674, 1244\r\n        ],\r\n        [\r\n            274, 502, 502, 650, 536, 0, 228, 308, 194, 240, 582, 776, 662, 628,\r\n            514, 1050, 708\r\n        ],\r\n        [\r\n            502, 730, 274, 878, 764, 228, 0, 536, 194, 468, 354, 1004, 890, 856,\r\n            514, 1278, 480\r\n        ],\r\n        [\r\n            194, 354, 810, 502, 388, 308, 536, 0, 342, 388, 730, 468, 354, 320,\r\n            662, 742, 856\r\n        ],\r\n        [\r\n            308, 696, 468, 844, 730, 194, 194, 342, 0, 274, 388, 810, 696, 662,\r\n            320, 1084, 514\r\n        ],\r\n        [\r\n            194, 742, 742, 890, 776, 240, 468, 388, 274, 0, 342, 536, 422, 388,\r\n            274, 810, 468\r\n        ],\r\n        [\r\n            536, 1084, 400, 1232, 1118, 582, 354, 730, 388, 342, 0, 878, 764,\r\n            730, 388, 1152, 354\r\n        ],\r\n        [\r\n            502, 594, 1278, 514, 400, 776, 1004, 468, 810, 536, 878, 0, 114,\r\n            308, 650, 274, 844\r\n        ],\r\n        [\r\n            388, 480, 1164, 628, 514, 662, 890, 354, 696, 422, 764, 114, 0, 194,\r\n            536, 388, 730\r\n        ],\r\n        [\r\n            354, 674, 1130, 822, 708, 628, 856, 320, 662, 388, 730, 308, 194, 0,\r\n            342, 422, 536\r\n        ],\r\n        [\r\n            468, 1016, 788, 1164, 1050, 514, 514, 662, 320, 274, 388, 650, 536,\r\n            342, 0, 764, 194\r\n        ],\r\n        [\r\n            776, 868, 1552, 560, 674, 1050, 1278, 742, 1084, 810, 1152, 274,\r\n            388, 422, 764, 0, 798\r\n        ],\r\n        [\r\n            662, 1210, 754, 1358, 1244, 708, 480, 856, 514, 468, 354, 844, 730,\r\n            536, 194, 798, 0\r\n        ],\r\n    ], [clientes,clientes_copy], dtype=float )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "distance_matrix", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distance Matrix", "units": null, "w": "151", "x": 250, "y": 232, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( to_dataarray( check_report )=='Load Capacity', (vehicles_load_capacity.sel({unit.name:'Tons'},drop=True)).sum('vehicles'),\n            xr.where( to_dataarray( check_report )=='Demand', demand_end_point.sel({unit.name:'Tons'},drop=True).sum('clientes'),\n (vehicles_load_capacity.sel({unit.name:'Tons'},drop=True)).sum('vehicles')>=demand_end_point.sel({unit.name:'Tons'},drop=True).sum('clientes')))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "check_capacity__demanda", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capacidad >= Demanda ", "units": null, "w": "146", "x": 630, "y": 161, "z": 1}, {"color": "#EEEEEE", "definition": "", "description": "Herramienta de Optimizaci\u00f3n de Ruteo de \u00daltima Milla", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "611", "identifier": "a842490906ad44ff9b3d62f25d6dd0998", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "1317", "x": 96, "y": 63, "z": -1}, {"color": "#4CBCFF", "definition": "_df = pd.DataFrame(optimization_vrpc.split('///'))\n_df =_df[0].str.split('\\n',expand=True)\n_df =_df[0] \n_df = _df.iloc[-1].split('/*/')[0]\n\nresult =  float(_df.split(':')[1].replace('m',''))/1000\n\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "output_distance", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total distance of all routes", "units": null, "w": "146", "x": 636, "y": 426, "z": 1}, {"color": "#4CBCFF", "definition": "\n_df = pd.DataFrame(optimization_vrpc.split('///'))\n_df =_df[0].str.split('\\n',expand=True)\n_rep_df = pd.DataFrame()\n_veh= _df[0:10]\n_dis= (_veh[2]).str.replace('Distance of the route: ','').str.replace('m','').astype(float)\n_loa= (_veh[3]).str.replace('Load of the route:','').astype(float)\n_rou= (_veh[1]).str.split('->',expand=True).fillna('--')\n_rou.columns= np.where(_rou.columns==0, 'Depot', np.where(_rou.columns==((_rou.columns).size-1),'Final',_rou.columns))\n_rep_df =_rou\n_rep_df['Distance'] =_dis\n_rep_df['Load'] =_loa\n\nresult =  _rep_df", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "vehicle_routig", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Routing Output", "units": null, "w": "146", "x": 636, "y": 374, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "maps", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Maps", "units": null, "w": "166", "x": 441, "y": 464, "z": 1}, {"color": "#4CBCFF", "definition": "result =  pd.read_excel(current_path+ '/Machine Learning Inputs/Lat Log.xlsx', index_col=0)  # doctest: +SKIP", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "directions_and_coordinates", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Directions and Coordinates", "units": null, "w": "100", "x": "553", "y": "-48", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in directions_and_coordinates[[\"Long\",\"Lat\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "46", "identifier": "ml_query_string_copy", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "110", "x": "327", "y": "-44", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/trip/v1/car/\" + ml_query_string_copy_copy + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    data_inde = json.loads(url.read().decode())\n    result=data_inde\n    \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "ml_get_routes_copy", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Routes", "units": null, "w": "152", "x": "23", "y": "238", "z": 1}, {"color": "#4CBCFF", "definition": "#http://project-osrm.org/docs/v5.22.0/api/#table-service\n\nimport urllib.request, json \n\n_query = \"http://router.project-osrm.org/table/v1/driving/\" + ml_query_string_copy\n#+\"?annotations=distance\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    data_inde = json.loads(url.read().decode())\n    result=data_inde\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "get_geocoding_", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Geocoding", "units": null, "w": "100", "x": "157", "y": "-48", "z": 1}, {"color": null, "definition": "_arr = np.asanyarray( get_geocoding_['durations'])\n\nresult = xr.DataArray( _arr, coords=[clientes,clientes_copy ] )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "ml_parse_result_copy_copy", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Duration Matrix", "units": null, "w": "116", "x": "445", "y": "553", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in trip_string[[\"Long\",\"Lat\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "ml_query_string_copy_copy", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "152", "x": "23", "y": "189", "z": 1}, {"color": "#4CBCFF", "definition": "_data = directions_and_coordinates[['Long','Lat']]\n_a0 = pd.DataFrame()\n_a0 = _a0.append( _data.iloc[0])\n_a0 = _a0.append( _data.iloc[1])\n_a0 = _a0.append( _data.iloc[4])\n_a0 = _a0.append( _data.iloc[3])\n_a0 = _a0.append( _data.iloc[15])\n#_a0 = _a0.append( _data.iloc[0])\n\nresult = _a0\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "trip_string", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trip String", "units": null, "w": "152", "x": "23", "y": "137", "z": 1}, {"color": "#CCCCCC", "definition": "import json\n\n_json = {\n    \"type\":\"polyline\",\n    \"latlngs\": parse\n    }\n\n#result = pp.cube([line_path,map_attributes],[ json.dumps(_json)])\nresult =cp.cube([line_path_cp,map_attributes_cp],[ json.dumps(_json)])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "ml_draw_paths_copy", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Draw Paths", "units": null, "w": "152", "x": "23", "y": "342", "z": 1}, {"color": "#4CBCFF", "definition": "_arr = []\nif not ml_get_routes_copy[\"trips\"] is None  and len(ml_get_routes_copy[\"trips\"]) > 0:\n    _route = ml_get_routes_copy[\"trips\"][0]\n    if _route[\"geometry\"] and _route[\"geometry\"][\"coordinates\"]:\n        _arr = _route[\"geometry\"][\"coordinates\"]\n\nresult = []\nif not _arr is None:\n    for _item in _arr:\n        result.append(list(reversed(_item)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "parse", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parse", "units": null, "w": "152", "x": "23", "y": "287", "z": 1}, {"color": "#4CBCFF", "definition": "result = vehicle_routig", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a4619664e66704d7785060aab28fe144f", "moduleId": "maps", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "vehicle_routig", "picture": null, "title": "Routing Output", "units": null, "w": "144", "x": "27", "y": "95", "z": 1}, {"color": "#4CBCFF", "definition": "_df = vehicle_routig.drop(['Depot','Final','Distance','Load'],axis=1)\n\nfor col in _df.columns:\n    #_df[col]=_df[col].str.replace('Load','')\n    _df[col]=(_df[col].str.split(' ',expand=True))[2]\n\n_df.columns =_df.columns.astype(float) \n\nif (version==\"Ruteo Original\"):\n    _df_to_map=original_case\nelse:\n    _df_to_map=_df.fillna(100)\n\nresult = _df_to_map ", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "secuencia", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Secuencia", "units": null, "w": "184", "x": "511", "y": "48", "z": 1}, {"color": "#EEEEEE", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "386", "identifier": "afe750502cd1d4ab5841a7f161283b0f0", "moduleId": "maps", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "180", "x": "5", "y": "13", "z": -1}, {"color": "#CCCCCC", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "388", "identifier": "afe750502cd1d4ab5841a7f161283b0f0_copy", "moduleId": "maps", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "836", "x": "196", "y": "12", "z": -1}, {"color": "#4CBCFF", "definition": "_data = directions_and_coordinates[['Long','Lat']]\n_rou = (secuencia.iloc[0]).astype(int)\n_rou =_rou[_rou!=100]\n\n_a0 = pd.DataFrame()\n_a0 = _a0.append( _data.iloc[0])\nj = 0\n\nwhile j<= (_rou.size-1):\n    n = (_rou.iloc[j])\n    _a0 = _a0.append( _data.iloc[n])\n    j+= 1\n    \n_a0 = _a0.append( _data.iloc[0])\n\nresult = _a0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "trip_string_0", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trip String", "units": null, "w": "196", "x": "209", "y": "100", "z": 1}, {"color": "#4CBCFF", "definition": "_data = directions_and_coordinates[['Long','Lat']]\n_rou = (secuencia.iloc[1]).astype(int)\n_rou =_rou[_rou!=100]\n\n_a0 = pd.DataFrame()\n_a0 = _a0.append( _data.iloc[0])\nj = 0\n\nwhile j<= (_rou.size-1):\n    n = (_rou.iloc[j])\n    _a0 = _a0.append( _data.iloc[n])\n    j+= 1\n    \n_a0 = _a0.append( _data.iloc[0])\n\nresult = _a0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "trip_string_1", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trip String", "units": null, "w": "196", "x": "412", "y": "100", "z": 1}, {"color": "#4CBCFF", "definition": "_data = directions_and_coordinates[['Long','Lat']]\n_rou = (secuencia.iloc[2]).astype(int)\n_rou =_rou[_rou!=100]\n\n_a0 = pd.DataFrame()\n_a0 = _a0.append( _data.iloc[0])\nj = 0\n\nwhile j<= (_rou.size-1):\n    n = (_rou.iloc[j])\n    _a0 = _a0.append( _data.iloc[n])\n    j+= 1\n    \n_a0 = _a0.append( _data.iloc[0])\n\nresult = _a0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "trip_string_2", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trip String", "units": null, "w": "196", "x": "616", "y": "101", "z": 1}, {"color": "#4CBCFF", "definition": "_data = directions_and_coordinates[['Long','Lat']]\n_rou = (secuencia.iloc[3]).astype(int)\n_rou =_rou[_rou!=100]\n\n_a0 = pd.DataFrame()\n_a0 = _a0.append( _data.iloc[0])\nj = 0\n\nwhile j<= (_rou.size-1):\n    n = (_rou.iloc[j])\n    _a0 = _a0.append( _data.iloc[n])\n    j+= 1\n    \n_a0 = _a0.append( _data.iloc[0])\n\nresult = _a0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "trip_string_3", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Trip String", "units": null, "w": "196", "x": "828", "y": "103", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in trip_string_0[[\"Long\",\"Lat\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_query_string_0", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "196", "x": "210", "y": "146", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/trip/v1/car/\" + ml_query_string_0 + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    _data = json.loads(url.read().decode())\n    result= _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_get_routes_0", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Routes", "units": null, "w": "196", "x": "210", "y": "202", "z": 1}, {"color": "#4CBCFF", "definition": "_arr = []\nif not ml_get_routes_0[\"trips\"] is None  and len(ml_get_routes_0[\"trips\"]) > 0:\n    _route = ml_get_routes_0[\"trips\"][0]\n    if _route[\"geometry\"] and _route[\"geometry\"][\"coordinates\"]:\n        _arr = _route[\"geometry\"][\"coordinates\"]\n\nresult = []\nif not _arr is None:\n    for _item in _arr:\n        result.append(list(reversed(_item)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parse_0", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parse", "units": null, "w": "196", "x": "210", "y": "264", "z": 1}, {"color": "#CCCCCC", "definition": "import json\n\n_json = {\n    \"type\":\"polyline\",\n    \"latlngs\": parse_0\n    }\n\nresult = create_dataarray([ json.dumps(_json),1] , [linepath,mapattributes], dtype=None )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_draw_paths_vehi0", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Draw Paths", "units": null, "w": "196", "x": "210", "y": "336", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in trip_string_1[[\"Long\",\"Lat\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_query_string_1", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "196", "x": "413", "y": "146", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/trip/v1/car/\" + ml_query_string_1 + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    _data = json.loads(url.read().decode())\n    result=_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_get_routes_1", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Routes", "units": null, "w": "196", "x": "413", "y": "202", "z": 1}, {"color": "#4CBCFF", "definition": "_arr = []\nif not ml_get_routes_1[\"trips\"] is None  and len(ml_get_routes_1[\"trips\"]) > 0:\n    _route = ml_get_routes_1[\"trips\"][0]\n    if _route[\"geometry\"] and _route[\"geometry\"][\"coordinates\"]:\n        _arr = _route[\"geometry\"][\"coordinates\"]\n\nresult = []\nif not _arr is None:\n    for _item in _arr:\n        result.append(list(reversed(_item)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parse_1", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parse", "units": null, "w": "196", "x": "413", "y": "264", "z": 1}, {"color": "#CCCCCC", "definition": "import json\n\n_json = {\n    \"type\":\"polyline\",\n    \"latlngs\": parse_1\n    }\n\n\nresult =  create_dataarray([ json.dumps(_json),2] , [linepath,mapattributes], dtype=None )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_draw_paths_vehi1", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Draw Paths", "units": null, "w": "196", "x": "413", "y": "336", "z": 1}, {"color": "#CCCCCC", "definition": "import json\n\n_json = {\n    \"type\":\"polyline\",\n    \"latlngs\": parse_2\n    }\n\nresult =  create_dataarray([ json.dumps(_json),3] , [linepath,mapattributes], dtype=None )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_draw_paths_vehi2", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Draw Paths", "units": null, "w": "196", "x": "617", "y": "337", "z": 1}, {"color": "#CCCCCC", "definition": "import json\n\n_json = {\n    \"type\":\"polyline\",\n    \"latlngs\": parse_3\n    }\nresult =  create_dataarray([ json.dumps(_json),4] , [linepath,mapattributes], dtype=None )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_draw_paths_vehi3", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Draw Paths", "units": null, "w": "196", "x": "829", "y": "339", "z": 1}, {"color": "#4CBCFF", "definition": "_arr = []\nif not ml_get_routes_2[\"trips\"] is None  and len(ml_get_routes_2[\"trips\"]) > 0:\n    _route = ml_get_routes_2[\"trips\"][0]\n    if _route[\"geometry\"] and _route[\"geometry\"][\"coordinates\"]:\n        _arr = _route[\"geometry\"][\"coordinates\"]\n\nresult = []\nif not _arr is None:\n    for _item in _arr:\n        result.append(list(reversed(_item)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parse_2", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parse", "units": null, "w": "196", "x": "617", "y": "265", "z": 1}, {"color": "#4CBCFF", "definition": "_arr = []\nif not ml_get_routes_3[\"trips\"] is None  and len(ml_get_routes_3[\"trips\"]) > 0:\n    _route = ml_get_routes_3[\"trips\"][0]\n    if _route[\"geometry\"] and _route[\"geometry\"][\"coordinates\"]:\n        _arr = _route[\"geometry\"][\"coordinates\"]\n\nresult = []\nif not _arr is None:\n    for _item in _arr:\n        result.append(list(reversed(_item)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "parse_3", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Parse", "units": null, "w": "196", "x": "829", "y": "267", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/trip/v1/car/\" + ml_query_string_2 + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    _data = json.loads(url.read().decode())\n    result=_data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_get_routes_2", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Routes", "units": null, "w": "196", "x": "617", "y": "203", "z": 1}, {"color": null, "definition": "import urllib.request, json \n\n_query = \"http://router.project-osrm.org/trip/v1/car/\" + ml_query_string_3 + \"?geometries=geojson\"\n\nresult = None\nwith urllib.request.urlopen(_query) as url:\n    _data = json.loads(url.read().decode())\n    result= _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_get_routes_3", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get Routes", "units": null, "w": "196", "x": "829", "y": "205", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in trip_string_3[[\"Long\",\"Lat\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_query_string_3", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "196", "x": "829", "y": "149", "z": 1}, {"color": null, "definition": "result=\"\"\nfor itemRow in trip_string_2[[\"Long\",\"Lat\"]].values:\n    result = result + str(itemRow[0]) + \",\" + str(itemRow[1]) + \";\"\nresult = result[:-1]     \n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_query_string_2", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Query String", "units": null, "w": "196", "x": "617", "y": "147", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Path'])\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "linepath", "moduleId": "maps", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "line_path", "units": null, "w": "100", "x": 103, "y": 448, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Geo Definition','Color'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "mapattributes", "moduleId": "maps", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "map_attributes", "units": null, "w": "100", "x": 92, "y": 498, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( to_dataarray(  vehicles)==0,ml_draw_paths_vehi0,\n        xr.where( to_dataarray(  vehicles)==1,ml_draw_paths_vehi1,\n        xr.where( to_dataarray(  vehicles)==2,ml_draw_paths_vehi2,ml_draw_paths_vehi3)))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "routes", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Routes", "units": null, "w": "150", "x": "537", "y": "431", "z": 1}, {"color": "#CCCCCC", "definition": "\"\"\"\n_lat_long = ml_clients_to_visit_df[['Longitude','Latitude']].to_xarray().to_array().rename({'Client':clients.name, 'variable':latitude_longitude.name})\n\nresult = pp.changeIndex( _lat_long, latitude_longitude, latitude_longitude_attributes, defaultValue = 0 )\n\"\"\"\nresult = cp.cubeFromPandas( ml_clients_to_visit_df.reset_index(), [clients_cp], latitude_longitude_attributes_cp, indexColumnHeaders=[\"Client\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ml_clients_spots_copy", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients Spots", "units": null, "w": "184", "x": "1043", "y": "-28", "z": 1}, {"color": null, "definition": "result = pd.Index(['Latitude','Longitude','Icon'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "latitude_longitude_attributes_", "moduleId": "maps", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Latitude / Longitude Attributes", "units": null, "w": "146", "x": "1067", "y": "-101", "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index( 0, 16, _step=1 ).astype(int)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "clients_copy", "moduleId": "maps", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients", "units": null, "w": "100", "x": 1199, "y": 52, "z": 1}, {"color": "#4CBCFF", "definition": "_df = directions_and_coordinates[['Long','Lat']].to_xarray()\n#_df.colums = ['Lat_long','Cliente','Value'] \nresult = xr.where( to_dataarray( latitude_longitude_attributes_ ) =='Longitude', set_domain( _df['Long'], {'index':clients_copy}, defaultValue=None ),  xr.where( to_dataarray( latitude_longitude_attributes_ ) =='Latitude',set_domain( _df['Lat'], {'index':clients_copy}, defaultValue=None ),clients_copy.values))\n_df\n#to_xarray()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "depot_and_clients_", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Depot and Clients ", "units": null, "w": "100", "x": "782", "y": "-48", "z": 1}, {"color": "#4cffa6", "definition": "result = choice(opcionselector,1,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "version", "moduleId": "maps", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ruteo", "units": null, "w": "100", "x": 1031, "y": 19, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Ruteo Original\",\"Ruteo Optimo\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "opcionselector", "moduleId": "maps", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "OpcionSelector", "units": null, "w": "100", "x": "1219", "y": "93", "z": 1}, {"color": null, "definition": "result = version", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "36", "identifier": "aad64bd3657514a83bfb6862be590738e", "moduleId": "maps", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "version", "picture": null, "title": "Ruteo", "units": null, "w": "200", "x": 1001, "y": 69, "z": 1}, {"color": "#4CBCFF", "definition": "_dd = pd.DataFrame([[9,4,3,1],[14,16,10,2],[12,11,15,13],[7,8,6,5],[0,100,100,100],[0,100,100,100],[0,100,100,100],[0,100,100,100],[0,100,100,100],[0,100,100,100]],columns=[1,  2,  3,  4,])\nresult = _dd", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "original_case", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Original Case", "units": null, "w": "100", "x": "757", "y": "19", "z": 1}, {"color": "#4CBCFF", "definition": "_demanda = subscript( demand_end_point, unit, \"Tons\" )\n_lat_lon = change_index( depot_and_clients_, clients_copy, clientes, compareMode=2, defaultValue=0 )\n_data = xr.where( to_dataarray(latitude_longitude_attributes_) == \"Icon\", _demanda, _lat_lon )\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "demanda_map", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Demanda", "units": null, "w": "100", "x": 919, "y": -48, "z": 1}, {"color": null, "definition": "_cliente_ti = xr.where (get_pos(clientes) == 0, 'Dep\u00f3sito' ,to_dataarray( 'Cliente ' + clientes ).values)\n_cliente_de = subscript( demand_end_point, unit, 'Tons' )\n\nresult = xr.where(to_dataarray(infor_clientes) == 'Cliente',_cliente_ti,_cliente_de)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "data_para_mapa_de_demanda", "moduleId": "maps", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data para mapa de demanda", "units": null, "w": "100", "x": "1200", "y": "184", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Cliente\",\"Demanda\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "infor_clientes", "moduleId": "maps", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Informaci\u00f3n de clientes", "units": null, "w": "100", "x": "1091", "y": "184", "z": 1}, {"color": "#4CBCFF", "definition": "result =result = ((vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True) ==vehicles_load_capacity)*vessels_types.sel({report_copy.name:'Cost per Km ($/Km)'},drop=True) ).sum(vessel_types.name)\n\n#xr.DataArray([1.69,1.69,1.69,1.69,1.69,1.69,1.69,1.69,1.69,1.69],[vehicles])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "unit_cost_km", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cost per Km ($/Km)", "units": "$/Km", "w": "172", "x": 805, "y": 327, "z": 1}, {"color": "#4CBCFF", "definition": "_df_dis = vehicle_routig[['Distance']]\n_df_dis.index = _df_dis.index+1\n_df_dis.index = _df_dis.index.astype(str)\n_df_dis = _df_dis['Distance'].to_xarray().astype(float)\n\nresult = set_domain( _df_dis, {'index':vehicles}, defaultValue=None ) *unit_cost_km/1000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "total_cost", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total Cost", "units": "($)", "w": "172", "x": 805, "y": 393, "z": 1}, {"color": "#4CBCFF", "definition": "\n_df = pd.DataFrame(optimization_vrpc.split('///'))\n_df =_df[0].str.split('\\n',expand=True)\n_df =_df[0] \n_df = _df.iloc[-1].split('/*/')[1] \nresult =   float(_df.split(':')[1])\n\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "output_load", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Total load of all routes", "units": null, "w": "146", "x": 634, "y": 317, "z": 1}, {"color": "#4CBCFF", "definition": "_df_dis = vehicle_routig[['Load']]\n_df_dis.index = _df_dis.index+1\n_df_dis.index = _df_dis.index.astype(str)\n_df_dis = _df_dis['Load'].to_xarray().astype(float)\n\nresult = set_domain( _df_dis, {'index':vehicles}, defaultValue=None ) /vehicles_load_capacity", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "utilization", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Utilization", "units": "%", "w": "146", "x": 998, "y": 395, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = total_cost.sum(vehicles.name)\n_distance = float(output_distance)\nresult = _tot_cost/(_distance)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "average_cost_per_kms", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Average Cost per Km", "units": "$/km", "w": "172", "x": 805, "y": 445, "z": 1}, {"color": "#4CBCFF", "definition": "_df_dis = vehicle_routig.replace('--','')\n\n_df_dis['vehicles'] = (vehicle_routig.index )\n_df_dis =vehicle_routig.stack().reset_index()\n_df_dis.columns = ['vehicles','cols','value']\n_df_dis['vehicles'] = _df_dis['vehicles'] + 1\n_df_dis['vehicles'] = _df_dis['vehicles'].astype(str)\n_df_dis = _df_dis.set_index(['vehicles','cols']) \n_df_dis = _df_dis.replace('--','')\n_df_dis = _df_dis.replace(' 0 Load(0) ','')\n_df_dis = _df_dis.replace('  0 Load(0)','')\n\n_df_dis=_df_dis['value'].to_xarray() \nresult = set_domain( _df_dis, {'vehicles':vehicles,'cols':cols }, defaultValue='' )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "output_data", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimized Vehicle Routing ", "units": null, "w": "146", "x": 635, "y": 500, "z": 1}, {"color": "#CCCCCC", "definition": "from __future__ import print_function\r\nfrom ortools.constraint_solver import routing_enums_pb2\r\nfrom ortools.constraint_solver import pywrapcp\r\n\r\ndef print_solution(data, manager, routing, assignment):\r\n    \"\"\"Prints assignment on console.\"\"\"\r\n        # Display dropped nodes.\r\n    if check_deman==False:\r\n        dropped_nodes = 'Dropped nodes:'\r\n        for node in range(routing.Size()):\r\n            if routing.IsStart(node) or routing.IsEnd(node):\r\n                continue\r\n            if assignment.Value(routing.NextVar(node)) == node:\r\n                dropped_nodes += ' {}'.format(manager.IndexToNode(node))\r\n                print(dropped_nodes)\r\n    total_distance = 0\r\n    total_load = 0\r\n    _out_re = ''\r\n    for vehicle_id in range(data['num_vehicles']):\r\n        index = routing.Start(vehicle_id)\r\n        plan_output = 'Route for vehicle {}:\\n'.format(vehicle_id)\r\n        route_distance = 0\r\n        route_load = 0\r\n        while not routing.IsEnd(index):\r\n            node_index = manager.IndexToNode(index)\r\n            route_load += data['demands'][node_index]\r\n            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)\r\n            previous_index = index\r\n            index = assignment.Value(routing.NextVar(index))\r\n            route_distance += routing.GetArcCostForVehicle(\r\n                previous_index, index, vehicle_id)\r\n        plan_output += ' {0} Load({1})\\n'.format(\r\n            manager.IndexToNode(index), route_load)\r\n        plan_output += 'Distance of the route: {}m\\n'.format(route_distance)\r\n        plan_output += 'Load of the route: {}\\n'.format(route_load)\r\n        print(plan_output)\r\n        total_distance += route_distance\r\n        total_load += route_load\r\n        _out_re = _out_re+plan_output+'///'\r\n    print('Total distance of all routes: {}m'.format(total_distance))\r\n    print('Total load of all routes: {}'.format(total_load))\r\n    if check_deman==False:\r\n        _out_re =_out_re+'Total distance of all routes: {}m'.format(total_distance)+'/*/'+'Total load of all routes: {}'.format(total_load)+ '/*/'+dropped_nodes\r\n    else:\r\n        _out_re =_out_re+'Total distance of all routes: {}m'.format(total_distance)+'/*/'+'Total load of all routes: {}'.format(total_load)    \r\n    return _out_re\r\n\r\n\r\n\r\n\"\"\"Solve the CVRP problem.\"\"\"\r\n# Instantiate the data problem.\r\n_data = data_dictionary\r\n\r\n# Create the routing index manager.\r\nmanager = pywrapcp.RoutingIndexManager(\r\n    len(_data['distance_matrix']), _data['num_vehicles'], _data['depot'])\r\n\r\n# Create Routing Model.\r\nrouting = pywrapcp.RoutingModel(manager)\r\n\r\n\r\n# Create and register a transit callback.\r\ndef distance_callback(from_index, to_index):\r\n    \"\"\"Returns the distance between the two nodes.\"\"\"\r\n    # Convert from routing variable Index to distance matrix NodeIndex.\r\n    from_node = manager.IndexToNode(from_index)\r\n    to_node = manager.IndexToNode(to_index)\r\n    return _data['distance_matrix'][from_node][to_node]\r\n\r\ntransit_callback_index = routing.RegisterTransitCallback(distance_callback)\r\n\r\n# Define cost of each arc.\r\nrouting.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\r\n\r\n\r\n# Add Capacity constraint.\r\ndef demand_callback(from_index):\r\n    \"\"\"Returns the demand of the node.\"\"\"\r\n    # Convert from routing variable Index to demands NodeIndex.\r\n    from_node = manager.IndexToNode(from_index)\r\n    return _data['demands'][from_node]\r\n\r\ndemand_callback_index = routing.RegisterUnaryTransitCallback(\r\n    demand_callback)\r\nrouting.AddDimensionWithVehicleCapacity(\r\n    demand_callback_index,\r\n    0,  # null capacity slack\r\n    _data['vehicle_capacities'],  # vehicle maximum capacities\r\n    True,  # start cumul to zero\r\n    'Capacity')\r\n# Allow to drop nodes.\r\nif check_deman==False:\r\n    penalty =5000000\r\n    for node in range(1, len(_data['distance_matrix'])):\r\n        routing.AddDisjunction([manager.NodeToIndex(node)], penalty)\r\n    \r\n# Setting first solution heuristic.\r\nsearch_parameters = pywrapcp.DefaultRoutingSearchParameters()\r\n#search_parameters.time_limit.seconds = 600\r\nsearch_parameters.solution_limit = 100\r\nsearch_parameters.first_solution_strategy = (\r\n    routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\r\n\r\n# Solve the problem.\r\nassignment = routing.SolveWithParameters(search_parameters)\r\n\r\n# Print solution on console.\r\n_res = \"\"\r\nif assignment:\r\n    #return assignment\r\n    _res = print_solution(_data, manager, routing, assignment)\r\nelse:\r\n    print(\"assignment is None\")\r\n\r\n\r\nresult =  _res\r\n\r\n#~result =  print_solution(data, manager, routing, assignment)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "optimization_vrpc", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimization VRP Cap.", "units": null, "w": "166", "x": 442, "y": 395, "z": 1}, {"color": "#FFFF00", "definition": "result = 10\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "number_of_vehicles", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Numeber of Vehicles", "units": null, "w": "166", "x": 442, "y": 161, "z": 1}, {"color": "#cbcbcb", "definition": "result = xr.where(to_dataarray( report )=='Total Distance (km)',output_distance,\n            xr.where(to_dataarray( report )=='Total Load (Tons)',output_load ,\n                xr.where(to_dataarray( report )=='Total Cost ($)',total_cost.sum(vehicles.name),\n                     xr.where(to_dataarray( report )=='Cost per Km ($/Km)',average_cost_per_kms ,\n                     xr.where(to_dataarray( report )=='Cost per Ton ($/Ton)',total_cost.sum(vehicles.name)/output_load, output_load/demand_end_point.sum('clientes') )))))\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "33", "identifier": "report_vrp", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Report Optimization VRP Penalties and Dropping Visitis", "units": null, "w": "198", "x": 1178, "y": 397, "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "fleet_optimization", "moduleId": "op_ruta_flota", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fleet Optimization", "units": null, "w": "172", "x": 327, "y": 4, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.where( to_dataarray( report_copy)==\"Fixed Cost ($)\", fixed_cost,xr.where( to_dataarray( report_copy)==\"Cost per Km ($/Km)\", fixed_cost_copy, vessels_types_copy.sel({report_copy_copy_copy.name:\"Capacidad\"},drop=True)))\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "vessels_types", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vessels Types", "units": null, "w": "100", "x": "175", "y": "88", "z": 1}, {"color": "#4CBCFF", "definition": "_allo_ac = ((vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True) ==vehicles_load_capacity)*1).sum(vehicles.name)\n\n_cost = (_allo_ac*vessels_types.sel({report_copy.name:'Fixed Cost ($)'},drop=True)+_allo_ac*vessels_types.sel({report_copy.name:'Cost per Km ($/Km)'},drop=True)*65*24).sum('vessel_types')\n\n_oth = xr.where( to_dataarray( optimized_cost )=='Total Cost',_cost,xr.where( to_dataarray( optimized_cost )=='Total Capacity',vehicles_load_capacity.sum(vehicles.name),xr.where( to_dataarray( optimized_cost )=='Demand',demand_end_point.sum(clientes.name),0)))\n\nresult = change_index( _allo_ac, vessel_types, optimized_cost, compareMode=1, defaultValue=_oth )\n\n#'Total Cost','Total Capacity', 'Demand'", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "vehicles_original", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vehicles Original", "units": null, "w": "100", "x": "175", "y": "167", "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node13", "moduleId": "fleet_optimization", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 730, "y": 419, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node14", "moduleId": "fleet_optimization", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 739, "y": 419, "z": 1}, {"color": "#FFFF00", "definition": "result = xr.DataArray([10.0,0.05,2500.0,0.3,0.94],[data_inde])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "cost_data_", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costos", "units": null, "w": "100", "x": "175", "y": "266", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[5.0,1.22,55000.0], [10.0,1.17,70000.0], [15.0,1.07,85000.0], [20.0,0.96,105000.0], [35.0,0.89,120000.0]],[vessel_types, report_copy_copy_copy])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "vessels_types_copy", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Informaci\u00f3n de Camiones", "units": null, "w": "146", "x": "-24", "y": "346", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.DataArray( np.pmt(cost_data_.sel({data_inde.name:\"Tasa de inter\u00e9s %\"},drop=True),cost_data_.sel({data_inde.name:\"Vida \u00fatil\"},drop=True),-vessels_types_copy.sel({report_copy_copy_copy.name:\"Precio de compra\"},drop=True),-vessels_types_copy.sel({report_copy_copy_copy.name:\"Precio de compra\"},drop=True)*0.1),[vessel_types])/12\n\n#\"Usefull Life\",\"Interest Rate %\",\"Drivers Wage\",\"% Maintenance and insurance\",'Fuel Price ($/L.)\n#numpy.pmt(rate, nper, pv, fv, when = \u2018end\u2019)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "capital_cost", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Capital Cost", "units": null, "w": "100", "x": "175", "y": "338", "z": 1}, {"color": "#4CBCFF", "definition": "result =( capital_cost+cost_data_.sel({data_inde.name:\"% Mantenimiento y seguro\"},drop=True)*capital_cost+cost_data_.sel({data_inde.name:\"Salario de conductor\"},drop=True))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "fixed_cost", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fixed Cost", "units": null, "w": "100", "x": "175", "y": "414", "z": 1}, {"color": "#4CBCFF", "definition": "result = vessels_types_copy.sel({report_copy_copy_copy.name:\"Costo por Km ($/Km)\"},drop=True)*((cost_data_.sel({data_inde.name:\"Precio de combustible ($/L.)\"},drop=True)/0.94))\n\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "fixed_cost_copy", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vble Cost", "units": null, "w": "100", "x": "175", "y": "485", "z": 1}, {"color": "#4CBCFF", "definition": "_vble = ((vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True)==optimizedfleet_cap_option)*fixed_cost_copy).sum(vessel_types.name)*optimizedfleet_dis_opti/1000*24\n_fix = ((vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True)==optimizedfleet_cap_option)*fixed_cost).sum(vessel_types.name)\n\nresult =(_fix+ _vble).sum(vehicles.name)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "total_cost_", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo total", "units": null, "w": "100", "x": "429", "y": "408", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[20.0,15.0,35.0,35.0,35.0,20.0,20.0,20.0,15.0,20.0,0.0,0.0,0.0,0.0], [20.0,15.0,5.0,10.0,15.0,20.0,15.0,10.0,15.0,20.0,0.0,0.0,0.0,0.0], [20.0,15.0,20.0,10.0,10.0,10.0,15.0,10.0,10.0,15.0,0.0,0.0,0.0,0.0], [0.0,15.0,0.0,5.0,0.0,10.0,10.0,10.0,10.0,5.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.0,10.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[vehicles, cases_])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "optimizedfleet_cap_option", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejores Combinaciones de Flota", "units": null, "w": "100", "x": "429", "y": "219", "z": 1}, {"color": "#FFFF4B", "definition": "result = xr.DataArray([[100620.0,69840.0,139680.0,168480.0,136620.0,98640.0,66780.0,66780.0,  69840.0,100620.0,0.0,0.0,0.0,0.0], [91440.0,98640.0,39060.0,73980.0,77040.0,66780.0,69840.0,69840.0,98640.0,  91440.0,0.0,0.0,0.0,0.0], [129420.0,69840.0,111960.0,55440.0,77040.0,84240.0,69840.0,69840.0,  72900.0,77040.0,0.0,0.0,0.0,0.0], [0.0,52380.0,0.0,77040.0,0.0,77040.0,77040.0,73980.0,91440.0,77040.0,0.0,  0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,77040.0,55440.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[vehicles, cases_])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "optimizedfleet_dis_opti", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distance", "units": null, "w": "100", "x": "429", "y": "281", "z": 1}, {"color": null, "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "enfoque_estatico", "moduleId": "fleet_optimization", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Enfoque Estatico", "units": null, "w": "100", "x": "174", "y": "668", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Load Capacity\",\"Demand\",\"Check\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "check_report", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Check Report", "units": null, "w": "152", "x": "1130", "y": "167", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Vehicle Capacity\",\"Cost per Km ($/Km)\",\"Fixed Cost ($)\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "report_copy", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Report", "units": null, "w": "100", "x": "983", "y": "167", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"t1\",\"t2\",\"t3\",\"t4\",\"t5\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "vessel_types", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vessel Types", "units": null, "w": "100", "x": "994", "y": "26", "z": 1}, {"color": "#9999ff", "definition": "result = concat_index(vessel_types,pd.Index(['Total Cost','Total Capacity', 'Demand' ]))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "optimized_cost", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Report Optimized", "units": null, "w": "100", "x": "1090", "y": "26", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Vessel Capacity\",\"Actual\",\"Optimized 60\",\"Optimized 70\",\"Optimized 80\",\"Optimized 90\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "report_copy_copy", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Report", "units": null, "w": "144", "x": "1121", "y": "198", "z": 1}, {"color": "#4CBCFF", "definition": "from __future__ import print_function\nfrom ortools.linear_solver import pywraplp\n_demand = 60\nsolver = pywraplp.Solver('simple_mip_program',\n                             pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n                             \ninfinity = solver.infinity()\n    # x and y are integer non-negative variables.\nt1 = solver.IntVar(0.0, infinity, 't1')\nt2 = solver.IntVar(0.0, infinity, 't2')\nt3 = solver.IntVar(0.0, infinity, 't3')\nt4 = solver.IntVar(0.0, infinity, 't4')\nt5= solver.IntVar(0.0, infinity, 't5')\nprint('Number of variables =', solver.NumVariables())\n\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            >=  _demand)\nsolver.Add(t1+t2+t3+t4+t5>=minimum_number_of_vehicles)\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            <=  (_demand+deltacapacityoverdemand))\nprint('Number of constraints =', solver.NumConstraints())\n\nsolver.Minimize(((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)))\n\nresult_status = solver.Solve()\n# The problem has an optimal solution. \"Fixed Cost ($)\"\nassert result_status == pywraplp.Solver.OPTIMAL\n# The solution looks legit (when using solvers others than\n# GLOP_LINEAR_PROGRAMMING, verifying the solution is highly recommended!).\nassert solver.VerifySolution(1e-7, True)\n\n_cap = t1.solution_value()*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True))+t2.solution_value()*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True))+t3.solution_value()*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True))+t4.solution_value()*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+t5.solution_value()*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True))\n\n\n_sol_ar = xr.DataArray( [t1.solution_value(),t2.solution_value(),t3.solution_value(),t4.solution_value(),t5.solution_value(),solver.Objective().Value(),_cap,_demand], [optimized_cost]) \nprint('Solution:')\nprint('Objective value =', solver.Objective().Value())\nprint('t1 =', t1.solution_value())\nprint('t2 =', t2.solution_value())\nprint('t3 =', t3.solution_value())\nprint('t4 =', t4.solution_value())\nprint('t5 =', t5.solution_value())\n\nprint('\\nAdvanced usage:')\nprint('Problem solved in %f milliseconds' % solver.wall_time())\nprint('Problem solved in %d iterations' % solver.iterations())\nprint('Problem solved in %d branch-and-bound nodes' % solver.nodes())\n\nresult = _sol_ar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "optimized_fleet_sc1", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimizaci\u00f3n", "units": null, "w": "126", "x": "331", "y": "107", "z": 1}, {"color": "#4CBCFF", "definition": "from __future__ import print_function\nfrom ortools.linear_solver import pywraplp\n_demand = 70\nsolver = pywraplp.Solver('simple_mip_program',\n                             pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n                             \ninfinity = solver.infinity()\n    # x and y are integer non-negative variables.\nt1 = solver.IntVar(0.0, infinity, 't1')\nt2 = solver.IntVar(0.0, infinity, 't2')\nt3 = solver.IntVar(0.0, infinity, 't3')\nt4 = solver.IntVar(0.0, infinity, 't4')\nt5= solver.IntVar(0.0, infinity, 't5')\nprint('Number of variables =', solver.NumVariables())\n\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            >=  _demand)\nsolver.Add(t1+t2+t3+t4+t5>=minimum_number_of_vehicles)\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            <=  (_demand+deltacapacityoverdemand))\nprint('Number of constraints =', solver.NumConstraints())\n\nsolver.Minimize(((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)))\n\nresult_status = solver.Solve()\n# The problem has an optimal solution. \"Fixed Cost ($)\"\nassert result_status == pywraplp.Solver.OPTIMAL\n# The solution looks legit (when using solvers others than\n# GLOP_LINEAR_PROGRAMMING, verifying the solution is highly recommended!).\nassert solver.VerifySolution(1e-7, True)\n\n_cap = t1.solution_value()*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True))+t2.solution_value()*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True))+t3.solution_value()*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True))+t4.solution_value()*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+t5.solution_value()*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True))\n\n\n_sol_ar = xr.DataArray( [t1.solution_value(),t2.solution_value(),t3.solution_value(),t4.solution_value(),t5.solution_value(),solver.Objective().Value(),_cap,_demand], [optimized_cost]) \nprint('Solution:')\nprint('Objective value =', solver.Objective().Value())\nprint('t1 =', t1.solution_value())\nprint('t2 =', t2.solution_value())\nprint('t3 =', t3.solution_value())\nprint('t4 =', t4.solution_value())\nprint('t5 =', t5.solution_value())\n\nprint('\\nAdvanced usage:')\nprint('Problem solved in %f milliseconds' % solver.wall_time())\nprint('Problem solved in %d iterations' % solver.iterations())\nprint('Problem solved in %d branch-and-bound nodes' % solver.nodes())\n\nresult = _sol_ar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "optimized_fleet_sc2", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimizaci\u00f3n", "units": null, "w": "126", "x": "488", "y": "107", "z": 1}, {"color": "#4CBCFF", "definition": "from __future__ import print_function\nfrom ortools.linear_solver import pywraplp\n_demand = 80\nsolver = pywraplp.Solver('simple_mip_program',\n                             pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n                             \ninfinity = solver.infinity()\n    # x and y are integer non-negative variables.\nt1 = solver.IntVar(0.0, infinity, 't1')\nt2 = solver.IntVar(0.0, infinity, 't2')\nt3 = solver.IntVar(0.0, infinity, 't3')\nt4 = solver.IntVar(0.0, infinity, 't4')\nt5= solver.IntVar(0.0, infinity, 't5')\nprint('Number of variables =', solver.NumVariables())\n\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            >=  _demand)\nsolver.Add(t1+t2+t3+t4+t5>=minimum_number_of_vehicles)\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            <=  (_demand+deltacapacityoverdemand))\nprint('Number of constraints =', solver.NumConstraints())\n\nsolver.Minimize(((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)))\n\nresult_status = solver.Solve()\n# The problem has an optimal solution. \"Fixed Cost ($)\"\nassert result_status == pywraplp.Solver.OPTIMAL\n# The solution looks legit (when using solvers others than\n# GLOP_LINEAR_PROGRAMMING, verifying the solution is highly recommended!).\nassert solver.VerifySolution(1e-7, True)\n\n_cap = t1.solution_value()*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True))+t2.solution_value()*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True))+t3.solution_value()*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True))+t4.solution_value()*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+t5.solution_value()*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True))\n\n\n_sol_ar = xr.DataArray( [t1.solution_value(),t2.solution_value(),t3.solution_value(),t4.solution_value(),t5.solution_value(),solver.Objective().Value(),_cap,_demand], [optimized_cost]) \nprint('Solution:')\nprint('Objective value =', solver.Objective().Value())\nprint('t1 =', t1.solution_value())\nprint('t2 =', t2.solution_value())\nprint('t3 =', t3.solution_value())\nprint('t4 =', t4.solution_value())\nprint('t5 =', t5.solution_value())\n\nprint('\\nAdvanced usage:')\nprint('Problem solved in %f milliseconds' % solver.wall_time())\nprint('Problem solved in %d iterations' % solver.iterations())\nprint('Problem solved in %d branch-and-bound nodes' % solver.nodes())\n\nresult = _sol_ar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "optimized_fleet_sc3", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimizaci\u00f3n", "units": null, "w": "126", "x": "641", "y": "107", "z": 1}, {"color": "#4CBCFF", "definition": "from __future__ import print_function\nfrom ortools.linear_solver import pywraplp\n_demand = 90\nsolver = pywraplp.Solver('simple_mip_program',\n                             pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n                             \ninfinity = solver.infinity()\n    # x and y are integer non-negative variables.\nt1 = solver.IntVar(0.0, infinity, 't1')\nt2 = solver.IntVar(0.0, infinity, 't2')\nt3 = solver.IntVar(0.0, infinity, 't3')\nt4 = solver.IntVar(0.0, infinity, 't4')\nt5= solver.IntVar(0.0, infinity, 't5')\nprint('Number of variables =', solver.NumVariables())\n\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            >=  _demand)\nsolver.Add(t1+t2+t3+t4+t5>=minimum_number_of_vehicles)\nsolver.Add((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True)) +\n            t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True)) + \n            t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+\n            t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True)))\n            <=  (_demand+deltacapacityoverdemand))\nprint('Number of constraints =', solver.NumConstraints())\n\nsolver.Minimize(((t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t1*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t2*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t3*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+ \n                 (t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t4*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)+\n                 \n                 (t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Fixed Cost ($)'},drop=True))+\n                 t5*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Cost per Km ($/Km)'},drop=True))*65*24)))\n\nresult_status = solver.Solve()\n# The problem has an optimal solution. \"Fixed Cost ($)\"\nassert result_status == pywraplp.Solver.OPTIMAL\n# The solution looks legit (when using solvers others than\n# GLOP_LINEAR_PROGRAMMING, verifying the solution is highly recommended!).\nassert solver.VerifySolution(1e-7, True)\n\n_cap = t1.solution_value()*float(vessels_types.sel({vessel_types.name:'t1', report_copy.name:'Vehicle Capacity'},drop=True))+t2.solution_value()*float(vessels_types.sel({vessel_types.name:'t2', report_copy.name:'Vehicle Capacity'},drop=True))+t3.solution_value()*float(vessels_types.sel({vessel_types.name:'t3', report_copy.name:'Vehicle Capacity'},drop=True))+t4.solution_value()*float(vessels_types.sel({vessel_types.name:'t4', report_copy.name:'Vehicle Capacity'},drop=True))+t5.solution_value()*float(vessels_types.sel({vessel_types.name:'t5', report_copy.name:'Vehicle Capacity'},drop=True))\n\n\n_sol_ar = xr.DataArray( [t1.solution_value(),t2.solution_value(),t3.solution_value(),t4.solution_value(),t5.solution_value(),solver.Objective().Value(),_cap,_demand], [optimized_cost]) \nprint('Solution:')\nprint('Objective value =', solver.Objective().Value())\nprint('t1 =', t1.solution_value())\nprint('t2 =', t2.solution_value())\nprint('t3 =', t3.solution_value())\nprint('t4 =', t4.solution_value())\nprint('t5 =', t5.solution_value())\n\nprint('\\nAdvanced usage:')\nprint('Problem solved in %f milliseconds' % solver.wall_time())\nprint('Problem solved in %d iterations' % solver.iterations())\nprint('Problem solved in %d branch-and-bound nodes' % solver.nodes())\n\nresult = _sol_ar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "optimized_fleet_sc4", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimizaci\u00f3n", "units": null, "w": "126", "x": "802", "y": "107", "z": 1}, {"color": "#4CBCFF", "definition": "result = float(probem_data.sel({data_problem.name:'M\u00ednimo n\u00famero de veh\u00edculos'},drop=True))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "minimum_number_of_vehicles", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Minimum Number of Vehicles", "units": null, "w": "100", "x": "558", "y": "-2", "z": 1}, {"color": "#4CBCFF", "definition": "result =float(probem_data.sel({data_problem.name:'Delta capacidad sobre demanda'},drop=True))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "deltacapacityoverdemand", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Delta Capacity over Demand", "units": null, "w": "100", "x": "718", "y": "-2", "z": 1}, {"color": "#4CBCFF", "definition": "_t_cap= vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True)\n_t_cap= change_index( _t_cap, vessel_types, optimized_cost, compareMode=1, defaultValue=0 )\nresult = xr.where( to_dataarray( report_copy_copy ) =='Actual', vehicles_original,\n        xr.where( to_dataarray( report_copy_copy ) =='Optimized 60', optimized_fleet_sc1,\n        xr.where( to_dataarray( report_copy_copy ) =='Optimized 70', optimized_fleet_sc2,\n        xr.where( to_dataarray( report_copy_copy ) =='Optimized 80', optimized_fleet_sc3,\n        xr.where( to_dataarray( report_copy_copy ) =='Optimized 90', optimized_fleet_sc4,_t_cap)))))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "34", "identifier": "optimum_fleet_analysis", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Report", "units": null, "w": "126", "x": "591", "y": "209", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"M\u00ednimo n\u00famero de veh\u00edculos\", \"Delta capacidad sobre demanda\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "data_problem", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Probem Data", "units": null, "w": "100", "x": "233", "y": "10", "z": 1}, {"color": "#FFFF00", "definition": "result = xr.DataArray([ 3,10],[data_problem])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "probem_data", "moduleId": "enfoque_estatico", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data del Problema", "units": null, "w": "100", "x": "365", "y": "-2", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Capacidad\",\"Costo por Km ($/Km)\",\"Precio de compra\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "report_copy_copy_copy", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reporte", "units": null, "w": "100", "x": "1006", "y": "-25", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Vida \u00fatil\",\"Tasa de inter\u00e9s %\",\"Salario de conductor\",\"% Mantenimiento y seguro\",'Precio de combustible ($/L.)'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "data_inde", "moduleId": "enfoque_estatico", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data", "units": null, "w": "100", "x": "1090", "y": "-25", "z": 1}, {"color": "#4CBCFF", "definition": "_carga_ton = optimizedfleet_cap_option.sum(vehicles.name) * 24\nresult = (total_cost_ / _carga_ton).fillna(0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "op_flota_costo_por_tn", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tn", "units": null, "w": "100", "x": "738", "y": "408", "z": 1}, {"color": "#4CBCFF", "definition": "_distancia_km = optimizedfleet_dis_opti.sum(vehicles.name) * 24 / 1000\nresult = (total_cost_ / _distancia_km).fillna(0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "op_flota_costo_por_km", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Km", "units": null, "w": "100", "x": "584", "y": "408", "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Costo total\",\"Costo por Km\",\"Costo por Tn\",\"Costo (cts) por Tn Km\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "data_op_flota", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Data", "units": null, "w": "100", "x": 904, "y": 800, "z": 1}, {"color": "#4CBCFF", "definition": "_data = xr.where( to_dataarray( data_op_flota) == 'Costo total', total_cost_, \n        xr.where( to_dataarray( data_op_flota) == 'Costo por Km', op_flota_costo_por_km, \n        xr.where( to_dataarray( data_op_flota) == 'Costo por Tn', op_flota_costo_por_tn, \n        op_flota_costo_por_ton_km )))\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "reporte_op_flota", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "S\u00edntesis de Resultados", "units": null, "w": "100", "x": 662, "y": 485, "z": 1}, {"color": "#4CBCFF", "definition": "_carga_ton = optimizedfleet_cap_option.sum(vehicles.name) * 24\n_distancia_km = optimizedfleet_dis_opti.sum(vehicles.name) * 24 / 1000\n_costos_cents = total_cost_ * 100\nresult = (_costos_cents / _carga_ton / _distancia_km).fillna(0)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "op_flota_costo_por_ton_km", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tn.Km.", "units": null, "w": "100", "x": "896", "y": "408", "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objs as go\n_cases = \"Alt \" + subset(total_cost_ > 0)\n_cases = _cases.values.tolist()\n_data = []\nyi = total_cost_.values.tolist()\nc = colores_de_cases.values.tolist()\n_altura = 1600.\ntrace = go.Bar(\n  x=_cases,\n  y=yi,\n  name = ' $',\n  marker = dict(\n    color = c,\n  )\n)\n_data.append(trace)\nlayout = go.Layout(\n    title='Costo Total ($)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(family='Arial', size=9, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n    tickangle=-45,\n    gridcolor='#eeeeee',\n    tickfont=dict(\n      family='Arial',\n      size=9,\n      color='black'\n    )\n  ),\n  yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        gridcolor='#eeeeee',\n        zeroline=True,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n  showlegend = False,\n   margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0)\n)\nannotations = []\nfor i in range(0,len(_cases)):\n  annotations.append(dict(x=_cases[i], y=yi[i]+_altura, text='${:,.0f}'.format(yi[i]) ,\n                 font=dict(family='Arial', size=11,\n                 color='rgba(58, 120, 255)'),\n                 showarrow=False,))\nlayout['annotations'] = annotations\nfig = go.Figure(data=_data, layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "total_cost_plotly", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo total", "units": null, "w": "100", "x": "429", "y": "578", "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.DataArray( ['rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(255, 229, 203)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)','rgb(238, 238, 238)'], coords=[cases_], dims=None, name=None, attrs=None, encoding=None, fastpath=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "colores_de_cases", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Colores de Cases", "units": null, "w": "100", "x": "175", "y": "578", "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objs as go\n_cases = \"Alt \" + subset(op_flota_costo_por_tn > 0)\n_cases = _cases.values.tolist()\n_data = []\nyi = op_flota_costo_por_tn.values.tolist()\nc = colores_de_cases.values.tolist()\ntrace = go.Bar(\n    x=_cases,\n    y=yi,\n    name = ' $',\n    marker = dict(\n        color = c,\n    )\n)\n_data.append(trace)\nlayout = go.Layout(\n    title='Costo por Tonelada ($/Tn.)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(family='Arial', size=9, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=-45,\n        gridcolor='#eeeeee',\n        tickfont=dict(\n            family='Arial',\n            size=9,\n            color='black'\n        )\n    ),\n    yaxis=dict(\n        autorange=True,\n        gridcolor='#eeeeee',\n        showgrid=True,\n        zeroline=True,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    showlegend = False,\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0)\n)\nannotations = []\nfor i in range(0,len(_cases)):\n    annotations.append(dict(x=_cases[i], y=yi[i]+1.15, text= '${:,.2f}'.format(yi[i]), \n                                  font=dict(family='Arial', size=11,\n                                  color='rgba(58, 120, 255)'),\n                                  showarrow=False,))\nlayout['annotations'] = annotations\nfig = go.Figure(data=_data, layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "total_cost_ton_plotly", "moduleId": "fleet_optimization", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Ton", "units": null, "w": "100", "x": "738", "y": "578", "z": 1}, {"color": "#4CBCFF", "definition": "if (version==\"Ruteo Original\"):\n    _df_to_dash=base_case\nelse:\n    _df_to_dash=change_index( output_data, cols, cols_sto, compareMode=0, defaultValue=None )\n\nresult = _df_to_dash", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "optimized_vehicle_routing_", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Itinerarios por Cami\u00f3n", "units": null, "w": "146", "x": 814, "y": 499, "z": 1}, {"color": "#cbcbcb", "definition": "import plotly.graph_objects as go\n_ind = subset(optimized_vehicle_routing_.sel({cols_sto.name:'Carga'},drop=True).astype(float))\n_a2 = (optimized_vehicle_routing_.sel({cols_sto.name:'Distancia'},drop=True )).astype(float)/1000\n_a1 = (optimized_vehicle_routing_.sel({cols_sto.name:'Carga'},drop=True ).astype(float))\n\n_a2 = subscript( _a2, vehicles, _ind )\n_a1 = subscript( _a1, vehicles, _ind )\n\ntrace1 = go.Bar(\n    x='Cami\u00f3n'+_ind,\n    y= _a1.values.tolist(),\n    name='Carga (Tn.)'\n)\ntrace2 = go.Bar(\n    x='Cami\u00f3n'+_ind,\n    y=_a2.values.tolist(),\n    name='Distancia (Km.)',\n#    text='Vehicles'+_ind,\n#    yaxis='y2',\n    marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=0.6\n)\n\n\n\"\"\"\ntrace0 = go.Bar(\n    x=['Product A', 'Product B', 'Product C'],\n    y=[20, 14, 23],\n    text=['27% market share', '24% market share', '19% market share'],\n    marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=0.6\n)\n\n\"\"\"\n\n_data = [trace1, trace2]\n\nlayout = go.Layout(barmode='group',\n        title='Distancia y Carga por Cami\u00f3n',\n        paper_bgcolor='rgba(0,0,0,0)',\n        plot_bgcolor='rgba(0,0,0,0)',\n        legend=dict(x=1.05, y=1),\n        font=dict(family='Arial', size=9, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=-45,\n        gridcolor='#eeeeee',\n        tickfont=dict(\n            family='Arial',\n            size=6,\n            color='black'\n        )),\n    yaxis=dict(\n        title='',\n        gridcolor='#eeeeee',\n#        range=[0, 100]\n    ),\n    yaxis2=dict(\n        title='Distancia (Km)',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right',\n        range=[0, 150]\n    ),\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0\n    )\n)\nfig = go.Figure(data=_data,layout=layout)\n#result = plot(fig, filename='multiple-axes-double')\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "38", "identifier": "optimized_load__and_distance_mixed_graph", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Optimized Load  and Distance Mixed Graph", "units": null, "w": "153", "x": 803, "y": 554, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "plot_ly", "moduleId": "maps", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Plot Ly", "units": null, "w": "151", "x": 250, "y": 420, "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objects as go\n_data = [go.Bar(\n            x= 'Client'+clientes,\n            y= (demand_end_point.sel({unit.name:'Tons'},drop=True).values).tolist(),\n             name = 'expenses'\n    )]\nlayout = go.Layout(\n    title='Demand by Client (Tons)',\n    font=dict(family='Arial', size=9, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=-45,\n        tickfont=dict(\n            family='Arial',\n            size=7,\n            color='black'\n        ))\n)\nfig = go.Figure(data=_data,layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "clients_demand", "moduleId": "plot_ly", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients Demand", "units": null, "w": "100", "x": 251, "y": 452, "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objects as go\n_ind = subset(vehicles_load_capacity.sel({unit.name:'Tons'},drop=True))\n_dat_cam =  subscript( vehicles_load_capacity.sel({unit.name:'Tons'},drop=True), vehicles, _ind )\n_data = [go.Bar(\n            x= 'Cami\u00f3n'+_ind,\n            y= (_dat_cam.values).tolist(),\n            marker=dict(color='rgb(4,146,185)',\n                        line=dict(color='rgb(8,48,107)',\n                        width=1.5,\n                    )),\n            text='Cami\u00f3n'+_ind,\n           # textposition='top center',\n            opacity=0.6\n)]\n\nlayout = go.Layout(\n    title='Camiones a Utilizar - Capacidad (Tn.)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(family='Arial', size=9, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=-45,\n        gridcolor='#eeeeee',\n        tickfont=dict(\n            family='Arial',\n            size=8,\n            color='black'\n        )),\n    yaxis = dict(range=[0, 35],\n                gridcolor='#eeeeee'),\n    margin=go.layout.Margin(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0\n    )\n)\nfig = go.Figure(data=_data,layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "vehiclescapacity", "moduleId": "plot_ly", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vehicles Capacity", "units": null, "w": "100", "x": "251", "y": "526", "z": 1}, {"color": "#4CBCFF", "definition": "_vble = ((vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True)==vehicles_load_capacity.sel({unit.name:'Tons'},drop=True))*fixed_cost_copy).sum(vessel_types.name)*distancia_optima*24\n_fix = ((vessels_types.sel({report_copy.name:'Vehicle Capacity'},drop=True)==vehicles_load_capacity.sel({unit.name:'Tons'},drop=True))*fixed_cost).sum(vessel_types.name)\n\nresult = xr.where( to_dataarray( rerpote_de_costos_ )==\"Costo Fijo\", _fix, _vble)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "total_cost__copy", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo Total por mes", "units": null, "w": "146", "x": 998, "y": 161, "z": 1}, {"color": "#4CBCFF", "definition": "result = (optimized_vehicle_routing_.sel({cols_sto.name:'Distancia'},drop=True )).astype(float)/1000", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "distancia_optima", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Distancia Total", "units": null, "w": "146", "x": 998, "y": 267, "z": 1}, {"color": "#ffff4b", "definition": "result = xr.DataArray( [['', '  9 Load(1) ', '  4 Load(5) ', '  3 Load(7) ', '  1 Load(15) ',\r\n        '  0 Load(15)', 87300.0, 15.0],\r\n       ['', '  14 Load(4) ', '  16 Load(12) ', '  10 Load(14) ',\r\n        '  2 Load(15) ', '  0 Load(15)', 98640.0, 15.0],\r\n       ['', '  12 Load(2) ', '  11 Load(3) ', '  15 Load(11) ',\r\n        '  13 Load(15) ', '  0 Load(15)', 69840.0, 15.0],\r\n       ['', '  7 Load(1) ', '  8 Load(9) ', '  6 Load(13) ', '  5 Load(15) ',\r\n        '  0 Load(15)', 55440.0, 15.0],\r\n       ['', '', '', '', '', '', 0.0, 0.0],\r\n       ['', '', '', '', '', '', 0.0, 0.0],\r\n       ['', '', '', '', '', '', 0.0, 0.0],\r\n       ['', '', '', '', '', '', 0.0, 0.0],\r\n       ['', '', '', '', '', '', 0.0, 0.0],\r\n       ['', '', '', '', '', '', 0.0, 0.0]], [vehicles,cols_sto])\r\n       \r\n", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "base_case", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Base Case", "units": null, "w": "138", "x": 634, "y": 82, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = total_cost__copy.sum([vehicles.name,rerpote_de_costos_.name])\n#_distance = float(output_distance)*24\n_distance = distancia_optima.sum()*24\nresult = _tot_cost/(_distance)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "costo_por_km", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Km", "units": null, "w": "146", "x": 1166, "y": 161, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = total_cost__copy.sum([vehicles.name,rerpote_de_costos_.name])\n_distance = float(output_load)*24\nresult = _tot_cost/(_distance)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "costo_por_ton", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tonelada", "units": null, "w": "146", "x": 1166, "y": 223, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = total_cost__copy.sum([vehicles.name,rerpote_de_costos_.name]) * 100\n#_distance = float(output_distance)*24\n_distance = distancia_optima.sum()*24\n_load = float(output_load)*24\nresult = _tot_cost/(_distance)/_load", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "costo_por_ton_km", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tonelada Km.", "units": null, "w": "146", "x": 1166, "y": 289, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "op_ruta_flota", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ruta \u00d3ptima con Flota \u00d3ptima", "units": null, "w": "166", "x": 806, "y": 237, "z": 1}, {"color": "#4CBCFF", "definition": "result = create_dataarray( [['{\"type\": \"polyline\", \"latlngs\": [[-34.676223, -58.423237], [-34.677325, -58.422456], [-34.680999, -58.436199], [-34.680645, -58.437894], [-34.679143, -58.440339], [-34.677813, -58.440256], [-34.676964, -58.437976], [-34.673048, -58.434682], [-34.673054, -58.436566], [-34.669817, -58.444116], [-34.651677, -58.466643], [-34.650581, -58.464862], [-34.648784, -58.463609], [-34.642765, -58.471158], [-34.623375, -58.479744], [-34.623827, -58.480775], [-34.628275, -58.478734], [-34.627337, -58.475011], [-34.621194, -58.456076], [-34.628534, -58.452568], [-34.625976, -58.435965], [-34.625608, -58.431399], [-34.628926, -58.430635], [-34.629131, -58.432017], [-34.627793, -58.43232], [-34.627683, -58.431514], [-34.627604, -58.430932], [-34.62922, -58.430561], [-34.630822, -58.438762], [-34.636096, -58.447557], [-34.63673, -58.453552], [-34.641844, -58.460783], [-34.646457, -58.463216], [-34.653251, -58.468292], [-34.664253, -58.473758], [-34.660536, -58.478518], [-34.660831, -58.478871], [-34.667204, -58.486322], [-34.668812, -58.488156], [-34.666041, -58.491716], [-34.672324, -58.498594], [-34.675927, -58.505178], [-34.686031, -58.519942], [-34.689906, -58.514302], [-34.688561, -58.516343], [-34.686317, -58.514049], [-34.690389, -58.508487], [-34.685763, -58.497421], [-34.682595, -58.49484], [-34.682084, -58.492667], [-34.684301, -58.489248], [-34.687915, -58.487019], [-34.688789, -58.485528], [-34.689917, -58.486363], [-34.689831, -58.486805], [-34.688453, -58.486468], [-34.681518, -58.480659], [-34.654607, -58.468775], [-34.65215, -58.466886], [-34.653834, -58.463923], [-34.669883, -58.444217], [-34.673341, -58.436403], [-34.674991, -58.436236], [-34.678303, -58.440653], [-34.679289, -58.440331], [-34.680683, -58.438077], [-34.681161, -58.436786], [-34.677325, -58.422456], [-34.676223, -58.423237], [-34.676223, -58.423237]]}',1]],[linepath,mapattributes])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "op_ruta_flota_vehi1", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ruta optima con flota \u00f3ptima - Cami\u00f3n 1", "units": null, "w": "199", "x": 140, "y": 89, "z": 1}, {"color": "#4CBCFF", "definition": "result = create_dataarray( [['{\"type\": \"polyline\", \"latlngs\": [[-34.676223, -58.423237], [-34.677325, -58.422456], [-34.680999, -58.436199], [-34.679358, -58.44006], [-34.678055, -58.440445], [-34.677994, -58.439537], [-34.679186, -58.43976], [-34.703873, -58.460888], [-34.700333, -58.467632], [-34.673973, -58.501665], [-34.686031, -58.519942], [-34.689906, -58.514302], [-34.688561, -58.516343], [-34.686317, -58.514049], [-34.690389, -58.508487], [-34.685763, -58.497421], [-34.682595, -58.49484], [-34.682084, -58.492667], [-34.684301, -58.489248], [-34.687915, -58.487019], [-34.688789, -58.485528], [-34.689917, -58.486363], [-34.689831, -58.486805], [-34.688453, -58.486468], [-34.681518, -58.480659], [-34.653666, -58.468329], [-34.647783, -58.463675], [-34.642013, -58.460623], [-34.637045, -58.453825], [-34.636088, -58.447071], [-34.630729, -58.438044], [-34.627686, -58.413347], [-34.622113, -58.413683], [-34.621271, -58.409185], [-34.623034, -58.409033], [-34.624596, -58.408852], [-34.623943, -58.403453], [-34.625862, -58.403066], [-34.630326, -58.436946], [-34.63109, -58.439319], [-34.635926, -58.447069], [-34.63673, -58.453552], [-34.642077, -58.461038], [-34.647916, -58.464287], [-34.649736, -58.465833], [-34.650573, -58.467522], [-34.651526, -58.467389], [-34.669721, -58.444448], [-34.673341, -58.436403], [-34.674991, -58.436236], [-34.678303, -58.440653], [-34.679289, -58.440331], [-34.680683, -58.438077], [-34.681161, -58.436786], [-34.677325, -58.422456], [-34.676223, -58.423237], [-34.676223, -58.423237], [-34.676223, -58.423237]]}',2]],[linepath,mapattributes])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "op_ruta_flota_vehi2", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ruta optima con flota \u00f3ptima - Cami\u00f3n 2", "units": null, "w": "199", "x": 140, "y": 132, "z": 1}, {"color": "#4CBCFF", "definition": "result = create_dataarray( [['{\"type\": \"polyline\", \"latlngs\": [[-34.676223, -58.423237], [-34.677325, -58.422456], [-34.678328, -58.42619], [-34.689331, -58.418283], [-34.691065, -58.416022], [-34.698104, -58.428004], [-34.702843, -58.424403], [-34.69854, -58.414811], [-34.687953, -58.404468], [-34.684401, -58.400047], [-34.688956, -58.393945], [-34.683328, -58.387784], [-34.68951, -58.379651], [-34.684326, -58.373315], [-34.677961, -58.381543], [-34.674196, -58.380179], [-34.673045, -58.381653], [-34.669767, -58.380637], [-34.662021, -58.375776], [-34.662609, -58.376207], [-34.663158, -58.376581], [-34.657101, -58.378333], [-34.657237, -58.381197], [-34.652836, -58.382709], [-34.652003, -58.379478], [-34.650218, -58.380133], [-34.648623, -58.380718], [-34.646983, -58.374347], [-34.644028, -58.375535], [-34.622425, -58.380487], [-34.623573, -58.391613], [-34.625943, -58.40234], [-34.626887, -58.412414], [-34.630573, -58.438019], [-34.635926, -58.447069], [-34.636448, -58.452712], [-34.637593, -58.455065], [-34.642077, -58.461038], [-34.645982, -58.463102], [-34.648395, -58.465175], [-34.649388, -58.467634], [-34.648876, -58.475056], [-34.647754, -58.477287], [-34.647427, -58.48048], [-34.645854, -58.485023], [-34.642807, -58.489932], [-34.636364, -58.495839], [-34.635914, -58.496783], [-34.636505, -58.499651], [-34.63274, -58.500402], [-34.630535, -58.493576], [-34.628443, -58.4893], [-34.624918, -58.47534], [-34.623936, -58.475794], [-34.624103, -58.476484], [-34.624218, -58.476958], [-34.631766, -58.473475], [-34.630177, -58.467296], [-34.630067, -58.466859], [-34.637583, -58.463565], [-34.638507, -58.461998], [-34.634746, -58.457208], [-34.633906, -58.454521], [-34.636532, -58.453287], [-34.642077, -58.461038], [-34.646457, -58.463216], [-34.649736, -58.465833], [-34.650359, -58.467367], [-34.651432, -58.467488], [-34.669721, -58.444448], [-34.673341, -58.436403], [-34.674991, -58.436236], [-34.677602, -58.440224], [-34.679289, -58.440331], [-34.681161, -58.436786], [-34.677325, -58.422456], [-34.676223, -58.423237], [-34.676223, -58.423237]]}',3]],[linepath,mapattributes])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "op_ruta_flota_vehi3", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Ruta optima con flota \u00f3ptima - Cami\u00f3n 3", "units": null, "w": "199", "x": 140, "y": 176, "z": 1}, {"color": null, "definition": "result = 0", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "node11", "moduleId": "op_ruta_flota", "nodeClass": "pdindex", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "100", "x": 463, "y": 52, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Ruteo original\",\"Ruteo \u00f3ptimo\",\"Ruteo y flota \u00f3ptima\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "op_ruta_flota_comparacion", "moduleId": "op_ruta_flota", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Comparaci\u00f3n", "units": null, "w": "182", "x": 980, "y": 67, "z": 1}, {"color": "#4CBCFF", "definition": "_cost_op_ruta_flota = subscript( total_cost_, cases_, op_ruta_flota_mejor_alternativa_de_flota ).sum()\n_data = xr.where(to_dataarray( op_ruta_flota_comparacion )  == 'Ruteo original',23055.06,\n        xr.where(to_dataarray( op_ruta_flota_comparacion )  == 'Ruteo \u00f3ptimo',22528.10\n\n        ,_cost_op_ruta_flota))\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_total_cost", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo Total por mes", "units": null, "w": "127", "x": 365, "y": 80, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = op_ruta_fllota_total_cost\n_distance_ori = 311.22*24\n_distance_ruta_op = 290.70 * 24\n_distance_ruta_flota_op = subscript( optimizedfleet_dis_opti.sum(vehicles.name) * 24 / 1000, cases_, op_ruta_flota_mejor_alternativa_de_flota )\n_data = xr.where( to_dataarray( op_ruta_flota_comparacion ) == 'Ruteo original', _tot_cost/(_distance_ori),\n        xr.where(to_dataarray( op_ruta_flota_comparacion )  == 'Ruteo \u00f3ptimo', _tot_cost/(_distance_ruta_op),\n        _tot_cost/(_distance_ruta_flota_op)))\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_costo_por_km", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Km", "units": null, "w": "127", "x": 533, "y": 80, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = op_ruta_fllota_total_cost\n_cargo = 60*24\n_data = _tot_cost / _cargo\n\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_costo_por_ton", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Ton", "units": null, "w": "127", "x": 533, "y": 142, "z": 1}, {"color": "#4CBCFF", "definition": "_tot_cost = op_ruta_fllota_total_cost * 100\n_distance_ori = 311.22 * 24\n_distance_ruta_op = 290.70 * 24\n_distance_ruta_flota_op = subscript( optimizedfleet_dis_opti.sum(vehicles.name) * 24 / 1000, cases_, op_ruta_flota_mejor_alternativa_de_flota )\n_load = 60*24\n_data = xr.where( to_dataarray( op_ruta_flota_comparacion ) == 'Ruteo original', _tot_cost/(_distance_ori)/_load,\n        xr.where(to_dataarray( op_ruta_flota_comparacion )  == 'Ruteo \u00f3ptimo',_tot_cost/(_distance_ruta_op)/_load,\n        _tot_cost/(_distance_ruta_flota_op)/_load))\nresult = _data", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_costo_por_ton_km", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Ton.Km.", "units": null, "w": "127", "x": 533, "y": 208, "z": 1}, {"color": "#4CBCFF", "definition": "_costos = xr.where(total_cost_ == 0 , 100000000, total_cost_)\n_costo_min = _costos.min(cases_.name)\n_min = subset(total_cost_ == _costo_min)\n\nresult = _min[0]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_flota_mejor_alternativa_de_flota", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejor combinaci\u00f3n de flota", "units": null, "w": "127", "x": 533, "y": 4, "z": 1}, {"color": "#4CBCFF", "definition": "_data = xr.where( optimizedfleet_cap_option == 0., optimizedfleet_cap_option.max(), optimizedfleet_cap_option )\n_data = copy_index( (subscript( _data, cases_, op_ruta_flota_mejor_alternativa_de_flota )).astype(int).astype(str))\n_data = ('Cami\u00f3n de ' + _data)\n\nresult = to_dataarray( _data )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "mejor_combinacion_de_flota", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Mejor combinaci\u00f3n de flota", "units": null, "w": "127", "x": 702, "y": 4, "z": 1}, {"color": null, "definition": "result = create_dataarray( [['','14 Load(4)','16 Load(12)','15 Load(20)','11 Load(21)','4 Load(25)','3 Load(27)','1 Load(35)','0 Load(35)','',''],\n    ['','7 Load(1)','13 Load(5)','0 Load(5)','','','','','','',''],\n    ['','5 Load(2)','8 Load(10)','6 Load(14)','2 Load(15)','10 Load(17)','9 Load(18)','12 Load(20)','0 Load(20)','',''],\n    ['','','','','','','','','','',''],\n    ['','','','','','','','','','',''],\n    ['','','','','','','','','','',''],\n    ['','','','','','','','','','',''],\n    ['','','','','','','','','','',''],\n    ['','','','','','','','','','',''],\n    ['','','','','','','','','','','']\n    ], [vehicles,op_ruta_flota_paradas_de_ruta], dtype=None )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "op_ruta_flota_itinerarios_por_camion", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Itinerarios por cami\u00f3n", "units": null, "w": "225", "x": 126, "y": 232, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Depot', 'Paradas 1', 'Paradas 2', 'Paradas 3', 'Paradas 4',\r\n       'Paradas 5', 'Paradas 6', 'Paradas 7', 'Final', 'Distancia', 'Carga'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "op_ruta_flota_paradas_de_ruta", "moduleId": "op_ruta_flota", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Paradas de ruta", "units": null, "w": "162", "x": 1003, "y": 33, "z": 1}, {"color": "#4CBCFF", "definition": "result = subscript( total_cost_, cases_, op_ruta_flota_mejor_alternativa_de_flota ).sum()", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_flota_ct_sel", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo Total de combinaci\u00f3n \u00f3ptima", "units": null, "w": "127", "x": 702, "y": 80, "z": 1}, {"color": "#4CBCFF", "definition": "_cargo = 60*24\nresult = op_ruta_flota_ct_sel / _cargo", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_flota_ct_ton_sel", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tonelada de combinaci\u00f3n \u00f3ptima", "units": null, "w": "127", "x": 702, "y": 142, "z": 1}, {"color": "#4CBCFF", "definition": "_cargo = 60*24\n_distance_ruta_flota_op = subscript( optimizedfleet_dis_opti.sum(vehicles.name) * 24 / 1000, cases_, op_ruta_flota_mejor_alternativa_de_flota )\nresult = op_ruta_flota_ct_sel * 100 / _distance_ruta_flota_op / _cargo", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_flota_ct_ton_km_sel", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tn. Km. de combinaci\u00f3n \u00f3ptima", "units": null, "w": "127", "x": 702, "y": 216, "z": 1}, {"color": "#4CBCFF", "definition": "#import plotly.plotly as py\nimport plotly.graph_objects as go\n_xi = op_ruta_flota_comparacion.values.tolist()\n_data = []\n_yi = op_ruta_fllota_total_cost.values.tolist()\n_altura_extra = 1700.\n\nc = colores_de_comp.values.tolist()\n\ntrace = go.Bar(\n    x=_xi,\n    y=_yi,\n    name = ' $',\n    marker = dict(\n        color = c,\n    ),\n    opacity=0.55\n)\n_data.append(trace)\n\n\nlayout = go.Layout(\n    title='Costo total por mes ($)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(family='Arial', size=10, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=0,\n        tickfont=dict(\n            family='Arial',\n            size=10,\n            color='black'\n        )\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=False,\n        zeroline=True,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    showlegend = False,\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0\n    )\n)\n\nannotations = []\n\nfor i in range(0,len(_xi)):\n    annotations.append(dict(x=_xi[i], y=_yi[i]+_altura_extra, text='${:,.0f}'.format(_yi[i]),\n                                  font=dict(family='Arial', size=16,\n                                  color='rgba(58, 120, 255)'),\n                                  showarrow=False,))\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=_data, layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_total_cost_plotly", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo total por mes", "units": null, "w": "127", "x": 365, "y": 340, "z": 1}, {"color": "#4CBCFF", "definition": "result = xr.DataArray( ['rgb(214, 214, 214)','rgb(109, 165, 255)','rgb(10, 39, 86)'], coords=[op_ruta_flota_comparacion], dims=None, name=None, attrs=None, encoding=None, fastpath=False )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "colores_de_comp", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Colores de comp", "units": null, "w": "127", "x": 175, "y": 340, "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objects as go\n_xi = op_ruta_flota_comparacion.values.tolist()\n_data = []\n_yi = op_ruta_fllota_costo_por_ton.values.tolist()\n_altura_extra = 1.2\n\nc = colores_de_comp.values.tolist()\n\ntrace = go.Bar(\n    x=_xi,\n    y=_yi,\n    name = ' $',\n    marker = dict(\n        color = c,\n    ),\n    opacity=0.55\n)\n_data.append(trace)\n\n\nlayout = go.Layout(\n    title='Costo por Tonelada ($/Tn.)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(family='Arial', size=10, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=0,\n        tickfont=dict(\n            family='Arial',\n            size=10,\n            color='black'\n        )\n    ),\n        yaxis=dict(\n        autorange=True,\n        showgrid=False,\n        zeroline=True,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    showlegend = False,\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0\n    )\n)\n\nannotations = []\n\nfor i in range(0,len(_xi)):\n    annotations.append(dict(x=_xi[i], y=_yi[i]+_altura_extra, text='${:,.2f}'.format(_yi[i]),\n                                  font=dict(family='Arial', size=16,\n                                  color='rgba(58, 120, 255)'),\n                                  showarrow=False,))\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=_data, layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_costo_por_ton_plotly", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tonelada", "units": null, "w": "127", "x": 533, "y": 340, "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objects as go\n_xi = op_ruta_flota_comparacion.values.tolist()\n_data = []\n_yi = op_ruta_fllota_costo_por_km.values.tolist()\n_altura_extra = 1.15\n\nc = colores_de_comp.values.tolist()\n\ntrace = go.Bar(\n    x=_xi,\n    y=_yi,\n    name = ' $',\n    marker = dict(\n        color = c,\n    ),\n    opacity=0.55\n)\n_data.append(trace)\n\n\nlayout = go.Layout(\n    title='Costo por Km. ($/Km.)',\n    font=dict(family='Arial', size=10, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=0,\n        tickfont=dict(\n            family='Arial',\n            size=10,\n            color='black'\n        )\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=False,\n        zeroline=True,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    showlegend = False,\n)\n\nannotations = []\n\nfor i in range(0,len(_xi)):\n    annotations.append(dict(x=_xi[i], y=_yi[i]+_altura_extra, text='${:,.2f}'.format(_yi[i]),\n                                  font=dict(family='Arial', size=16,\n                                  color='rgba(58, 120, 255)'),\n                                  showarrow=False,))\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=_data, layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_costo_por_km_plotly", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Km.", "units": null, "w": "127", "x": 533, "y": 411, "z": 1}, {"color": "#4CBCFF", "definition": "import plotly.graph_objects as go\n_xi = op_ruta_flota_comparacion.values.tolist()\n_data = []\n_yi = op_ruta_fllota_costo_por_ton_km.values.tolist()\n_altura_extra = 0.02\n\nc = colores_de_comp.values.tolist()\n\ntrace = go.Bar(\n    x=_xi,\n    y=_yi,\n    name = ' $',\n    marker = dict(\n        color = c,\n    ),\n    opacity=0.55\n)\n_data.append(trace)\n\n\nlayout = go.Layout(\n    title='Costo por Tonelada Km. ($(cts)/Ton.Km.)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(family='Arial', size=10, color='#7f7f7f'),\n    xaxis=dict(showticklabels=True,\n        tickangle=0,\n        tickfont=dict(\n            family='Arial',\n            size=10,\n            color='black'\n        )\n    ),\n        yaxis=dict(\n        autorange=True,\n        showgrid=False,\n        zeroline=True,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    showlegend = False,\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=20,\n        pad=0\n    )\n)\n\nannotations = []\n\nfor i in range(0,len(_xi)):\n    annotations.append(dict(x=_xi[i], y=_yi[i]+_altura_extra, text='${:,.3f}'.format(_yi[i]),\n                                  font=dict(family='Arial', size=16,\n                                  color='rgba(58, 120, 255)'),\n                                  showarrow=False,))\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=_data, layout=layout)\nresult = plot(fig)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "op_ruta_fllota_costo_por_ton_km_plotly", "moduleId": "op_ruta_flota", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Costo por Tonelada Km.", "units": null, "w": "127", "x": 533, "y": 490, "z": 1}, {"color": "#EEEEEE", "definition": "", "description": "Flota \u00d3ptima", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "566", "identifier": "af85960bd527841cc8efbad7fe7abc466", "moduleId": "op_ruta_flota", "nodeClass": "text", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "752", "x": 88, "y": -12, "z": -1}, {"color": "#4CBCFF", "definition": "result = change_index(optimized_vehicle_routing_,cols_sto,cols_report)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "itinerarios_por_camion", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Itinerarios por Cami\u00f3n", "units": null, "w": "146", "x": 996, "y": 499, "z": 1}, {"color": "#4CBCFF", "definition": "result =  float((vehicles_load_capacity.sel({unit.name:'Tons'},drop=True)).sum('vehicles'))>=float(demand_end_point.sel({unit.name:'Tons'},drop=True).sum('clientes'))", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "check_deman", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "check_deman", "units": null, "w": "146", "x": 630, "y": 238, "z": 1}, {"color": "#4CBCFF", "definition": "install_library( \"ortools\")\r\nimport ortools\r\n\r\nresult = \"ok\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "intall_lib", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "intall lib", "units": null, "w": "96", "x": 108, "y": 763, "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index( 1,  10, _step=1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "vehicles", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Vehicles", "units": null, "w": "138", "x": 1122, "y": 650, "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index( 0,  16, _step=1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "clientes", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clients", "units": null, "w": "138", "x": 1112, "y": 683, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index((clientes.values)+'_')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "clientes_copy", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Clientes", "units": null, "w": "138", "x": 1136, "y": 617, "z": 1}, {"color": "#9999ff", "definition": "#result = pd.Index(['Depot','1','2','3','4','Final','Distance' ,'Load'])\n\n_ind =  sequence_index( 1, (( vehicle_routig.columns).size-4), _step=1 )\nresult = concat_index(concat_index(pd.Index(['Depot']), _ind),'Final','Distance' ,'Load')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "cols", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cols", "units": null, "w": "138", "x": 1178, "y": 484, "z": 1}, {"color": "#9999ff", "definition": "result = sequence_index( 1, 14, _step=1 )", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "cases_", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cases ", "units": null, "w": "138", "x": 1147, "y": 547, "z": 1}, {"color": "#9999ff", "definition": "#result = pd.Index(['Depot','1','2','3','4','Final','Distance' ,'Load'])\n\n_ind = 'Paradas '+ sequence_index( 1, (( vehicle_routig.columns).size-4), _step=1 )\nresult = concat_index(concat_index(pd.Index(['Depot']), _ind),'Final','Distancia' ,'Carga')", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "cols_sto", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cols", "units": null, "w": "138", "x": 1165, "y": 518, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Costo Fijo\",\"Costo Variable\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "rerpote_de_costos_", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Rerpote de Costos ", "units": null, "w": "138", "x": 1209, "y": 444, "z": 1}, {"color": "#9999ff", "definition": "_ind = 'Paradas '+ sequence_index( 1, (( vehicle_routig.columns).size-4), _step=1 )\nresult = _ind", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "cols_report", "moduleId": "indices", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Cols", "units": null, "w": "138", "x": 1136, "y": 585, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Tons\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "unit", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Unit", "units": null, "w": "96", "x": 715, "y": 801, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index(['Total Distance (km)','Total Load (Tons)','% Delivered ','Total Cost ($)','Cost per Km ($/Km)','Cost per Ton ($/Ton)'])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "report", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "report", "units": null, "w": "96", "x": 815, "y": 801, "z": 1}, {"color": "#4CBCFF", "definition": "result = \"\"\" \n\n<style type=\"text/css\">\n  .big-menu-header{\n \n  }\n    .big-menu-wrap {\n    width: 95%;\n    margin: 0 auto;\n     \n    }\n\t   .big-menu-wrap h1 {\n     \tfont-weight: 100;\n    }\n\t\n\n    .big-menu-box {\n      float: left;\n      position: relative;\n      width: 50%;\n      height: 50%;\n      padding-bottom: 40%;\n    }\n    .big-menu-boxInner {\n      position: absolute;\n      left: 20px;\n      right: 20px;\n      top: 20px;\n      bottom: 20px;\n      overflow: hidden;\n\t  background-color: #006ea0;\n    }\n   \n       .big-menu-boxInner-disable {\n        background-color: #999;\n    }\n    .big-menu-boxInner img {\n      width: 100%;\n    }\n\t  .big-menu-boxInner h3 {\n          color: #F9F8F9;\n    font-size: 2m;\n    font-weight: lighter;\n    font-style: italic;\n    }\n\t\n\t.big-menu-boxInner h4 {\n     color: #FBF7F7;\n    font-size: 1.6em;\n    font-weight: lighter;\n    }\n    .big-menu-boxInner .big-menu-title-box {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      margin-bottom: -50px;\n      background: #000;\n      background: rgba(0, 0, 0, 0.5);\n      color: #F4F4F4;\n      padding: 10px;\n      text-align: center;\n      -webkit-transition: all 0.3s ease-out;\n      -moz-transition: all 0.3s ease-out;\n      -o-transition: all 0.3s ease-out;\n      transition: all 0.3s ease-out;\n    }\n    body.no-touch .big-menu-boxInner:hover .big-menu-title-box, body.touch .big-menu-boxInner.touchFocus .big-menu-title-box {\n      margin-bottom: 0;\n    }\n\t.big-menu-boxInner {\n\t transition: all .15s ease-in-out;\n\t }\n\t.big-menu-boxInner:hover {\n    background: #368EE0;\n    z-index: 100;\n    transform: scale(1.15,1.15);\n    big-menu-box-shadow: 0 5px 10px 0 rgba(0,0,0,.2);\n}\n.big-menu-elem-content{\nmargin-left:0%;\nmargin-right:0%;\nmargin-bottom:5%;\n}\n.big-menu-icon{\nfont-size:2.5em;\ncolor: rgba(255, 255, 255, .5); \n    top: 0;\n    left: 0;\n    z-index: -1;\n\n\n}\n    @media only screen and (max-width : 480px) {\n      /* Smartphone view: 1 tile */\n      .big-menu-box {\n        width: 100%;\n        padding-bottom: 100%;\n      }\n\t  \n\t  .big-menu-icon{font-size:4em;}\n    }\n    @media only screen and (max-width : 650px) and (min-width : 481px) {\n      /* Tablet view: 2 tiles */\n      .big-menu-box {\n        width: 50%;\n        padding-bottom: 50%;\n      }\n\t   .big-menu-icon{font-size:2em;}\n    }\n    @media only screen and (max-width : 1050px) and (min-width : 651px) {\n      /* Small desktop / ipad view: 3 tiles */\n      .big-menu-box {\n        width: 25%;\n        padding-bottom: 25%;\n      }\n\t   .big-menu-icon{font-size:3em;}\n    }\n    @media only screen and (max-width : 1290px) and (min-width : 1051px) {\n      /* Medium desktop: 4 tiles */\n      .big-menu-box {\n        width: 33%;\n        padding-bottom: 33%;\n      }\n\t   .big-menu-icon{font-size:5em;}\n    }\n  </style>\n  <!-- Enable media queries for old IE -->\n  <!--[if lt IE 9]>\n\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\n  <![endif]-->\n\n\n  <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n     <div class=\"big-menu-wrap\">\n     <div class=\"big-menu-header\">\n <h11 style = \"color:#5f6670;\">Last Mile Optimization Tool</h11>\n  </div>\n  </div><div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2661\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Last Mile Route Optimization</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-code-fork fa-4x\"></i></div></div></div>\n  \n  <div class=\"big-menu-box\"><div class=\"big-menu-boxInner \"> <span class=\"link-to-dashboard\" data-dashboard-id=\"2662\" data-target=\"_blank\"><div class=\"big-menu-elem-content\"><h3>Fleet Optimization</h3><h4></h4></div><div class=\"big-menu-icon\"> <i class=\"fa fa-truck fa-4x\"></i></div></div></div>\n  \n   <!-- /#big-menu-wrap -->\"\"\"", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "menu_last_mile", "moduleId": "data_menus_blocks_mod", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Last Mile Blocks", "units": null, "w": "179", "x": 54, "y": 534, "z": 1}, {"color": "#9FC5E8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "50", "identifier": "reportes", "moduleId": "herramienta_de_optimizacion_de_ruteo_de_ultima_milla", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Reportes", "units": null, "w": "100", "x": 1274, "y": 608, "z": 1}, {"color": "#4CBCFF", "definition": "result = len(self.node.model.nodeDic)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "count_elements_of_model", "moduleId": "pyplan_library", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "count elements of model", "units": null, "w": "96", "x": 110, "y": 263, "z": 1}, {"color": "#6699ff", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_impacts", "moduleId": "supplier_route_optimization_mod", "nodeClass": "module", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Impacts", "units": null, "w": "184", "x": 348, "y": 421, "z": 1}, {"color": "#ffff4b", "definition": "if ((escenario_ml_aplicada.value) == 'No') & ((escenario_ml_aplicada_1.value) == 'No'): \n    result =xr.DataArray([[1.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[inputs_scenario_ml, inputs_scenarios_tot])\nelif ((escenario_ml_aplicada.value) == 'Yes') & ((escenario_ml_aplicada_1.value) == 'No'): \n     result =xr.DataArray([[1.0,1.05,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [1.0,1.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[inputs_scenario_ml, inputs_scenarios_tot])\nelif ((escenario_ml_aplicada.value) == 'No') & ((escenario_ml_aplicada_1.value) == 'Yes'): \n     result =xr.DataArray([[1.0,1.08,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [1.0,1.02,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[inputs_scenario_ml, inputs_scenarios_tot])\nelif ((escenario_ml_aplicada.value) == 'Yes') & ((escenario_ml_aplicada_1.value) == 'Yes'): \n    result =xr.DataArray([[1.0,1.05,1.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0], [1.0,1.0,1.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[inputs_scenario_ml, inputs_scenarios_tot])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "pmk_inputs_with_scenarios_1", "moduleId": "machine_learning_impacts", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs with Scenarios with ML", "units": null, "w": "184", "x": 316, "y": 211, "z": 1}, {"color": "#9999ff", "definition": "result = pd.Index([\"Delta Sales\",\"Delta Cost\"])", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "48", "identifier": "inputs_scenario_ml", "moduleId": "machine_learning_impacts", "nodeClass": "index", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Inputs Scenario ML", "units": null, "w": "96", "x": 89, "y": 151, "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    result = subscript(pmk_inputs_with_scenarios_1, [inputs_scenario_ml, inputs_scenarios_tot], ['Delta Cost', inputs_scenarios]).values.tolist()[0]\nelse:\n    if (escenario_ml_aplicada.value == 'Yes') or (escenario_ml_aplicada_1.value == 'Yes'):\n        result =  xr.where(to_dataarray( time)>=machine_learning_first_month.value,change_index(subscript(pmk_inputs_with_scenarios_1, inputs_scenario_ml, 'Delta Cost'), inputs_scenarios_tot, inputs_scenarios),1)\n    else:\n        result = subscript(pmk_inputs_with_scenarios_1, [inputs_scenario_ml, inputs_scenarios_tot], ['Delta Cost', inputs_scenarios]).values.tolist()[0]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machinelearningcostimpact", "moduleId": "machine_learning_impacts", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Cost Impact", "units": null, "w": "140", "x": 447, "y": 308, "z": 1}, {"color": "#4CBCFF", "definition": "if len(inputs_scenarios) == 1:\n    result = subscript(pmk_inputs_with_scenarios_1, [inputs_scenario_ml, inputs_scenarios_tot], ['Delta Sales', inputs_scenarios]).values.tolist()[0]\nelse:\n    if (escenario_ml_aplicada.value == 'Yes') or (escenario_ml_aplicada_1.value == 'Yes'):\n        result = xr.where(to_dataarray( time)>=machine_learning_first_month.value,change_index(subscript(pmk_inputs_with_scenarios_1, inputs_scenario_ml, 'Delta Sales'), inputs_scenarios_tot, inputs_scenarios),1)\n    else:\n        result = subscript(pmk_inputs_with_scenarios_1, [inputs_scenario_ml, inputs_scenarios_tot], ['Delta Sales', inputs_scenarios]).values.tolist()[0]", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_sales_impact", "moduleId": "machine_learning_impacts", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning Sales Impact", "units": null, "w": "148", "x": 210, "y": 299, "z": 1}, {"color": "#eeeeee", "definition": "result = 0", "description": "Machine Learning Impacts", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "367", "identifier": "node68_copy_1", "moduleId": "machine_learning_impacts", "nodeClass": "text", "nodeFont": "Helvetica,21", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "752", "x": 28, "y": 42, "z": "-6"}, {"color": "#cccccc", "definition": "result = 0", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "306", "identifier": "node48_1", "moduleId": "machine_learning_impacts", "nodeClass": "text", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": "734", "x": "40", "y": "74", "z": "-3"}, {"color": "#4cffa6", "definition": "result = selector(time,25,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "machine_learning_first_month", "moduleId": "machine_learning_impacts", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Machine Learning First Month", "units": null, "w": "300", "x": 285, "y": 90, "z": 1}, {"color": "#4cffa6", "definition": "result = machine_learning_first_month", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a6e2481b4f201452d963f6eec14b327ae", "moduleId": "machine_learning_impacts", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "machine_learning_first_month", "picture": null, "title": "Machine Learning First Month", "units": null, "w": "365", "x": 273, "y": 89, "z": 1}, {"color": "#4cffa6", "definition": "result = selector(['No','Yes'],0,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "escenario_ml_aplicada", "moduleId": "machine_learning_impacts", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Escenario ML Aplicada", "units": null, "w": "272", "x": 332, "y": 123, "z": 1}, {"color": "#4cffa6", "definition": "result = escenario_ml_aplicada", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a8df62b8de5214052877a0d173c38e27e", "moduleId": "machine_learning_impacts", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "escenario_ml_aplicada", "picture": null, "title": "Escenario ML Aplicada", "units": null, "w": "365", "x": 273, "y": 121, "z": 1}, {"color": "#4cffa6", "definition": "result = escenario_ml_aplicada_1", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "32", "identifier": "a8df62b8de5214052877a0d173c38e27e_1", "moduleId": "machine_learning_impacts", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "escenario_ml_aplicada_1", "picture": null, "title": "Escenario 3: Mas Supervisores", "units": null, "w": "365", "x": 273, "y": 153, "z": 1}, {"color": "#4cffa6", "definition": "result = selector(['No','Yes'],0,False)", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "31", "identifier": "escenario_ml_aplicada_1", "moduleId": "machine_learning_impacts", "nodeClass": "decision", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Escenario 3: Mas Supervisores", "units": null, "w": "324", "x": 277, "y": 162, "z": -7}, {"color": "#4CBCFF", "definition": "result = machinelearningcostimpact", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "acdc885368bf5444d90639711725dea13", "moduleId": "log_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "machinelearningcostimpact", "picture": null, "title": "Machine Learning Cost Impact", "units": null, "w": "184", "x": 755, "y": 389, "z": 1}, {"color": "#4CBCFF", "definition": "result = machine_learning_sales_impact", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "ab72e0b0f78dc47079d910bd43b0319e3", "moduleId": "cdm_mod", "nodeClass": "alias", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "machine_learning_sales_impact", "picture": null, "title": "Machine Learning Sales Impact", "units": null, "w": "184", "x": 280, "y": 66, "z": 1}, {"color": "#4cffa6", "definition": "result = machine_learning_first_month", "description": null, "errorInDef": true, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6e2481b4f201452d963f6eec14b327ae1", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "machine_learning_first_month", "picture": null, "title": "Machine Learning First Month", "units": null, "w": "463", "x": 169, "y": 670, "z": 1}, {"color": "#4cffa6", "definition": "result = escenario_ml_aplicada", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8df62b8de5214052877a0d173c38e27e1", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "escenario_ml_aplicada", "picture": null, "title": "Escenario ML Aplicada", "units": null, "w": "463", "x": 169, "y": 700, "z": 1}, {"color": "#4cffa6", "definition": "result = escenario_ml_aplicada_1", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a8df62b8de5214052877a0d173c38e27e_2", "moduleId": "data_mod_copy", "nodeClass": "formnode", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": "escenario_ml_aplicada_1", "picture": null, "title": "Escenario 3: Mas Supervisores", "units": null, "w": "463", "x": 169, "y": 730, "z": 1}, {"color": "#CCCCCC", "definition": "result = check_sum_all", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": "30", "identifier": "a6bba314e9dd7489a94c510eb4c2dc61a", "moduleId": "generic_business_demo", "nodeClass": "alias", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": "check_sum_all", "picture": null, "title": "Check sum all", "units": null, "w": "184", "x": 851, "y": 481, "z": 1}, {"color": "#9fc5e8", "definition": "", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 61, "identifier": "pyplan_xarray_extensions", "moduleId": "pyplan_library", "nodeClass": "module", "nodeFont": "", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pyplan XArray Extensions", "units": null, "w": 116, "x": 100, "y": 100, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.install_library", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "install_library", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Install Library", "units": null, "w": 179, "x": 306, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.set_domain", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "set_domain", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Set domain", "units": null, "w": 179, "x": 107, "y": 90, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.build_report", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "build_report", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Build Report", "units": null, "w": 179, "x": 107, "y": 127, "z": 1}, {"color": null, "definition": "result = pp.excel_connection", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "excel_connection", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Excel connection", "units": null, "w": 179, "x": 306, "y": 90, "z": 1}, {"color": null, "definition": "result = pp.create_dataarray", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "create_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Create dataArray", "units": null, "w": 179, "x": 107, "y": 164, "z": 1}, {"color": null, "definition": "result = pp.pandas_from_excel", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "pandas_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from excel", "units": null, "w": 179, "x": 304, "y": 238, "z": 1}, {"color": null, "definition": "result = pp.index_from_pandas", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "index_from_pandas", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Index from Pandas", "units": null, "w": 179, "x": 304, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.kind_to_string", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "kind_to_string", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Kind to String", "units": null, "w": 179, "x": 304, "y": 201, "z": 1}, {"color": null, "definition": "result = pp.index_from_excel", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "index_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Index from Excel", "units": null, "w": 179, "x": 304, "y": 312, "z": 1}, {"color": null, "definition": "result = pp.dataarray_from_excel", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "dataarray_from_excel", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DataArray from Excel", "units": null, "w": 179, "x": 306, "y": 386, "z": 1}, {"color": null, "definition": "result = pp.subscript", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "subscript", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subscript", "units": null, "w": 179, "x": 306, "y": 127, "z": 1}, {"color": null, "definition": "result = pp.change_index", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "change_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Change index", "units": null, "w": 179, "x": 306, "y": 164, "z": 1}, {"color": null, "definition": "result = pp.create_time", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "create_time", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "CreateTime", "units": null, "w": 179, "x": 505, "y": 90, "z": 1}, {"color": null, "definition": "result = pp.find", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "find", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Find", "units": null, "w": 179, "x": 107, "y": 201, "z": 1}, {"color": null, "definition": "result = pp.lookup", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "lookup", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Lookup", "units": null, "w": 179, "x": 505, "y": 127, "z": 1}, {"color": null, "definition": "result = pp.aggregate", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "aggregate", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Aggregate", "units": null, "w": 179, "x": 505, "y": 164, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.subset", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "subset", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subset", "units": null, "w": 179, "x": 107, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.split_text", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "split_text", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Split Text", "units": null, "w": 179, "x": 107, "y": 312, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.get_pos", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "get_pos", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Get pos", "units": null, "w": 179, "x": 107, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.concat_index", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "concat_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Concat Index", "units": null, "w": 179, "x": 107, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.choice", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "choice", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Choice", "units": null, "w": 179, "x": 505, "y": 201, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.dynamic", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "dynamic", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Dynamic", "units": null, "w": 179, "x": 505, "y": 238, "z": 1}, {"color": "#EEEEEE", "definition": "result = pp.a46ff2bbf32b248e9abbbeed6c482547b", "description": "Pyplan XArray Extensions - 16-Apr-2020", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 521, "identifier": "a46ff2bbf32b248e9abbbeed6c482547b", "moduleId": "pyplan_xarray_extensions", "nodeClass": "text", "nodeFont": "Helvetica,15", "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 0, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 1}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": 851, "x": 46, "y": 53, "z": -1}, {"color": null, "definition": "result = pp.slice_dataarray", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "slice_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Slice", "units": null, "w": 179, "x": 505, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.to_dataarray", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "to_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "To Dataarray", "units": null, "w": 179, "x": 306, "y": 423, "z": 1}, {"color": null, "definition": "result = pp.fill_inf", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "fill_inf", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fill inf", "units": null, "w": 179, "x": 505, "y": 312, "z": 1}, {"color": null, "definition": "result = pp.fill_all", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "fill_all", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Fill all", "units": null, "w": 179, "x": 505, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.apply_fn", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "apply_fn", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Apply", "units": null, "w": 179, "x": 107, "y": 238, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.add_periods", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "add_periods", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Add Periods", "units": null, "w": 179, "x": 505, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.goal_seek", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "goal_seek", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Goal Seek", "units": null, "w": 179, "x": 306, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.npv", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "npv", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "NPV", "units": null, "w": 179, "x": 505, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.irr", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "irr", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "IRR", "units": null, "w": 179, "x": 107, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.linear_depreciation", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "linear_depreciation", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Linear Depreciation", "units": null, "w": 179, "x": 107, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.copy_index", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "copy_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy Index", "units": null, "w": 179, "x": 505, "y": 460, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.copy_as_values", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "copy_as_values", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Copy as values", "units": null, "w": 179, "x": 106, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.sequence_index", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "sequence_index", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Sequence Index", "units": null, "w": 179, "x": 505, "y": 497, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.dataarray_from_pandas", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "dataarray_from_pandas", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "DataArray from Pandas", "units": null, "w": 179, "x": 306, "y": 349, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.subindex", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "subindex", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Subindex", "units": null, "w": 179, "x": 700, "y": 90, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.concat_rows", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "concat_rows", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Concat Rows", "units": null, "w": 179, "x": 700, "y": 127, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.plot", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "plot", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Plot", "units": null, "w": 179, "x": 700, "y": 164, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.log_task", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "log_task", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Log Task", "units": null, "w": 179, "x": 700, "y": 201, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.pandas_from_xlsb_file", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "pandas_from_xlsb_file", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from XLSB File", "units": null, "w": 179, "x": 700, "y": 238, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.selector", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "selector", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Selector", "units": null, "w": 179, "x": 700, "y": 275, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.send_message", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "send_message", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Send message", "units": null, "w": 179, "x": 700, "y": 312, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.progressbar", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "progressbar", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Progress bar", "units": null, "w": 179, "x": 700, "y": 349, "z": 1}, {"color": "#4CBCFF", "definition": "result = pp.pandas_from_access", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "pandas_from_access", "moduleId": "pyplan_xarray_extensions", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from Access", "units": null, "w": 179, "x": 699, "y": 386, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.create_report", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "create_report", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Credate Report", "units": null, "w": 179, "x": 699, "y": 423, "z": 1}, {"color": "#cb98ff", "definition": "result = pp.pandas_from_dataarray", "description": null, "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 33, "identifier": "pandas_from_dataarray", "moduleId": "pyplan_xarray_extensions", "nodeClass": "function", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 0, "showLabel": 1, "showOutputs": 0, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": "Pandas from DataArray", "units": null, "w": 179, "x": 699, "y": 460, "z": 1}, {"color": "#4CBCFF", "definition": "result = pp.node4", "description": "", "errorInDef": false, "evaluateOnStart": false, "extraData": null, "h": 48, "identifier": "node4", "moduleId": "pyplan_xarray_extensions", "nodeClass": "variable", "nodeFont": null, "nodeInfo": {"__dict__": {}, "fill": 1, "py/object": "pyplan_core.classes.NodeInfo.NodeInfo", "showBorder": 1, "showInputs": 1, "showLabel": 1, "showOutputs": 1, "useNodeFont": 0}, "numberFormat": null, "originalId": null, "picture": null, "title": null, "units": null, "w": 96, "x": 1100, "y": 172, "z": 1}]}